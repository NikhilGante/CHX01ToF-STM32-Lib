
CHX01_ToF_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c940  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001644  0800ca80  0800ca80  0001ca80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0c4  0800e0c4  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0c4  0800e0c4  0001e0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0cc  0800e0cc  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800e0cc  0800e0cc  0001e0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0d8  0800e0d8  0001e0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800e0dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200001f8  0800e2d4  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  0800e2d4  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027c85  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054ac  00000000  00000000  00047ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  0004d358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  0004e860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db2e  00000000  00000000  0004fbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca88  00000000  00000000  0006d706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a76  00000000  00000000  0008a18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122c04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b10  00000000  00000000  00122c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f8 	.word	0x200001f8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ca68 	.word	0x0800ca68

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001fc 	.word	0x200001fc
 800017c:	0800ca68 	.word	0x0800ca68

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_uldivmod>:
 8001100:	b953      	cbnz	r3, 8001118 <__aeabi_uldivmod+0x18>
 8001102:	b94a      	cbnz	r2, 8001118 <__aeabi_uldivmod+0x18>
 8001104:	2900      	cmp	r1, #0
 8001106:	bf08      	it	eq
 8001108:	2800      	cmpeq	r0, #0
 800110a:	bf1c      	itt	ne
 800110c:	f04f 31ff 	movne.w	r1, #4294967295
 8001110:	f04f 30ff 	movne.w	r0, #4294967295
 8001114:	f000 b96e 	b.w	80013f4 <__aeabi_idiv0>
 8001118:	f1ad 0c08 	sub.w	ip, sp, #8
 800111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001120:	f000 f806 	bl	8001130 <__udivmoddi4>
 8001124:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800112c:	b004      	add	sp, #16
 800112e:	4770      	bx	lr

08001130 <__udivmoddi4>:
 8001130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001134:	9e08      	ldr	r6, [sp, #32]
 8001136:	460d      	mov	r5, r1
 8001138:	4604      	mov	r4, r0
 800113a:	468e      	mov	lr, r1
 800113c:	2b00      	cmp	r3, #0
 800113e:	f040 8083 	bne.w	8001248 <__udivmoddi4+0x118>
 8001142:	428a      	cmp	r2, r1
 8001144:	4617      	mov	r7, r2
 8001146:	d947      	bls.n	80011d8 <__udivmoddi4+0xa8>
 8001148:	fab2 f382 	clz	r3, r2
 800114c:	b14b      	cbz	r3, 8001162 <__udivmoddi4+0x32>
 800114e:	f1c3 0120 	rsb	r1, r3, #32
 8001152:	fa05 fe03 	lsl.w	lr, r5, r3
 8001156:	fa20 f101 	lsr.w	r1, r0, r1
 800115a:	409f      	lsls	r7, r3
 800115c:	ea41 0e0e 	orr.w	lr, r1, lr
 8001160:	409c      	lsls	r4, r3
 8001162:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001166:	fbbe fcf8 	udiv	ip, lr, r8
 800116a:	fa1f f987 	uxth.w	r9, r7
 800116e:	fb08 e21c 	mls	r2, r8, ip, lr
 8001172:	fb0c f009 	mul.w	r0, ip, r9
 8001176:	0c21      	lsrs	r1, r4, #16
 8001178:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800117c:	4290      	cmp	r0, r2
 800117e:	d90a      	bls.n	8001196 <__udivmoddi4+0x66>
 8001180:	18ba      	adds	r2, r7, r2
 8001182:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001186:	f080 8118 	bcs.w	80013ba <__udivmoddi4+0x28a>
 800118a:	4290      	cmp	r0, r2
 800118c:	f240 8115 	bls.w	80013ba <__udivmoddi4+0x28a>
 8001190:	f1ac 0c02 	sub.w	ip, ip, #2
 8001194:	443a      	add	r2, r7
 8001196:	1a12      	subs	r2, r2, r0
 8001198:	fbb2 f0f8 	udiv	r0, r2, r8
 800119c:	fb08 2210 	mls	r2, r8, r0, r2
 80011a0:	fb00 f109 	mul.w	r1, r0, r9
 80011a4:	b2a4      	uxth	r4, r4
 80011a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011aa:	42a1      	cmp	r1, r4
 80011ac:	d909      	bls.n	80011c2 <__udivmoddi4+0x92>
 80011ae:	193c      	adds	r4, r7, r4
 80011b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80011b4:	f080 8103 	bcs.w	80013be <__udivmoddi4+0x28e>
 80011b8:	42a1      	cmp	r1, r4
 80011ba:	f240 8100 	bls.w	80013be <__udivmoddi4+0x28e>
 80011be:	3802      	subs	r0, #2
 80011c0:	443c      	add	r4, r7
 80011c2:	1a64      	subs	r4, r4, r1
 80011c4:	2100      	movs	r1, #0
 80011c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011ca:	b11e      	cbz	r6, 80011d4 <__udivmoddi4+0xa4>
 80011cc:	2200      	movs	r2, #0
 80011ce:	40dc      	lsrs	r4, r3
 80011d0:	e9c6 4200 	strd	r4, r2, [r6]
 80011d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d8:	b902      	cbnz	r2, 80011dc <__udivmoddi4+0xac>
 80011da:	deff      	udf	#255	; 0xff
 80011dc:	fab2 f382 	clz	r3, r2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d14f      	bne.n	8001284 <__udivmoddi4+0x154>
 80011e4:	1a8d      	subs	r5, r1, r2
 80011e6:	2101      	movs	r1, #1
 80011e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80011ec:	fa1f f882 	uxth.w	r8, r2
 80011f0:	fbb5 fcfe 	udiv	ip, r5, lr
 80011f4:	fb0e 551c 	mls	r5, lr, ip, r5
 80011f8:	fb08 f00c 	mul.w	r0, r8, ip
 80011fc:	0c22      	lsrs	r2, r4, #16
 80011fe:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001202:	42a8      	cmp	r0, r5
 8001204:	d907      	bls.n	8001216 <__udivmoddi4+0xe6>
 8001206:	197d      	adds	r5, r7, r5
 8001208:	f10c 32ff 	add.w	r2, ip, #4294967295
 800120c:	d202      	bcs.n	8001214 <__udivmoddi4+0xe4>
 800120e:	42a8      	cmp	r0, r5
 8001210:	f200 80e9 	bhi.w	80013e6 <__udivmoddi4+0x2b6>
 8001214:	4694      	mov	ip, r2
 8001216:	1a2d      	subs	r5, r5, r0
 8001218:	fbb5 f0fe 	udiv	r0, r5, lr
 800121c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001220:	fb08 f800 	mul.w	r8, r8, r0
 8001224:	b2a4      	uxth	r4, r4
 8001226:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800122a:	45a0      	cmp	r8, r4
 800122c:	d907      	bls.n	800123e <__udivmoddi4+0x10e>
 800122e:	193c      	adds	r4, r7, r4
 8001230:	f100 32ff 	add.w	r2, r0, #4294967295
 8001234:	d202      	bcs.n	800123c <__udivmoddi4+0x10c>
 8001236:	45a0      	cmp	r8, r4
 8001238:	f200 80d9 	bhi.w	80013ee <__udivmoddi4+0x2be>
 800123c:	4610      	mov	r0, r2
 800123e:	eba4 0408 	sub.w	r4, r4, r8
 8001242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001246:	e7c0      	b.n	80011ca <__udivmoddi4+0x9a>
 8001248:	428b      	cmp	r3, r1
 800124a:	d908      	bls.n	800125e <__udivmoddi4+0x12e>
 800124c:	2e00      	cmp	r6, #0
 800124e:	f000 80b1 	beq.w	80013b4 <__udivmoddi4+0x284>
 8001252:	2100      	movs	r1, #0
 8001254:	e9c6 0500 	strd	r0, r5, [r6]
 8001258:	4608      	mov	r0, r1
 800125a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125e:	fab3 f183 	clz	r1, r3
 8001262:	2900      	cmp	r1, #0
 8001264:	d14b      	bne.n	80012fe <__udivmoddi4+0x1ce>
 8001266:	42ab      	cmp	r3, r5
 8001268:	d302      	bcc.n	8001270 <__udivmoddi4+0x140>
 800126a:	4282      	cmp	r2, r0
 800126c:	f200 80b9 	bhi.w	80013e2 <__udivmoddi4+0x2b2>
 8001270:	1a84      	subs	r4, r0, r2
 8001272:	eb65 0303 	sbc.w	r3, r5, r3
 8001276:	2001      	movs	r0, #1
 8001278:	469e      	mov	lr, r3
 800127a:	2e00      	cmp	r6, #0
 800127c:	d0aa      	beq.n	80011d4 <__udivmoddi4+0xa4>
 800127e:	e9c6 4e00 	strd	r4, lr, [r6]
 8001282:	e7a7      	b.n	80011d4 <__udivmoddi4+0xa4>
 8001284:	409f      	lsls	r7, r3
 8001286:	f1c3 0220 	rsb	r2, r3, #32
 800128a:	40d1      	lsrs	r1, r2
 800128c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001290:	fbb1 f0fe 	udiv	r0, r1, lr
 8001294:	fa1f f887 	uxth.w	r8, r7
 8001298:	fb0e 1110 	mls	r1, lr, r0, r1
 800129c:	fa24 f202 	lsr.w	r2, r4, r2
 80012a0:	409d      	lsls	r5, r3
 80012a2:	fb00 fc08 	mul.w	ip, r0, r8
 80012a6:	432a      	orrs	r2, r5
 80012a8:	0c15      	lsrs	r5, r2, #16
 80012aa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012ae:	45ac      	cmp	ip, r5
 80012b0:	fa04 f403 	lsl.w	r4, r4, r3
 80012b4:	d909      	bls.n	80012ca <__udivmoddi4+0x19a>
 80012b6:	197d      	adds	r5, r7, r5
 80012b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80012bc:	f080 808f 	bcs.w	80013de <__udivmoddi4+0x2ae>
 80012c0:	45ac      	cmp	ip, r5
 80012c2:	f240 808c 	bls.w	80013de <__udivmoddi4+0x2ae>
 80012c6:	3802      	subs	r0, #2
 80012c8:	443d      	add	r5, r7
 80012ca:	eba5 050c 	sub.w	r5, r5, ip
 80012ce:	fbb5 f1fe 	udiv	r1, r5, lr
 80012d2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80012d6:	fb01 f908 	mul.w	r9, r1, r8
 80012da:	b295      	uxth	r5, r2
 80012dc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80012e0:	45a9      	cmp	r9, r5
 80012e2:	d907      	bls.n	80012f4 <__udivmoddi4+0x1c4>
 80012e4:	197d      	adds	r5, r7, r5
 80012e6:	f101 32ff 	add.w	r2, r1, #4294967295
 80012ea:	d274      	bcs.n	80013d6 <__udivmoddi4+0x2a6>
 80012ec:	45a9      	cmp	r9, r5
 80012ee:	d972      	bls.n	80013d6 <__udivmoddi4+0x2a6>
 80012f0:	3902      	subs	r1, #2
 80012f2:	443d      	add	r5, r7
 80012f4:	eba5 0509 	sub.w	r5, r5, r9
 80012f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012fc:	e778      	b.n	80011f0 <__udivmoddi4+0xc0>
 80012fe:	f1c1 0720 	rsb	r7, r1, #32
 8001302:	408b      	lsls	r3, r1
 8001304:	fa22 fc07 	lsr.w	ip, r2, r7
 8001308:	ea4c 0c03 	orr.w	ip, ip, r3
 800130c:	fa25 f407 	lsr.w	r4, r5, r7
 8001310:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001314:	fbb4 f9fe 	udiv	r9, r4, lr
 8001318:	fa1f f88c 	uxth.w	r8, ip
 800131c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001320:	fa20 f307 	lsr.w	r3, r0, r7
 8001324:	fb09 fa08 	mul.w	sl, r9, r8
 8001328:	408d      	lsls	r5, r1
 800132a:	431d      	orrs	r5, r3
 800132c:	0c2b      	lsrs	r3, r5, #16
 800132e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001332:	45a2      	cmp	sl, r4
 8001334:	fa02 f201 	lsl.w	r2, r2, r1
 8001338:	fa00 f301 	lsl.w	r3, r0, r1
 800133c:	d909      	bls.n	8001352 <__udivmoddi4+0x222>
 800133e:	eb1c 0404 	adds.w	r4, ip, r4
 8001342:	f109 30ff 	add.w	r0, r9, #4294967295
 8001346:	d248      	bcs.n	80013da <__udivmoddi4+0x2aa>
 8001348:	45a2      	cmp	sl, r4
 800134a:	d946      	bls.n	80013da <__udivmoddi4+0x2aa>
 800134c:	f1a9 0902 	sub.w	r9, r9, #2
 8001350:	4464      	add	r4, ip
 8001352:	eba4 040a 	sub.w	r4, r4, sl
 8001356:	fbb4 f0fe 	udiv	r0, r4, lr
 800135a:	fb0e 4410 	mls	r4, lr, r0, r4
 800135e:	fb00 fa08 	mul.w	sl, r0, r8
 8001362:	b2ad      	uxth	r5, r5
 8001364:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001368:	45a2      	cmp	sl, r4
 800136a:	d908      	bls.n	800137e <__udivmoddi4+0x24e>
 800136c:	eb1c 0404 	adds.w	r4, ip, r4
 8001370:	f100 35ff 	add.w	r5, r0, #4294967295
 8001374:	d22d      	bcs.n	80013d2 <__udivmoddi4+0x2a2>
 8001376:	45a2      	cmp	sl, r4
 8001378:	d92b      	bls.n	80013d2 <__udivmoddi4+0x2a2>
 800137a:	3802      	subs	r0, #2
 800137c:	4464      	add	r4, ip
 800137e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001382:	fba0 8902 	umull	r8, r9, r0, r2
 8001386:	eba4 040a 	sub.w	r4, r4, sl
 800138a:	454c      	cmp	r4, r9
 800138c:	46c6      	mov	lr, r8
 800138e:	464d      	mov	r5, r9
 8001390:	d319      	bcc.n	80013c6 <__udivmoddi4+0x296>
 8001392:	d016      	beq.n	80013c2 <__udivmoddi4+0x292>
 8001394:	b15e      	cbz	r6, 80013ae <__udivmoddi4+0x27e>
 8001396:	ebb3 020e 	subs.w	r2, r3, lr
 800139a:	eb64 0405 	sbc.w	r4, r4, r5
 800139e:	fa04 f707 	lsl.w	r7, r4, r7
 80013a2:	fa22 f301 	lsr.w	r3, r2, r1
 80013a6:	431f      	orrs	r7, r3
 80013a8:	40cc      	lsrs	r4, r1
 80013aa:	e9c6 7400 	strd	r7, r4, [r6]
 80013ae:	2100      	movs	r1, #0
 80013b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013b4:	4631      	mov	r1, r6
 80013b6:	4630      	mov	r0, r6
 80013b8:	e70c      	b.n	80011d4 <__udivmoddi4+0xa4>
 80013ba:	468c      	mov	ip, r1
 80013bc:	e6eb      	b.n	8001196 <__udivmoddi4+0x66>
 80013be:	4610      	mov	r0, r2
 80013c0:	e6ff      	b.n	80011c2 <__udivmoddi4+0x92>
 80013c2:	4543      	cmp	r3, r8
 80013c4:	d2e6      	bcs.n	8001394 <__udivmoddi4+0x264>
 80013c6:	ebb8 0e02 	subs.w	lr, r8, r2
 80013ca:	eb69 050c 	sbc.w	r5, r9, ip
 80013ce:	3801      	subs	r0, #1
 80013d0:	e7e0      	b.n	8001394 <__udivmoddi4+0x264>
 80013d2:	4628      	mov	r0, r5
 80013d4:	e7d3      	b.n	800137e <__udivmoddi4+0x24e>
 80013d6:	4611      	mov	r1, r2
 80013d8:	e78c      	b.n	80012f4 <__udivmoddi4+0x1c4>
 80013da:	4681      	mov	r9, r0
 80013dc:	e7b9      	b.n	8001352 <__udivmoddi4+0x222>
 80013de:	4608      	mov	r0, r1
 80013e0:	e773      	b.n	80012ca <__udivmoddi4+0x19a>
 80013e2:	4608      	mov	r0, r1
 80013e4:	e749      	b.n	800127a <__udivmoddi4+0x14a>
 80013e6:	f1ac 0c02 	sub.w	ip, ip, #2
 80013ea:	443d      	add	r5, r7
 80013ec:	e713      	b.n	8001216 <__udivmoddi4+0xe6>
 80013ee:	3802      	subs	r0, #2
 80013f0:	443c      	add	r4, r7
 80013f2:	e724      	b.n	800123e <__udivmoddi4+0x10e>

080013f4 <__aeabi_idiv0>:
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop

080013f8 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>:
#else
    _Iter_less_val() { }
#endif

    explicit
    _Iter_less_val(_Iter_less_iter) { }
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	7039      	strb	r1, [r7, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  __val_less_iter()
  { return _Val_less_iter(); }

  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	7138      	strb	r0, [r7, #4]
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	fab3 f383 	clz	r3, r3
 800143a:	f1c3 031f 	rsb	r3, r3, #31
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet>:
GpioStm32L1 PROG_PIN(GPIO_PORT_B_3NFW, 13);
GpioStm32L1 INT_PIN(GPIO_PORT_B_3NFW, 14);
GpioStm32L1 DIR_PIN(GPIO_PORT_B_3NFW, 15);
CHX01_ToF tof(&i2c_com2, &RST_PIN, &PROG_PIN, &INT_PIN, &DIR_PIN, EXTI15_10_IRQn, GPIO_PIN_14);

CHX01_ToF::CHX01_ToF(I2c3n* pI2cBus, Gpio3n* reset_pin, Gpio3n* prog_pin, Gpio3n* int_pin, Gpio3n* dir_pin, IRQn_Type int_line, uint16_t int_pin_num) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	721a      	strb	r2, [r3, #8]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	725a      	strb	r2, [r3, #9]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4a1a      	ldr	r2, [pc, #104]	; (80014d0 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet+0x88>)
 8001466:	60da      	str	r2, [r3, #12]
				//mode            interval	range	reso	addr	i2cbus		reset		prog		int			dir			int_line	int_pin_num		rsv1	rsv2
	gChirpDev = {CH_MODE_FREERUN,     500,	750,	1,	   0x30,	pI2cBus,	reset_pin, 	prog_pin,	int_pin,	dir_pin,	int_line,	int_pin_num,	0,		0};
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet+0x8c>)
 800146a:	4618      	mov	r0, r3
 800146c:	2328      	movs	r3, #40	; 0x28
 800146e:	461a      	mov	r2, r3
 8001470:	2100      	movs	r1, #0
 8001472:	f008 fbf7 	bl	8009c64 <memset>
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet+0x8c>)
 8001478:	2202      	movs	r2, #2
 800147a:	701a      	strb	r2, [r3, #0]
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet+0x8c>)
 800147e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001482:	805a      	strh	r2, [r3, #2]
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet+0x8c>)
 8001486:	f240 22ee 	movw	r2, #750	; 0x2ee
 800148a:	809a      	strh	r2, [r3, #4]
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet+0x8c>)
 800148e:	2201      	movs	r2, #1
 8001490:	719a      	strb	r2, [r3, #6]
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet+0x8c>)
 8001494:	2230      	movs	r2, #48	; 0x30
 8001496:	71da      	strb	r2, [r3, #7]
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet+0x8c>)
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	6093      	str	r3, [r2, #8]
 800149e:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet+0x8c>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	60d3      	str	r3, [r2, #12]
 80014a4:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet+0x8c>)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6113      	str	r3, [r2, #16]
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet+0x8c>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6153      	str	r3, [r2, #20]
 80014b0:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet+0x8c>)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	6193      	str	r3, [r2, #24]
 80014b6:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet+0x8c>)
 80014b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014bc:	7713      	strb	r3, [r2, #28]
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet+0x8c>)
 80014c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014c2:	83d3      	strh	r3, [r2, #30]

}
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	3c03126f 	.word	0x3c03126f
 80014d4:	20000280 	.word	0x20000280

080014d8 <_ZN9CHX01_ToF4initEtttff>:

void CHX01_ToF::init(uint16_t sensorType, uint16_t maxRange_mm, uint16_t interval, float offset_cm, float scaleFactor){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	4608      	mov	r0, r1
 80014e2:	4611      	mov	r1, r2
 80014e4:	461a      	mov	r2, r3
 80014e6:	4603      	mov	r3, r0
 80014e8:	817b      	strh	r3, [r7, #10]
 80014ea:	460b      	mov	r3, r1
 80014ec:	813b      	strh	r3, [r7, #8]
 80014ee:	4613      	mov	r3, r2
 80014f0:	80fb      	strh	r3, [r7, #6]
	setOffset(offset_cm);
 80014f2:	6a39      	ldr	r1, [r7, #32]
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 f9f6 	bl	80018e6 <_ZN9CHX01_ToF9setOffsetEf>
	setScaleFactor(scaleFactor);
 80014fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f000 f9ff 	bl	8001900 <_ZN9CHX01_ToF14setScaleFactorEf>

	USR_GPIO_SetPullDown(gChirpDev.int_pin);	// Ensure noise doesn't trigger interrupt
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <_ZN9CHX01_ToF4initEtttff+0x74>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	4618      	mov	r0, r3
 8001508:	f002 fde0 	bl	80040cc <_Z20USR_GPIO_SetPullDownP6Gpio3n>

	int8_t	ret;
	ret = CH_API_Init(sensorType);
 800150c:	897b      	ldrh	r3, [r7, #10]
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fb6a 	bl	8003be8 <_Z11CH_API_Initt>
 8001514:	4603      	mov	r3, r0
 8001516:	75fb      	strb	r3, [r7, #23]
	ret = CH_API_Config(CH_MODE_FREERUN, maxRange_mm, interval);
 8001518:	88fa      	ldrh	r2, [r7, #6]
 800151a:	893b      	ldrh	r3, [r7, #8]
 800151c:	4619      	mov	r1, r3
 800151e:	2002      	movs	r0, #2
 8001520:	f002 fc16 	bl	8003d50 <_Z13CH_API_Confightt>
 8001524:	4603      	mov	r3, r0
 8001526:	75fb      	strb	r3, [r7, #23]

	if (ret == RET_OK) {
 8001528:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d103      	bne.n	8001538 <_ZN9CHX01_ToF4initEtttff+0x60>
	  DEBUG_PRINT_STR("\nConfiguration is succeeded\n");
 8001530:	4807      	ldr	r0, [pc, #28]	; (8001550 <_ZN9CHX01_ToF4initEtttff+0x78>)
 8001532:	f009 f885 	bl	800a640 <puts>
 8001536:	e002      	b.n	800153e <_ZN9CHX01_ToF4initEtttff+0x66>
	} else {
	  DEBUG_PRINT_STR("\nConfiguration is failed\n");
 8001538:	4806      	ldr	r0, [pc, #24]	; (8001554 <_ZN9CHX01_ToF4initEtttff+0x7c>)
 800153a:	f009 f881 	bl	800a640 <puts>
	}
	CH_API_MeasStart();
 800153e:	f002 fcab 	bl	8003e98 <_Z16CH_API_MeasStartv>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000280 	.word	0x20000280
 8001550:	0800ca80 	.word	0x0800ca80
 8001554:	0800ca9c 	.word	0x0800ca9c

08001558 <_ZN9CHX01_ToF14handleCallBackEt>:

void CHX01_ToF::handleCallBack(uint16_t GPIO_Pin){
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == gChirpDev.int_pin_num){
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <_ZN9CHX01_ToF14handleCallBackEt+0x28>)
 8001564:	8bdb      	ldrh	r3, [r3, #30]
 8001566:	88fa      	ldrh	r2, [r7, #6]
 8001568:	429a      	cmp	r2, r3
 800156a:	d103      	bne.n	8001574 <_ZN9CHX01_ToF14handleCallBackEt+0x1c>
		gChirpDev.IRQFlag = 1;	// Raise flag to indicate interrupt has been triggered
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <_ZN9CHX01_ToF14handleCallBackEt+0x28>)
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000280 	.word	0x20000280

08001584 <_ZN9CHX01_ToF8readDistE11tdeDistUnit>:

// Instead return an std::optional<float> to signify if target was detected?
float CHX01_ToF::readDist(tdeDistUnit distUnit){
 8001584:	b5b0      	push	{r4, r5, r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	70fb      	strb	r3, [r7, #3]

	int8_t	ret_ch = RET_NG;
 8001590:	23ff      	movs	r3, #255	; 0xff
 8001592:	75fb      	strb	r3, [r7, #23]

	chirp_result_t  chResult;

	ret_ch = CH_API_GetResult(&chResult);
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	4618      	mov	r0, r3
 800159a:	f002 fc9d 	bl	8003ed8 <_Z16CH_API_GetResultP14chirp_result_t>
 800159e:	4603      	mov	r3, r0
 80015a0:	75fb      	strb	r3, [r7, #23]

	if (ret_ch != RET_FINISH){	// Data not available yet
 80015a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d001      	beq.n	80015ae <_ZN9CHX01_ToF8readDistE11tdeDistUnit+0x2a>
		return -1.0f;
 80015aa:	4b38      	ldr	r3, [pc, #224]	; (800168c <_ZN9CHX01_ToF8readDistE11tdeDistUnit+0x108>)
 80015ac:	e069      	b.n	8001682 <_ZN9CHX01_ToF8readDistE11tdeDistUnit+0xfe>
	}
	if (chResult.range == CH_NO_TARGET){	// No target found
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d101      	bne.n	80015ba <_ZN9CHX01_ToF8readDistE11tdeDistUnit+0x36>
		return -1.0f;
 80015b6:	4b35      	ldr	r3, [pc, #212]	; (800168c <_ZN9CHX01_ToF8readDistE11tdeDistUnit+0x108>)
 80015b8:	e063      	b.n	8001682 <_ZN9CHX01_ToF8readDistE11tdeDistUnit+0xfe>
	}

	float dist = (__convertToUnit(chResult.range, distUnit) /_scaleFactor) - _offset_cm;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fb81 	bl	8000cc4 <__aeabi_ui2f>
 80015c2:	4601      	mov	r1, r0
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	461a      	mov	r2, r3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f909 	bl	80017e0 <_ZN9CHX01_ToF15__convertToUnitEf11tdeDistUnit>
 80015ce:	4602      	mov	r2, r0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4619      	mov	r1, r3
 80015d6:	4610      	mov	r0, r2
 80015d8:	f7ff fc80 	bl	8000edc <__aeabi_fdiv>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4610      	mov	r0, r2
 80015e8:	f7ff faba 	bl	8000b60 <__aeabi_fsub>
 80015ec:	4603      	mov	r3, r0
 80015ee:	613b      	str	r3, [r7, #16]
	static float filteredVal;
	if(_filterStart){
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7a1b      	ldrb	r3, [r3, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <_ZN9CHX01_ToF8readDistE11tdeDistUnit+0x80>
		filteredVal = dist;
 80015f8:	4a25      	ldr	r2, [pc, #148]	; (8001690 <_ZN9CHX01_ToF8readDistE11tdeDistUnit+0x10c>)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	6013      	str	r3, [r2, #0]
		_filterStart = false;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	721a      	strb	r2, [r3, #8]
	}
	filteredVal = filteredVal*(1.0 - _filterConstant) + dist * _filterConstant;
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <_ZN9CHX01_ToF8readDistE11tdeDistUnit+0x10c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff25 	bl	8000458 <__aeabi_f2d>
 800160e:	4604      	mov	r4, r0
 8001610:	460d      	mov	r5, r1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff1e 	bl	8000458 <__aeabi_f2d>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	f04f 0000 	mov.w	r0, #0
 8001624:	491b      	ldr	r1, [pc, #108]	; (8001694 <_ZN9CHX01_ToF8readDistE11tdeDistUnit+0x110>)
 8001626:	f7fe fdb7 	bl	8000198 <__aeabi_dsub>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4620      	mov	r0, r4
 8001630:	4629      	mov	r1, r5
 8001632:	f7fe ff69 	bl	8000508 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4614      	mov	r4, r2
 800163c:	461d      	mov	r5, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	6939      	ldr	r1, [r7, #16]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fb95 	bl	8000d74 <__aeabi_fmul>
 800164a:	4603      	mov	r3, r0
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff03 	bl	8000458 <__aeabi_f2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4620      	mov	r0, r4
 8001658:	4629      	mov	r1, r5
 800165a:	f7fe fd9f 	bl	800019c <__adddf3>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff fa27 	bl	8000ab8 <__aeabi_d2f>
 800166a:	4603      	mov	r3, r0
 800166c:	4a08      	ldr	r2, [pc, #32]	; (8001690 <_ZN9CHX01_ToF8readDistE11tdeDistUnit+0x10c>)
 800166e:	6013      	str	r3, [r2, #0]
	return  _filterEnabled? filteredVal : dist;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7a5b      	ldrb	r3, [r3, #9]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <_ZN9CHX01_ToF8readDistE11tdeDistUnit+0xfa>
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <_ZN9CHX01_ToF8readDistE11tdeDistUnit+0x10c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	e000      	b.n	8001680 <_ZN9CHX01_ToF8readDistE11tdeDistUnit+0xfc>
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	bf00      	nop
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bdb0      	pop	{r4, r5, r7, pc}
 800168a:	bf00      	nop
 800168c:	bf800000 	.word	0xbf800000
 8001690:	20000254 	.word	0x20000254
 8001694:	3ff00000 	.word	0x3ff00000

08001698 <_ZN9CHX01_ToF14readDistMedianE11tdeDistUnitht>:

float CHX01_ToF::readDistMedian(tdeDistUnit distUnit, uint8_t times, uint16_t delayMs){
 8001698:	b5b0      	push	{r4, r5, r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	4608      	mov	r0, r1
 80016a2:	4611      	mov	r1, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	70fb      	strb	r3, [r7, #3]
 80016aa:	460b      	mov	r3, r1
 80016ac:	70bb      	strb	r3, [r7, #2]
 80016ae:	4613      	mov	r3, r2
 80016b0:	803b      	strh	r3, [r7, #0]
//		filteredVal = dist;
//		_filterStart = false;
//	}
//	filteredVal = filteredVal*(1.0 - _filterConstant) + dist * _filterConstant;
//	return  _filterEnabled? filteredVal : dist;
	return dist;
 80016b2:	466b      	mov	r3, sp
 80016b4:	461d      	mov	r5, r3
	float arr[times];
 80016b6:	78bb      	ldrb	r3, [r7, #2]
 80016b8:	1e5c      	subs	r4, r3, #1
 80016ba:	61fc      	str	r4, [r7, #28]
 80016bc:	4623      	mov	r3, r4
 80016be:	3301      	adds	r3, #1
 80016c0:	4618      	mov	r0, r3
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	014b      	lsls	r3, r1, #5
 80016d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016d4:	0142      	lsls	r2, r0, #5
 80016d6:	4623      	mov	r3, r4
 80016d8:	3301      	adds	r3, #1
 80016da:	4618      	mov	r0, r3
 80016dc:	f04f 0100 	mov.w	r1, #0
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	014b      	lsls	r3, r1, #5
 80016ea:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016ee:	0142      	lsls	r2, r0, #5
 80016f0:	4623      	mov	r3, r4
 80016f2:	3301      	adds	r3, #1
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	3307      	adds	r3, #7
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	ebad 0d03 	sub.w	sp, sp, r3
 8001700:	466b      	mov	r3, sp
 8001702:	3303      	adds	r3, #3
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	61bb      	str	r3, [r7, #24]
	float oneMeasurement = RET_NG;
 800170a:	4b34      	ldr	r3, [pc, #208]	; (80017dc <_ZN9CHX01_ToF14readDistMedianE11tdeDistUnitht+0x144>)
 800170c:	617b      	str	r3, [r7, #20]
	const int failsAllowed = 5;	// How many CONSECTUTIVE times reading is allowed to fail before returning -1
 800170e:	2305      	movs	r3, #5
 8001710:	613b      	str	r3, [r7, #16]
	int failCount = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
	int i = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
	while (i < times) {
 800171a:	78bb      	ldrb	r3, [r7, #2]
 800171c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171e:	429a      	cmp	r2, r3
 8001720:	da28      	bge.n	8001774 <_ZN9CHX01_ToF14readDistMedianE11tdeDistUnitht+0xdc>
		oneMeasurement = readDist(distUnit);
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	4619      	mov	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ff2c 	bl	8001584 <_ZN9CHX01_ToF8readDistE11tdeDistUnit>
 800172c:	6178      	str	r0, [r7, #20]
		if (oneMeasurement == RET_NG){	// Data not available yet
 800172e:	492b      	ldr	r1, [pc, #172]	; (80017dc <_ZN9CHX01_ToF14readDistMedianE11tdeDistUnitht+0x144>)
 8001730:	6978      	ldr	r0, [r7, #20]
 8001732:	f7ff fcb3 	bl	800109c <__aeabi_fcmpeq>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00c      	beq.n	8001756 <_ZN9CHX01_ToF14readDistMedianE11tdeDistUnitht+0xbe>
			failCount++;
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	3301      	adds	r3, #1
 8001740:	623b      	str	r3, [r7, #32]
			if(failCount > failsAllowed){
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	2b05      	cmp	r3, #5
 8001746:	dd01      	ble.n	800174c <_ZN9CHX01_ToF14readDistMedianE11tdeDistUnitht+0xb4>
				return -1.0f;
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <_ZN9CHX01_ToF14readDistMedianE11tdeDistUnitht+0x144>)
 800174a:	e042      	b.n	80017d2 <_ZN9CHX01_ToF14readDistMedianE11tdeDistUnitht+0x13a>
			HAL_Delay(delayMs);
 800174c:	883b      	ldrh	r3, [r7, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 f9bc 	bl	8004acc <HAL_Delay>
			continue;
 8001754:	e00d      	b.n	8001772 <_ZN9CHX01_ToF14readDistMedianE11tdeDistUnitht+0xda>
		else failCount = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
		HAL_Delay(delayMs);
 800175a:	883b      	ldrh	r3, [r7, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f003 f9b5 	bl	8004acc <HAL_Delay>
		arr[i] = oneMeasurement;
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001766:	6979      	ldr	r1, [r7, #20]
 8001768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		 ++i;
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	3301      	adds	r3, #1
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
	while (i < times) {
 8001772:	e7d2      	b.n	800171a <_ZN9CHX01_ToF14readDistMedianE11tdeDistUnitht+0x82>
	std::sort(arr, arr + times);
 8001774:	69b8      	ldr	r0, [r7, #24]
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	78bb      	ldrb	r3, [r7, #2]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f000 f8cb 	bl	800191a <_ZSt4sortIPfEvT_S1_>
	if(times & 1)	return  arr[times/2];	// Times is odd
 8001784:	78bb      	ldrb	r3, [r7, #2]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <_ZN9CHX01_ToF14readDistMedianE11tdeDistUnitht+0x106>
 800178e:	78bb      	ldrb	r3, [r7, #2]
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179c:	e019      	b.n	80017d2 <_ZN9CHX01_ToF14readDistMedianE11tdeDistUnitht+0x13a>
	float dist = (arr[times/2] + arr[uint8_t(times/2) - 1]) / 2.0;
 800179e:	78bb      	ldrb	r3, [r7, #2]
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80017ac:	78bb      	ldrb	r3, [r7, #2]
 80017ae:	085b      	lsrs	r3, r3, #1
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	1e5a      	subs	r2, r3, #1
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff f9d2 	bl	8000b64 <__addsf3>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fb88 	bl	8000edc <__aeabi_fdiv>
 80017cc:	4603      	mov	r3, r0
 80017ce:	60fb      	str	r3, [r7, #12]
	return dist;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	46ad      	mov	sp, r5
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bdb0      	pop	{r4, r5, r7, pc}
 80017dc:	bf800000 	.word	0xbf800000

080017e0 <_ZN9CHX01_ToF15__convertToUnitEf11tdeDistUnit>:
	}

	return avg/(float)times;
}

float CHX01_ToF::__convertToUnit(float val, tdeDistUnit distUnit){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	4613      	mov	r3, r2
 80017ec:	71fb      	strb	r3, [r7, #7]
	switch(distUnit){
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d837      	bhi.n	8001864 <_ZN9CHX01_ToF15__convertToUnitEf11tdeDistUnit+0x84>
 80017f4:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <_ZN9CHX01_ToF15__convertToUnitEf11tdeDistUnit+0x1c>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	0800180d 	.word	0x0800180d
 8001800:	08001819 	.word	0x08001819
 8001804:	08001827 	.word	0x08001827
 8001808:	08001833 	.word	0x08001833
	case DIST_UNIT_MM:
		return val/3.2f;
 800180c:	491c      	ldr	r1, [pc, #112]	; (8001880 <_ZN9CHX01_ToF15__convertToUnitEf11tdeDistUnit+0xa0>)
 800180e:	68b8      	ldr	r0, [r7, #8]
 8001810:	f7ff fb64 	bl	8000edc <__aeabi_fdiv>
 8001814:	4603      	mov	r3, r0
 8001816:	e026      	b.n	8001866 <_ZN9CHX01_ToF15__convertToUnitEf11tdeDistUnit+0x86>
	case DIST_UNIT_CM:
		return val/32.0f;
 8001818:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 800181c:	68b8      	ldr	r0, [r7, #8]
 800181e:	f7ff fb5d 	bl	8000edc <__aeabi_fdiv>
 8001822:	4603      	mov	r3, r0
 8001824:	e01f      	b.n	8001866 <_ZN9CHX01_ToF15__convertToUnitEf11tdeDistUnit+0x86>
	case DIST_UNIT_M:
		return val/3200.0f;
 8001826:	4917      	ldr	r1, [pc, #92]	; (8001884 <_ZN9CHX01_ToF15__convertToUnitEf11tdeDistUnit+0xa4>)
 8001828:	68b8      	ldr	r0, [r7, #8]
 800182a:	f7ff fb57 	bl	8000edc <__aeabi_fdiv>
 800182e:	4603      	mov	r3, r0
 8001830:	e019      	b.n	8001866 <_ZN9CHX01_ToF15__convertToUnitEf11tdeDistUnit+0x86>
	case DIST_UNIT_INCH:
		return val/3.2/25.4f;
 8001832:	68b8      	ldr	r0, [r7, #8]
 8001834:	f7fe fe10 	bl	8000458 <__aeabi_f2d>
 8001838:	a30d      	add	r3, pc, #52	; (adr r3, 8001870 <_ZN9CHX01_ToF15__convertToUnitEf11tdeDistUnit+0x90>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe ff8d 	bl	800075c <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	a30b      	add	r3, pc, #44	; (adr r3, 8001878 <_ZN9CHX01_ToF15__convertToUnitEf11tdeDistUnit+0x98>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7fe ff84 	bl	800075c <__aeabi_ddiv>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff f92c 	bl	8000ab8 <__aeabi_d2f>
 8001860:	4603      	mov	r3, r0
 8001862:	e000      	b.n	8001866 <_ZN9CHX01_ToF15__convertToUnitEf11tdeDistUnit+0x86>
	}
	return -1.0f;
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <_ZN9CHX01_ToF15__convertToUnitEf11tdeDistUnit+0xa8>)
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	9999999a 	.word	0x9999999a
 8001874:	40099999 	.word	0x40099999
 8001878:	60000000 	.word	0x60000000
 800187c:	40396666 	.word	0x40396666
 8001880:	404ccccd 	.word	0x404ccccd
 8001884:	45480000 	.word	0x45480000
 8001888:	bf800000 	.word	0xbf800000

0800188c <_ZN9CHX01_ToF12enableFilterEb>:

// Setters and getters

void CHX01_ToF::enableFilter(bool enable){
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
	_filterEnabled = enable;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	725a      	strb	r2, [r3, #9]
	if(_filterEnabled){
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7a5b      	ldrb	r3, [r3, #9]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <_ZN9CHX01_ToF12enableFilterEb+0x20>
		_filterStart = true;	// trigger start
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	721a      	strb	r2, [r3, #8]
	}
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <_ZNK9CHX01_ToF17isFilteredEnabledEv>:

bool CHX01_ToF::isFilteredEnabled() const{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
	return _filterEnabled;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7a5b      	ldrb	r3, [r3, #9]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <_ZN9CHX01_ToF17setFilterConstantEf>:


void CHX01_ToF::setFilterConstant(float filterConstant){
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
	_filterConstant = filterConstant;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	60da      	str	r2, [r3, #12]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <_ZN9CHX01_ToF9setOffsetEf>:
float CHX01_ToF::getFilterConstant()	const{
	return _filterConstant;
}


void CHX01_ToF::setOffset(float offset_cm){
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
	_offset_cm = offset_cm;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	601a      	str	r2, [r3, #0]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <_ZN9CHX01_ToF14setScaleFactorEf>:
float CHX01_ToF::getOffset()	const{
	return _offset_cm;
}


void CHX01_ToF::setScaleFactor(float scaleFactor){
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
	_scaleFactor = scaleFactor;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	605a      	str	r2, [r3, #4]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <_ZSt4sortIPfEvT_S1_>:
   *  The relative ordering of equivalent elements is not preserved, use
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 800191a:	b590      	push	{r4, r7, lr}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 8001924:	f7ff fd68 	bl	80013f8 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 8001928:	4622      	mov	r2, r4
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f804 	bl	800193a <_ZSt6__sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_>
    }
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bd90      	pop	{r4, r7, pc}

0800193a <_ZSt6__sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800193a:	b5b0      	push	{r4, r5, r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	429a      	cmp	r2, r3
 800194c:	d012      	beq.n	8001974 <_ZSt6__sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x3a>
				std::__lg(__last - __first) * 2,
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	109b      	asrs	r3, r3, #2
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fd68 	bl	800142c <_ZSt4__lgi>
 800195c:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800195e:	005a      	lsls	r2, r3, #1
 8001960:	462b      	mov	r3, r5
 8001962:	68b9      	ldr	r1, [r7, #8]
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f809 	bl	800197c <_ZSt16__introsort_loopIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800196a:	4622      	mov	r2, r4
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f82f 	bl	80019d2 <_ZSt22__final_insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_>
    }
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bdb0      	pop	{r4, r5, r7, pc}

0800197c <_ZSt16__introsort_loopIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800197c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b40      	cmp	r3, #64	; 0x40
 8001992:	dd1b      	ble.n	80019cc <_ZSt16__introsort_loopIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_+0x50>
	  if (__depth_limit == 0)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d106      	bne.n	80019a8 <_ZSt16__introsort_loopIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_+0x2c>
	      std::__partial_sort(__first, __last, __last, __comp);
 800199a:	4633      	mov	r3, r6
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f000 f839 	bl	8001a18 <_ZSt14__partial_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_>
	      return;
 80019a6:	e011      	b.n	80019cc <_ZSt16__introsort_loopIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_+0x50>
	  --__depth_limit;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 80019ae:	462a      	mov	r2, r5
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f847 	bl	8001a46 <_ZSt27__unguarded_partition_pivotIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_T0_>
 80019b8:	6178      	str	r0, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 80019ba:	4623      	mov	r3, r4
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	6978      	ldr	r0, [r7, #20]
 80019c2:	f7ff ffdb 	bl	800197c <_ZSt16__introsort_loopIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_>
	  __last = __cut;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 80019ca:	e7de      	b.n	800198a <_ZSt16__introsort_loopIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_+0xe>
    }
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019d2 <_ZSt22__final_insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 80019d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d4:	b085      	sub	sp, #20
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b40      	cmp	r3, #64	; 0x40
 80019e6:	dd0e      	ble.n	8001a06 <_ZSt22__final_insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x34>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3340      	adds	r3, #64	; 0x40
 80019ec:	4632      	mov	r2, r6
 80019ee:	4619      	mov	r1, r3
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 f84f 	bl	8001a94 <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3340      	adds	r3, #64	; 0x40
 80019fa:	462a      	mov	r2, r5
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f888 	bl	8001b14 <_ZSt26__unguarded_insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_>
    }
 8001a04:	e004      	b.n	8001a10 <_ZSt22__final_insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x3e>
	std::__insertion_sort(__first, __last, __comp);
 8001a06:	4622      	mov	r2, r4
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 f842 	bl	8001a94 <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_>
    }
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a18 <_ZSt14__partial_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 8001a26:	4623      	mov	r3, r4
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 f88c 	bl	8001b4a <_ZSt13__heap_selectIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_>
      std::__sort_heap(__first, __middle, __comp);
 8001a32:	463b      	mov	r3, r7
 8001a34:	461a      	mov	r2, r3
 8001a36:	68b9      	ldr	r1, [r7, #8]
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 f8b0 	bl	8001b9e <_ZSt11__sort_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_>
    }
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd90      	pop	{r4, r7, pc}

08001a46 <_ZSt27__unguarded_partition_pivotIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8001a46:	b5b0      	push	{r4, r5, r7, lr}
 8001a48:	b088      	sub	sp, #32
 8001a4a:	af02      	add	r7, sp, #8
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	109b      	asrs	r3, r3, #2
 8001a5a:	0fda      	lsrs	r2, r3, #31
 8001a5c:	4413      	add	r3, r2
 8001a5e:	105b      	asrs	r3, r3, #1
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4413      	add	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1d19      	adds	r1, r3, #4
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	f88d 4000 	strb.w	r4, [sp]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f8c4 	bl	8001c04 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1d18      	adds	r0, r3, #4
 8001a80:	462b      	mov	r3, r5
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	f000 f912 	bl	8001cae <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_>
 8001a8a:	4603      	mov	r3, r0
    }
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bdb0      	pop	{r4, r5, r7, pc}

08001a94 <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 8001a94:	b5b0      	push	{r4, r5, r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d031      	beq.n	8001b0c <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x78>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d02b      	beq.n	8001b0e <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x7a>
	  if (__comp(__i, __first))
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	69f9      	ldr	r1, [r7, #28]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 f887 	bl	8001bd0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d016      	beq.n	8001af6 <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x62>
		__val = _GLIBCXX_MOVE(*__i);
 8001ac8:	69f8      	ldr	r0, [r7, #28]
 8001aca:	f000 f926 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	617b      	str	r3, [r7, #20]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	461a      	mov	r2, r3
 8001ada:	69f9      	ldr	r1, [r7, #28]
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 f926 	bl	8001d2e <_ZSt13move_backwardIPfS0_ET0_T_S2_S1_>
	      *__first = _GLIBCXX_MOVE(__val);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f917 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001aec:	4603      	mov	r3, r0
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e006      	b.n	8001b04 <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x70>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 8001af6:	4628      	mov	r0, r5
 8001af8:	f7ff fc8f 	bl	800141a <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 8001afc:	4621      	mov	r1, r4
 8001afe:	69f8      	ldr	r0, [r7, #28]
 8001b00:	f000 f92d 	bl	8001d5e <_ZSt25__unguarded_linear_insertIPfN9__gnu_cxx5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	3304      	adds	r3, #4
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e7d0      	b.n	8001aae <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x1a>
      if (__first == __last) return;
 8001b0c:	bf00      	nop
    }
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bdb0      	pop	{r4, r5, r7, pc}

08001b14 <_ZSt26__unguarded_insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 8001b14:	b5b0      	push	{r4, r5, r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d00a      	beq.n	8001b42 <_ZSt26__unguarded_insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x2e>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	f7ff fc74 	bl	800141a <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 8001b32:	4621      	mov	r1, r4
 8001b34:	6978      	ldr	r0, [r7, #20]
 8001b36:	f000 f912 	bl	8001d5e <_ZSt25__unguarded_linear_insertIPfN9__gnu_cxx5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	e7f0      	b.n	8001b24 <_ZSt26__unguarded_insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x10>
    }
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bdb0      	pop	{r4, r5, r7, pc}

08001b4a <_ZSt13__heap_selectIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 8001b58:	463b      	mov	r3, r7
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 f931 	bl	8001dc6 <_ZSt11__make_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d212      	bcs.n	8001b96 <_ZSt13__heap_selectIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_+0x4c>
	if (__comp(__i, __first))
 8001b70:	463b      	mov	r3, r7
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	6979      	ldr	r1, [r7, #20]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f82a 	bl	8001bd0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <_ZSt13__heap_selectIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_+0x44>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8001b82:	463b      	mov	r3, r7
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 f957 	bl	8001e3c <_ZSt10__pop_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3304      	adds	r3, #4
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e7e8      	b.n	8001b68 <_ZSt13__heap_selectIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_+0x1e>
    }
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_ZSt11__sort_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_>:
      std::__make_heap(__first, __last, __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	dd09      	ble.n	8001bc8 <_ZSt11__sort_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_+0x2a>
	{
	  --__last;
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	60bb      	str	r3, [r7, #8]
	  std::__pop_heap(__first, __last, __last, __comp);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 f93b 	bl	8001e3c <_ZSt10__pop_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_RT0_>
      while (__last - __first > 1)
 8001bc6:	e7f0      	b.n	8001baa <_ZSt11__sort_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_+0xc>
	}
    }
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2101      	movs	r1, #1
 8001be6:	460c      	mov	r4, r1
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f7ff fa60 	bl	80010b0 <__aeabi_fcmplt>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_+0x2a>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	461c      	mov	r4, r3
 8001bfa:	b2e3      	uxtb	r3, r4
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd90      	pop	{r4, r7, pc}

08001c04 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	f107 0018 	add.w	r0, r7, #24
 8001c1a:	f7ff ffd9 	bl	8001bd0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x62>
	  if (__comp(__b, __c))
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	f107 0018 	add.w	r0, r7, #24
 8001c2c:	f7ff ffd0 	bl	8001bd0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d004      	beq.n	8001c40 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x3c>
	    std::iter_swap(__result, __b);
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f92a 	bl	8001e92 <_ZSt9iter_swapIPfS0_EvT_T0_>
    }
 8001c3e:	e032      	b.n	8001ca6 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
	  else if (__comp(__a, __c))
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	f107 0018 	add.w	r0, r7, #24
 8001c48:	f7ff ffc2 	bl	8001bd0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d004      	beq.n	8001c5c <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x58>
	    std::iter_swap(__result, __c);
 8001c52:	6839      	ldr	r1, [r7, #0]
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f91c 	bl	8001e92 <_ZSt9iter_swapIPfS0_EvT_T0_>
    }
 8001c5a:	e024      	b.n	8001ca6 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
	    std::iter_swap(__result, __a);
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f917 	bl	8001e92 <_ZSt9iter_swapIPfS0_EvT_T0_>
    }
 8001c64:	e01f      	b.n	8001ca6 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
      else if (__comp(__a, __c))
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	f107 0018 	add.w	r0, r7, #24
 8001c6e:	f7ff ffaf 	bl	8001bd0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x7e>
	std::iter_swap(__result, __a);
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f909 	bl	8001e92 <_ZSt9iter_swapIPfS0_EvT_T0_>
    }
 8001c80:	e011      	b.n	8001ca6 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
      else if (__comp(__b, __c))
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	f107 0018 	add.w	r0, r7, #24
 8001c8a:	f7ff ffa1 	bl	8001bd0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x9a>
	std::iter_swap(__result, __c);
 8001c94:	6839      	ldr	r1, [r7, #0]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 f8fb 	bl	8001e92 <_ZSt9iter_swapIPfS0_EvT_T0_>
    }
 8001c9c:	e003      	b.n	8001ca6 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
	std::iter_swap(__result, __b);
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 f8f6 	bl	8001e92 <_ZSt9iter_swapIPfS0_EvT_T0_>
    }
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68f9      	ldr	r1, [r7, #12]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff84 	bl	8001bd0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x28>
	    ++__first;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 8001cd4:	e7f2      	b.n	8001cbc <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0xe>
	  --__last;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	3b04      	subs	r3, #4
 8001cda:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 8001cdc:	463b      	mov	r3, r7
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff74 	bl	8001bd0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x48>
	    --__last;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3b04      	subs	r3, #4
 8001cf2:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 8001cf4:	e7f2      	b.n	8001cdc <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x2e>
	  if (!(__first < __last))
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d301      	bcc.n	8001d02 <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x54>
	    return __first;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	e007      	b.n	8001d12 <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x64>
	  std::iter_swap(__first, __last);
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f8c4 	bl	8001e92 <_ZSt9iter_swapIPfS0_EvT_T0_>
	  ++__first;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 8001d10:	e7d4      	b.n	8001cbc <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0xe>
    }
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <_ZSt13move_backwardIPfS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8001d2e:	b590      	push	{r4, r7, lr}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f8b6 	bl	8001eac <_ZSt12__miter_baseIPfET_S1_>
 8001d40:	4604      	mov	r4, r0
 8001d42:	68b8      	ldr	r0, [r7, #8]
 8001d44:	f000 f8b2 	bl	8001eac <_ZSt12__miter_baseIPfET_S1_>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f000 f8b6 	bl	8001ec0 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 8001d54:	4603      	mov	r3, r0
    }
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd90      	pop	{r4, r7, pc}

08001d5e <_ZSt25__unguarded_linear_insertIPfN9__gnu_cxx5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ffd6 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60bb      	str	r3, [r7, #8]
      _RandomAccessIterator __next = __last;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	60fb      	str	r3, [r7, #12]
      --__next;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	60fb      	str	r3, [r7, #12]
      while (__comp(__val, __next))
 8001d7e:	f107 0108 	add.w	r1, r7, #8
 8001d82:	463b      	mov	r3, r7
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f8bd 	bl	8001f06 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfPfEEbRT_T0_>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00c      	beq.n	8001dac <_ZSt25__unguarded_linear_insertIPfN9__gnu_cxx5__ops14_Val_less_iterEEvT_T0_+0x4e>
	  *__last = _GLIBCXX_MOVE(*__next);
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f7ff ffc1 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	601a      	str	r2, [r3, #0]
	  __last = __next;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	607b      	str	r3, [r7, #4]
	  --__next;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3b04      	subs	r3, #4
 8001da8:	60fb      	str	r3, [r7, #12]
      while (__comp(__val, __next))
 8001daa:	e7e8      	b.n	8001d7e <_ZSt25__unguarded_linear_insertIPfN9__gnu_cxx5__ops14_Val_less_iterEEvT_T0_+0x20>
      *__last = _GLIBCXX_MOVE(__val);
 8001dac:	f107 0308 	add.w	r3, r7, #8
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ffb2 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001db6:	4603      	mov	r3, r0
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	601a      	str	r2, [r3, #0]
    }
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_ZSt11__make_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001dc6:	b590      	push	{r4, r7, lr}
 8001dc8:	b08b      	sub	sp, #44	; 0x2c
 8001dca:	af02      	add	r7, sp, #8
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	dd29      	ble.n	8001e30 <_ZSt11__make_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_+0x6a>
      const _DistanceType __len = __last - __first;
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	109b      	asrs	r3, r3, #2
 8001de4:	61bb      	str	r3, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	3b02      	subs	r3, #2
 8001dea:	0fda      	lsrs	r2, r3, #31
 8001dec:	4413      	add	r3, r2
 8001dee:	105b      	asrs	r3, r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff8d 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001e00:	4603      	mov	r3, r0
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	617b      	str	r3, [r7, #20]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff85 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001e10:	4603      	mov	r3, r0
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f88d 4000 	strb.w	r4, [sp]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	69f9      	ldr	r1, [r7, #28]
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 f88c 	bl	8001f3a <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_>
	  if (__parent == 0)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <_ZSt11__make_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_+0x6e>
	  __parent--;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	61fb      	str	r3, [r7, #28]
      while (true)
 8001e2e:	e7e0      	b.n	8001df2 <_ZSt11__make_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_+0x2c>
	return;
 8001e30:	bf00      	nop
 8001e32:	e000      	b.n	8001e36 <_ZSt11__make_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_+0x70>
	    return;
 8001e34:	bf00      	nop
    }
 8001e36:	3724      	adds	r7, #36	; 0x24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <_ZSt10__pop_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001e3c:	b5b0      	push	{r4, r5, r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ff65 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001e50:	4603      	mov	r3, r0
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f7ff ff5f 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	601a      	str	r2, [r3, #0]
			 _DistanceType(__last - __first),
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	109b      	asrs	r3, r3, #2
 8001e6c:	461c      	mov	r4, r3
			 _GLIBCXX_MOVE(__value), __comp);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff51 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001e78:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f88d 5000 	strb.w	r5, [sp]
 8001e80:	4622      	mov	r2, r4
 8001e82:	2100      	movs	r1, #0
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 f858 	bl	8001f3a <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_>
    }
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bdb0      	pop	{r4, r5, r7, pc}

08001e92 <_ZSt9iter_swapIPfS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8001e9c:	6839      	ldr	r1, [r7, #0]
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8cd 	bl	800203e <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_ZSt12__miter_baseIPfET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8001ec0:	b5b0      	push	{r4, r5, r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f8d5 	bl	800207c <_ZSt12__niter_baseIPfET_S1_>
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	68b8      	ldr	r0, [r7, #8]
 8001ed6:	f000 f8d1 	bl	800207c <_ZSt12__niter_baseIPfET_S1_>
 8001eda:	4605      	mov	r5, r0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f8cc 	bl	800207c <_ZSt12__niter_baseIPfET_S1_>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4629      	mov	r1, r5
 8001eea:	4620      	mov	r0, r4
 8001eec:	f000 f8d0 	bl	8002090 <_ZSt22__copy_move_backward_aILb1EPfS0_ET1_T0_S2_S1_>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f8dc 	bl	80020b4 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8001efc:	4603      	mov	r3, r0
    }
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bdb0      	pop	{r4, r5, r7, pc}

08001f06 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfPfEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 8001f06:	b590      	push	{r4, r7, lr}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	460c      	mov	r4, r1
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4610      	mov	r0, r2
 8001f22:	f7ff f8c5 	bl	80010b0 <__aeabi_fcmplt>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfPfEEbRT_T0_+0x2a>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	461c      	mov	r4, r3
 8001f30:	b2e3      	uxtb	r3, r4
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd90      	pop	{r4, r7, pc}

08001f3a <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8001f3a:	b590      	push	{r4, r7, lr}
 8001f3c:	b08b      	sub	sp, #44	; 0x2c
 8001f3e:	af02      	add	r7, sp, #8
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	603b      	str	r3, [r7, #0]
      const _Distance __topIndex = __holeIndex;
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
      _Distance __secondChild = __holeIndex;
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	61fb      	str	r3, [r7, #28]
      while (__secondChild < (__len - 1) / 2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	0fda      	lsrs	r2, r3, #31
 8001f56:	4413      	add	r3, r2
 8001f58:	105b      	asrs	r3, r3, #1
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	da2a      	bge.n	8001fb8 <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0x7e>
	  __secondChild = 2 * (__secondChild + 1);
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3301      	adds	r3, #1
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
	  if (__comp(__first + __secondChild,
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	18d1      	adds	r1, r2, r3
		     __first + (__secondChild - 1)))
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	009b      	lsls	r3, r3, #2
	  if (__comp(__first + __secondChild,
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	461a      	mov	r2, r3
 8001f82:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001f86:	f7ff fe23 	bl	8001bd0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0x5c>
	    __secondChild--;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff febb 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001fa4:	4601      	mov	r1, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	680a      	ldr	r2, [r1, #0]
 8001fb0:	601a      	str	r2, [r3, #0]
	  __holeIndex = __secondChild;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	60bb      	str	r3, [r7, #8]
      while (__secondChild < (__len - 1) / 2)
 8001fb6:	e7cb      	b.n	8001f50 <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0x16>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d120      	bne.n	8002004 <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0xca>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3b02      	subs	r3, #2
 8001fc6:	0fda      	lsrs	r2, r3, #31
 8001fc8:	4413      	add	r3, r2
 8001fca:	105b      	asrs	r3, r3, #1
 8001fcc:	461a      	mov	r2, r3
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d117      	bne.n	8002004 <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0xca>
	  __secondChild = 2 * (__secondChild + 1);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fe95 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001ff0:	4601      	mov	r1, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	680a      	ldr	r2, [r1, #0]
 8001ffc:	601a      	str	r2, [r3, #0]
	  __holeIndex = __secondChild - 1;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3b01      	subs	r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
	__cmp(_GLIBCXX_MOVE(__comp));
 8002004:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002008:	f000 f85f 	bl	80020ca <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4621      	mov	r1, r4
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff f9f6 	bl	8001404 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8002018:	463b      	mov	r3, r7
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fe7d 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8002020:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f854 	bl	80020de <_ZSt11__push_heapIPfifN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_>
    }
 8002036:	bf00      	nop
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd90      	pop	{r4, r7, pc}

0800203e <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff fe66 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800204e:	4603      	mov	r3, r0
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002054:	6838      	ldr	r0, [r7, #0]
 8002056:	f7ff fe60 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800205a:	4603      	mov	r3, r0
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fe57 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800206c:	4603      	mov	r3, r0
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	601a      	str	r2, [r3, #0]
    }
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <_ZSt22__copy_move_backward_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 800209c:	2301      	movs	r3, #1
 800209e:	75fb      	strb	r3, [r7, #23]
				       _Category>::__copy_move_b(__first,
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 f862 	bl	800216e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 80020aa:	4603      	mov	r3, r0
    }
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
    { return __res; }
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <_ZSt11__push_heapIPfifN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	603b      	str	r3, [r7, #0]
      _Distance __parent = (__holeIndex - 1) / 2;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	0fda      	lsrs	r2, r3, #31
 80020f2:	4413      	add	r3, r2
 80020f4:	105b      	asrs	r3, r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dd0d      	ble.n	800211c <_ZSt11__push_heapIPfifN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x3e>
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4413      	add	r3, r2
 8002108:	463a      	mov	r2, r7
 800210a:	4619      	mov	r1, r3
 800210c:	6a38      	ldr	r0, [r7, #32]
 800210e:	f000 f850 	bl	80021b2 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclIPffEEbT_RT0_>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <_ZSt11__push_heapIPfifN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x3e>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <_ZSt11__push_heapIPfifN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x40>
 800211c:	2300      	movs	r3, #0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d016      	beq.n	8002150 <_ZSt11__push_heapIPfifN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x72>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4413      	add	r3, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fdf5 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8002130:	4601      	mov	r1, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4413      	add	r3, r2
 800213a:	680a      	ldr	r2, [r1, #0]
 800213c:	601a      	str	r2, [r3, #0]
	  __holeIndex = __parent;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	60bb      	str	r3, [r7, #8]
	  __parent = (__holeIndex - 1) / 2;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3b01      	subs	r3, #1
 8002146:	0fda      	lsrs	r2, r3, #31
 8002148:	4413      	add	r3, r2
 800214a:	105b      	asrs	r3, r3, #1
 800214c:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800214e:	e7d3      	b.n	80020f8 <_ZSt11__push_heapIPfifN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x1a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8002150:	463b      	mov	r3, r7
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fde1 	bl	8001d1a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8002158:	4601      	mov	r1, r0
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4413      	add	r3, r2
 8002162:	680a      	ldr	r2, [r1, #0]
 8002164:	601a      	str	r2, [r3, #0]
    }
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	109b      	asrs	r3, r3, #2
 8002182:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	425b      	negs	r3, r3
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	18d0      	adds	r0, r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	461a      	mov	r2, r3
 800219a:	68f9      	ldr	r1, [r7, #12]
 800219c:	f007 fd48 	bl	8009c30 <memmove>
	  return __result - _Num;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	425b      	negs	r3, r3
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
	}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclIPffEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 80021b2:	b590      	push	{r4, r7, lr}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2101      	movs	r1, #1
 80021c8:	460c      	mov	r4, r1
 80021ca:	4619      	mov	r1, r3
 80021cc:	4610      	mov	r0, r2
 80021ce:	f7fe ff6f 	bl	80010b0 <__aeabi_fcmplt>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <_ZNK9__gnu_cxx5__ops14_Iter_less_valclIPffEEbT_RT0_+0x2a>
 80021d8:	2300      	movs	r3, #0
 80021da:	461c      	mov	r4, r3
 80021dc:	b2e3      	uxtb	r3, r4
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd90      	pop	{r4, r7, pc}
	...

080021e8 <_Z41__static_initialization_and_destruction_0ii>:
float CHX01_ToF::setScaleFactor()	const{
	return _scaleFactor;
}
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af04      	add	r7, sp, #16
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d127      	bne.n	8002248 <_Z41__static_initialization_and_destruction_0ii+0x60>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021fe:	4293      	cmp	r3, r2
 8002200:	d122      	bne.n	8002248 <_Z41__static_initialization_and_destruction_0ii+0x60>
GpioStm32L1 RST_PIN(GPIO_PORT_B_3NFW, 12);
 8002202:	220c      	movs	r2, #12
 8002204:	2101      	movs	r1, #1
 8002206:	4812      	ldr	r0, [pc, #72]	; (8002250 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002208:	f001 fff8 	bl	80041fc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh>
GpioStm32L1 PROG_PIN(GPIO_PORT_B_3NFW, 13);
 800220c:	220d      	movs	r2, #13
 800220e:	2101      	movs	r1, #1
 8002210:	4810      	ldr	r0, [pc, #64]	; (8002254 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002212:	f001 fff3 	bl	80041fc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh>
GpioStm32L1 INT_PIN(GPIO_PORT_B_3NFW, 14);
 8002216:	220e      	movs	r2, #14
 8002218:	2101      	movs	r1, #1
 800221a:	480f      	ldr	r0, [pc, #60]	; (8002258 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800221c:	f001 ffee 	bl	80041fc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh>
GpioStm32L1 DIR_PIN(GPIO_PORT_B_3NFW, 15);
 8002220:	220f      	movs	r2, #15
 8002222:	2101      	movs	r1, #1
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002226:	f001 ffe9 	bl	80041fc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh>
CHX01_ToF tof(&i2c_com2, &RST_PIN, &PROG_PIN, &INT_PIN, &DIR_PIN, EXTI15_10_IRQn, GPIO_PIN_14);
 800222a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800222e:	9303      	str	r3, [sp, #12]
 8002230:	2328      	movs	r3, #40	; 0x28
 8002232:	9302      	str	r3, [sp, #8]
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800223e:	4a04      	ldr	r2, [pc, #16]	; (8002250 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002240:	4907      	ldr	r1, [pc, #28]	; (8002260 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002242:	4808      	ldr	r0, [pc, #32]	; (8002264 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002244:	f7ff f900 	bl	8001448 <_ZN9CHX01_ToFC1EP5I2c3nP6Gpio3nS3_S3_S3_9IRQn_Typet>
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000214 	.word	0x20000214
 8002254:	20000220 	.word	0x20000220
 8002258:	2000022c 	.word	0x2000022c
 800225c:	20000238 	.word	0x20000238
 8002260:	20000258 	.word	0x20000258
 8002264:	20000244 	.word	0x20000244

08002268 <_GLOBAL__sub_I_RST_PIN>:
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
 800226c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002270:	2001      	movs	r0, #1
 8002272:	f7ff ffb9 	bl	80021e8 <_Z41__static_initialization_and_destruction_0ii>
 8002276:	bd80      	pop	{r7, pc}

08002278 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227e:	f107 030c 	add.w	r3, r7, #12
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	4b22      	ldr	r3, [pc, #136]	; (8002318 <MX_GPIO_Init+0xa0>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a21      	ldr	r2, [pc, #132]	; (8002318 <MX_GPIO_Init+0xa0>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	61d3      	str	r3, [r2, #28]
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <MX_GPIO_Init+0xa0>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a6:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <MX_GPIO_Init+0xa0>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <MX_GPIO_Init+0xa0>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	61d3      	str	r3, [r2, #28]
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <MX_GPIO_Init+0xa0>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedB_GPIO_Port, LedB_Pin, GPIO_PIN_RESET);
 80022be:	2200      	movs	r2, #0
 80022c0:	2140      	movs	r1, #64	; 0x40
 80022c2:	4816      	ldr	r0, [pc, #88]	; (800231c <MX_GPIO_Init+0xa4>)
 80022c4:	f003 f829 	bl	800531a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn_Pin;
 80022c8:	2301      	movs	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	4619      	mov	r1, r3
 80022dc:	4810      	ldr	r0, [pc, #64]	; (8002320 <MX_GPIO_Init+0xa8>)
 80022de:	f002 fda5 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LedB_Pin;
 80022e2:	2340      	movs	r3, #64	; 0x40
 80022e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e6:	2301      	movs	r3, #1
 80022e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LedB_GPIO_Port, &GPIO_InitStruct);
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	4619      	mov	r1, r3
 80022f8:	4808      	ldr	r0, [pc, #32]	; (800231c <MX_GPIO_Init+0xa4>)
 80022fa:	f002 fd97 	bl	8004e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	2006      	movs	r0, #6
 8002304:	f002 fcff 	bl	8004d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002308:	2006      	movs	r0, #6
 800230a:	f002 fd18 	bl	8004d3e <HAL_NVIC_EnableIRQ>

}
 800230e:	bf00      	nop
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
 800231c:	40020400 	.word	0x40020400
 8002320:	40020000 	.word	0x40020000

08002324 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <MX_I2C1_Init+0x50>)
 800232a:	4a13      	ldr	r2, [pc, #76]	; (8002378 <MX_I2C1_Init+0x54>)
 800232c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <MX_I2C1_Init+0x50>)
 8002330:	4a12      	ldr	r2, [pc, #72]	; (800237c <MX_I2C1_Init+0x58>)
 8002332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <MX_I2C1_Init+0x50>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <MX_I2C1_Init+0x50>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <MX_I2C1_Init+0x50>)
 8002342:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002346:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <MX_I2C1_Init+0x50>)
 800234a:	2200      	movs	r2, #0
 800234c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <MX_I2C1_Init+0x50>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <MX_I2C1_Init+0x50>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <MX_I2C1_Init+0x50>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002360:	4804      	ldr	r0, [pc, #16]	; (8002374 <MX_I2C1_Init+0x50>)
 8002362:	f003 f823 	bl	80053ac <HAL_I2C_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800236c:	f000 f9ca 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200002b0 	.word	0x200002b0
 8002378:	40005400 	.word	0x40005400
 800237c:	000186a0 	.word	0x000186a0

08002380 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <MX_I2C2_Init+0x50>)
 8002386:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <MX_I2C2_Init+0x54>)
 8002388:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <MX_I2C2_Init+0x50>)
 800238c:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <MX_I2C2_Init+0x58>)
 800238e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <MX_I2C2_Init+0x50>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <MX_I2C2_Init+0x50>)
 8002398:	2200      	movs	r2, #0
 800239a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <MX_I2C2_Init+0x50>)
 800239e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <MX_I2C2_Init+0x50>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <MX_I2C2_Init+0x50>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <MX_I2C2_Init+0x50>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <MX_I2C2_Init+0x50>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80023bc:	4804      	ldr	r0, [pc, #16]	; (80023d0 <MX_I2C2_Init+0x50>)
 80023be:	f002 fff5 	bl	80053ac <HAL_I2C_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80023c8:	f000 f99c 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023cc:	bf00      	nop
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000304 	.word	0x20000304
 80023d4:	40005800 	.word	0x40005800
 80023d8:	000186a0 	.word	0x000186a0

080023dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08c      	sub	sp, #48	; 0x30
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 031c 	add.w	r3, r7, #28
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a37      	ldr	r2, [pc, #220]	; (80024d8 <HAL_I2C_MspInit+0xfc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d131      	bne.n	8002462 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fe:	4b37      	ldr	r3, [pc, #220]	; (80024dc <HAL_I2C_MspInit+0x100>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4a36      	ldr	r2, [pc, #216]	; (80024dc <HAL_I2C_MspInit+0x100>)
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	61d3      	str	r3, [r2, #28]
 800240a:	4b34      	ldr	r3, [pc, #208]	; (80024dc <HAL_I2C_MspInit+0x100>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002416:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800241a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800241c:	2312      	movs	r3, #18
 800241e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002428:	2304      	movs	r3, #4
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242c:	f107 031c 	add.w	r3, r7, #28
 8002430:	4619      	mov	r1, r3
 8002432:	482b      	ldr	r0, [pc, #172]	; (80024e0 <HAL_I2C_MspInit+0x104>)
 8002434:	f002 fcfa 	bl	8004e2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002438:	4b28      	ldr	r3, [pc, #160]	; (80024dc <HAL_I2C_MspInit+0x100>)
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	4a27      	ldr	r2, [pc, #156]	; (80024dc <HAL_I2C_MspInit+0x100>)
 800243e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002442:	6253      	str	r3, [r2, #36]	; 0x24
 8002444:	4b25      	ldr	r3, [pc, #148]	; (80024dc <HAL_I2C_MspInit+0x100>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	2100      	movs	r1, #0
 8002454:	201f      	movs	r0, #31
 8002456:	f002 fc56 	bl	8004d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800245a:	201f      	movs	r0, #31
 800245c:	f002 fc6f 	bl	8004d3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002460:	e035      	b.n	80024ce <HAL_I2C_MspInit+0xf2>
  else if(i2cHandle->Instance==I2C2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_I2C_MspInit+0x108>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d130      	bne.n	80024ce <HAL_I2C_MspInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_I2C_MspInit+0x100>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <HAL_I2C_MspInit+0x100>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	61d3      	str	r3, [r2, #28]
 8002478:	4b18      	ldr	r3, [pc, #96]	; (80024dc <HAL_I2C_MspInit+0x100>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002484:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800248a:	2312      	movs	r3, #18
 800248c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002492:	2303      	movs	r3, #3
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002496:	2304      	movs	r3, #4
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249a:	f107 031c 	add.w	r3, r7, #28
 800249e:	4619      	mov	r1, r3
 80024a0:	480f      	ldr	r0, [pc, #60]	; (80024e0 <HAL_I2C_MspInit+0x104>)
 80024a2:	f002 fcc3 	bl	8004e2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_I2C_MspInit+0x100>)
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <HAL_I2C_MspInit+0x100>)
 80024ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024b0:	6253      	str	r3, [r2, #36]	; 0x24
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_I2C_MspInit+0x100>)
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2100      	movs	r1, #0
 80024c2:	2021      	movs	r0, #33	; 0x21
 80024c4:	f002 fc1f 	bl	8004d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80024c8:	2021      	movs	r0, #33	; 0x21
 80024ca:	f002 fc38 	bl	8004d3e <HAL_NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3730      	adds	r7, #48	; 0x30
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40005400 	.word	0x40005400
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020400 	.word	0x40020400
 80024e4:	40005800 	.word	0x40005800

080024e8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a18      	ldr	r2, [pc, #96]	; (8002558 <HAL_I2C_MspDeInit+0x70>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d112      	bne.n	8002520 <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_I2C_MspDeInit+0x74>)
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	4a17      	ldr	r2, [pc, #92]	; (800255c <HAL_I2C_MspDeInit+0x74>)
 8002500:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002504:	6253      	str	r3, [r2, #36]	; 0x24

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002506:	2180      	movs	r1, #128	; 0x80
 8002508:	4815      	ldr	r0, [pc, #84]	; (8002560 <HAL_I2C_MspDeInit+0x78>)
 800250a:	f002 fe0f 	bl	800512c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800250e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002512:	4813      	ldr	r0, [pc, #76]	; (8002560 <HAL_I2C_MspDeInit+0x78>)
 8002514:	f002 fe0a 	bl	800512c <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002518:	201f      	movs	r0, #31
 800251a:	f002 fc1e 	bl	8004d5a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 800251e:	e017      	b.n	8002550 <HAL_I2C_MspDeInit+0x68>
  else if(i2cHandle->Instance==I2C2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <HAL_I2C_MspDeInit+0x7c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d112      	bne.n	8002550 <HAL_I2C_MspDeInit+0x68>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <HAL_I2C_MspDeInit+0x74>)
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	4a0b      	ldr	r2, [pc, #44]	; (800255c <HAL_I2C_MspDeInit+0x74>)
 8002530:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002534:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800253a:	4809      	ldr	r0, [pc, #36]	; (8002560 <HAL_I2C_MspDeInit+0x78>)
 800253c:	f002 fdf6 	bl	800512c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002540:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002544:	4806      	ldr	r0, [pc, #24]	; (8002560 <HAL_I2C_MspDeInit+0x78>)
 8002546:	f002 fdf1 	bl	800512c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800254a:	2021      	movs	r0, #33	; 0x21
 800254c:	f002 fc05 	bl	8004d5a <HAL_NVIC_DisableIRQ>
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40005400 	.word	0x40005400
 800255c:	40023800 	.word	0x40023800
 8002560:	40020400 	.word	0x40020400
 8002564:	40005800 	.word	0x40005800

08002568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08e      	sub	sp, #56	; 0x38
 800256c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800256e:	f002 fa3e 	bl	80049ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002572:	f000 f877 	bl	8002664 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002576:	f7ff fe7f 	bl	8002278 <MX_GPIO_Init>
  MX_I2C2_Init();
 800257a:	f7ff ff01 	bl	8002380 <MX_I2C2_Init>
  MX_I2C1_Init();
 800257e:	f7ff fed1 	bl	8002324 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002582:	f000 fa2b 	bl	80029dc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002586:	f000 fa95 	bl	8002ab4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_com2.start();
 800258a:	2100      	movs	r1, #0
 800258c:	482f      	ldr	r0, [pc, #188]	; (800264c <main+0xe4>)
 800258e:	f002 f85b 	bl	8004648 <_ZN10I2cStm32L15startEP12tdeErrorCode>

  for (uint8_t i = 1; i < 128; ++i) {	// I2C scan
 8002592:	2301      	movs	r3, #1
 8002594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002598:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800259c:	2b00      	cmp	r3, #0
 800259e:	db17      	blt.n	80025d0 <main+0x68>

	  if (i2c_com2.isSlaveConnected(i)) {
 80025a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025a4:	2200      	movs	r2, #0
 80025a6:	4619      	mov	r1, r3
 80025a8:	4828      	ldr	r0, [pc, #160]	; (800264c <main+0xe4>)
 80025aa:	f002 f88f 	bl	80046cc <_ZN10I2cStm32L116isSlaveConnectedEhP12tdeErrorCode>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <main+0x5c>
		  HAL_Delay(10);
 80025b4:	200a      	movs	r0, #10
 80025b6:	f002 fa89 	bl	8004acc <HAL_Delay>
		  HAL_GPIO_WritePin(LedB_GPIO_Port, LedB_Pin, GPIO_PIN_SET);
 80025ba:	2201      	movs	r2, #1
 80025bc:	2140      	movs	r1, #64	; 0x40
 80025be:	4824      	ldr	r0, [pc, #144]	; (8002650 <main+0xe8>)
 80025c0:	f002 feab 	bl	800531a <HAL_GPIO_WritePin>
  for (uint8_t i = 1; i < 128; ++i) {	// I2C scan
 80025c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025c8:	3301      	adds	r3, #1
 80025ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80025ce:	e7e3      	b.n	8002598 <main+0x30>
//  HAL_Delay(500);

  // Chirp Stuff
  chirp_result_t  ch_result;

  int8_t       	ret_ch = RET_NG;
 80025d0:	23ff      	movs	r3, #255	; 0xff
 80025d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
//  GpioStm32L1 INT_PIN(GPIO_PORT_B_3NFW, 14);
//  GpioStm32L1 DIR_PIN(GPIO_PORT_B_3NFW, 15);

//  CHX01_ToF tof(&i2c_com, &RST_PIN, &PROG_PIN, &INT_PIN, &DIR_PIN, EXTI15_10_IRQn, GPIO_PIN_14);
//  tof.init(1, 500, 50, -0.416, 1.26);
  tof.init(1, 500, 50, 0.0);
 80025d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2332      	movs	r3, #50	; 0x32
 80025e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025e8:	2101      	movs	r1, #1
 80025ea:	481a      	ldr	r0, [pc, #104]	; (8002654 <main+0xec>)
 80025ec:	f7fe ff74 	bl	80014d8 <_ZN9CHX01_ToF4initEtttff>
  tof.setFilterConstant(0.3);
 80025f0:	4919      	ldr	r1, [pc, #100]	; (8002658 <main+0xf0>)
 80025f2:	4818      	ldr	r0, [pc, #96]	; (8002654 <main+0xec>)
 80025f4:	f7ff f96a 	bl	80018cc <_ZN9CHX01_ToF17setFilterConstantEf>
  HAL_Delay(500);
 80025f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025fc:	f002 fa66 	bl	8004acc <HAL_Delay>
//      DEBUG_PRINT_STR("\nConfiguration is succeeded\n");
//   } else {
//      DEBUG_PRINT_STR("\nConfiguration is failed\n");
//   }
//   CH_API_MeasStart();
  HAL_GPIO_WritePin(LedB_GPIO_Port, LedB_Pin, GPIO_PIN_RESET);
 8002600:	2200      	movs	r2, #0
 8002602:	2140      	movs	r1, #64	; 0x40
 8002604:	4812      	ldr	r0, [pc, #72]	; (8002650 <main+0xe8>)
 8002606:	f002 fe88 	bl	800531a <HAL_GPIO_WritePin>
//			break;
//		}
//		CH_API_MeasStop();

//	  	dist = tof.readDist(DIST_UNIT_CM);
	  	dist = tof.readDistMedian(DIST_UNIT_CM, 20, 50);
 800260a:	2332      	movs	r3, #50	; 0x32
 800260c:	2214      	movs	r2, #20
 800260e:	2101      	movs	r1, #1
 8002610:	4810      	ldr	r0, [pc, #64]	; (8002654 <main+0xec>)
 8002612:	f7ff f841 	bl	8001698 <_ZN9CHX01_ToF14readDistMedianE11tdeDistUnitht>
 8002616:	62b8      	str	r0, [r7, #40]	; 0x28
//		last = last*(1.0 - alpha) + dist * alpha;

	  	uint8_t buf[30];
//	  	sprintf((char*)buf, "dist: %.2fcm | %.2fcm\n", dist, last);
//	  	sprintf((char*)buf, "dist: %.2fcm\n", dist);
	  	sprintf((char*)buf, "%.2f\n", dist);
 8002618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800261a:	f7fd ff1d 	bl	8000458 <__aeabi_f2d>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4638      	mov	r0, r7
 8002624:	490d      	ldr	r1, [pc, #52]	; (800265c <main+0xf4>)
 8002626:	f008 f857 	bl	800a6d8 <siprintf>
	  	HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800262a:	463b      	mov	r3, r7
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd fda7 	bl	8000180 <strlen>
 8002632:	4603      	mov	r3, r0
 8002634:	b29a      	uxth	r2, r3
 8002636:	4639      	mov	r1, r7
 8002638:	f04f 33ff 	mov.w	r3, #4294967295
 800263c:	4808      	ldr	r0, [pc, #32]	; (8002660 <main+0xf8>)
 800263e:	f007 f8cd 	bl	80097dc <HAL_UART_Transmit>

		HAL_Delay(50);
 8002642:	2032      	movs	r0, #50	; 0x32
 8002644:	f002 fa42 	bl	8004acc <HAL_Delay>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002648:	e7df      	b.n	800260a <main+0xa2>
 800264a:	bf00      	nop
 800264c:	20000258 	.word	0x20000258
 8002650:	40020400 	.word	0x40020400
 8002654:	20000244 	.word	0x20000244
 8002658:	3e99999a 	.word	0x3e99999a
 800265c:	0800cab8 	.word	0x0800cab8
 8002660:	20000398 	.word	0x20000398

08002664 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b092      	sub	sp, #72	; 0x48
 8002668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	2234      	movs	r2, #52	; 0x34
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f007 faf6 	bl	8009c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
 8002684:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <_Z18SystemClock_Configv+0x9c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800268e:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <_Z18SystemClock_Configv+0x9c>)
 8002690:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002694:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002696:	2302      	movs	r3, #2
 8002698:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800269a:	2301      	movs	r3, #1
 800269c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800269e:	2310      	movs	r3, #16
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4618      	mov	r0, r3
 80026ac:	f006 f840 	bl	8008730 <HAL_RCC_OscConfig>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf14      	ite	ne
 80026b6:	2301      	movne	r3, #1
 80026b8:	2300      	moveq	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <_Z18SystemClock_Configv+0x60>
  {
    Error_Handler();
 80026c0:	f000 f820 	bl	8002704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c4:	230f      	movs	r3, #15
 80026c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026c8:	2301      	movs	r3, #1
 80026ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80026cc:	2390      	movs	r3, #144	; 0x90
 80026ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026d8:	463b      	mov	r3, r7
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f006 fb57 	bl	8008d90 <HAL_RCC_ClockConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf14      	ite	ne
 80026e8:	2301      	movne	r3, #1
 80026ea:	2300      	moveq	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 80026f2:	f000 f807 	bl	8002704 <Error_Handler>
  }
}
 80026f6:	bf00      	nop
 80026f8:	3748      	adds	r7, #72	; 0x48
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40007000 	.word	0x40007000

08002704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002708:	b672      	cpsid	i
}
 800270a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800270c:	e7fe      	b.n	800270c <Error_Handler+0x8>
	...

08002710 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d108      	bne.n	8002732 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002726:	4293      	cmp	r3, r2
 8002728:	d103      	bne.n	8002732 <_Z41__static_initialization_and_destruction_0ii+0x22>
I2cStm32L1 i2c_com2(&hi2c2);
 800272a:	4904      	ldr	r1, [pc, #16]	; (800273c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800272c:	4804      	ldr	r0, [pc, #16]	; (8002740 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800272e:	f001 ff75 	bl	800461c <_ZN10I2cStm32L1C1EP17I2C_HandleTypeDef>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000304 	.word	0x20000304
 8002740:	20000258 	.word	0x20000258

08002744 <_GLOBAL__sub_I_i2c_com2>:
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
 8002748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800274c:	2001      	movs	r0, #1
 800274e:	f7ff ffdf 	bl	8002710 <_Z41__static_initialization_and_destruction_0ii>
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800275a:	4b14      	ldr	r3, [pc, #80]	; (80027ac <HAL_MspInit+0x58>)
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	4a13      	ldr	r2, [pc, #76]	; (80027ac <HAL_MspInit+0x58>)
 8002760:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002764:	6253      	str	r3, [r2, #36]	; 0x24
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_MspInit+0x58>)
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_MspInit+0x58>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <HAL_MspInit+0x58>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6213      	str	r3, [r2, #32]
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_MspInit+0x58>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_MspInit+0x58>)
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	4a07      	ldr	r2, [pc, #28]	; (80027ac <HAL_MspInit+0x58>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002794:	6253      	str	r3, [r2, #36]	; 0x24
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_MspInit+0x58>)
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	40023800 	.word	0x40023800

080027b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <NMI_Handler+0x4>

080027b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ba:	e7fe      	b.n	80027ba <HardFault_Handler+0x4>

080027bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <MemManage_Handler+0x4>

080027c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <BusFault_Handler+0x4>

080027c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <UsageFault_Handler+0x4>

080027ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f6:	f002 f94d 	bl	8004a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_TogglePin(LedB_GPIO_Port, LedB_Pin);
 8002804:	2140      	movs	r1, #64	; 0x40
 8002806:	4809      	ldr	r0, [pc, #36]	; (800282c <EXTI0_IRQHandler+0x2c>)
 8002808:	f002 fd9f 	bl	800534a <HAL_GPIO_TogglePin>
	tof.enableFilter(!tof.isFilteredEnabled());
 800280c:	4808      	ldr	r0, [pc, #32]	; (8002830 <EXTI0_IRQHandler+0x30>)
 800280e:	f7ff f852 	bl	80018b6 <_ZNK9CHX01_ToF17isFilteredEnabledEv>
 8002812:	4603      	mov	r3, r0
 8002814:	f083 0301 	eor.w	r3, r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	4619      	mov	r1, r3
 800281c:	4804      	ldr	r0, [pc, #16]	; (8002830 <EXTI0_IRQHandler+0x30>)
 800281e:	f7ff f835 	bl	800188c <_ZN9CHX01_ToF12enableFilterEb>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002822:	2001      	movs	r0, #1
 8002824:	f002 fdaa 	bl	800537c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40020400 	.word	0x40020400
 8002830:	20000244 	.word	0x20000244

08002834 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <I2C1_EV_IRQHandler+0x10>)
 800283a:	f003 febd 	bl	80065b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200002b0 	.word	0x200002b0

08002848 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <I2C2_EV_IRQHandler+0x10>)
 800284e:	f003 feb3 	bl	80065b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000304 	.word	0x20000304

0800285c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
	return 1;
 8002860:	2301      	movs	r3, #1
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <_kill>:

int _kill(int pid, int sig)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002874:	f007 f9a4 	bl	8009bc0 <__errno>
 8002878:	4603      	mov	r3, r0
 800287a:	2216      	movs	r2, #22
 800287c:	601a      	str	r2, [r3, #0]
	return -1;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <_exit>:

void _exit (int status)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002892:	f04f 31ff 	mov.w	r1, #4294967295
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff ffe7 	bl	800286a <_kill>
	while (1) {}		/* Make sure we hang here */
 800289c:	e7fe      	b.n	800289c <_exit+0x12>

0800289e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e00a      	b.n	80028c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028b0:	f3af 8000 	nop.w
 80028b4:	4601      	mov	r1, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	60ba      	str	r2, [r7, #8]
 80028bc:	b2ca      	uxtb	r2, r1
 80028be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3301      	adds	r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	dbf0      	blt.n	80028b0 <_read+0x12>
	}

return len;
 80028ce:	687b      	ldr	r3, [r7, #4]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	e009      	b.n	80028fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	60ba      	str	r2, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3301      	adds	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	429a      	cmp	r2, r3
 8002904:	dbf1      	blt.n	80028ea <_write+0x12>
	}
	return len;
 8002906:	687b      	ldr	r3, [r7, #4]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_close>:

int _close(int file)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	return -1;
 8002918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002936:	605a      	str	r2, [r3, #4]
	return 0;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <_isatty>:

int _isatty(int file)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	return 1;
 800294c:	2301      	movs	r3, #1
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
	return 0;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002978:	4a14      	ldr	r2, [pc, #80]	; (80029cc <_sbrk+0x5c>)
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <_sbrk+0x60>)
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <_sbrk+0x64>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <_sbrk+0x64>)
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <_sbrk+0x68>)
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <_sbrk+0x64>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	429a      	cmp	r2, r3
 800299e:	d207      	bcs.n	80029b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a0:	f007 f90e 	bl	8009bc0 <__errno>
 80029a4:	4603      	mov	r3, r0
 80029a6:	220c      	movs	r2, #12
 80029a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	e009      	b.n	80029c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <_sbrk+0x64>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <_sbrk+0x64>)
 80029c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029c2:	68fb      	ldr	r3, [r7, #12]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20008000 	.word	0x20008000
 80029d0:	00000400 	.word	0x00000400
 80029d4:	20000260 	.word	0x20000260
 80029d8:	200003f8 	.word	0x200003f8

080029dc <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029e2:	f107 0308 	add.w	r3, r7, #8
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	609a      	str	r2, [r3, #8]
 80029ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f0:	463b      	mov	r3, r7
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029f8:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <MX_TIM4_Init+0x94>)
 80029fa:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <MX_TIM4_Init+0x98>)
 80029fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029fe:	4b1c      	ldr	r3, [pc, #112]	; (8002a70 <MX_TIM4_Init+0x94>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a04:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <MX_TIM4_Init+0x94>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a0a:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <MX_TIM4_Init+0x94>)
 8002a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a12:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <MX_TIM4_Init+0x94>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <MX_TIM4_Init+0x94>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a1e:	4814      	ldr	r0, [pc, #80]	; (8002a70 <MX_TIM4_Init+0x94>)
 8002a20:	f006 fc22 	bl	8009268 <HAL_TIM_Base_Init>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002a2a:	f7ff fe6b 	bl	8002704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a34:	f107 0308 	add.w	r3, r7, #8
 8002a38:	4619      	mov	r1, r3
 8002a3a:	480d      	ldr	r0, [pc, #52]	; (8002a70 <MX_TIM4_Init+0x94>)
 8002a3c:	f006 fc53 	bl	80092e6 <HAL_TIM_ConfigClockSource>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002a46:	f7ff fe5d 	bl	8002704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a52:	463b      	mov	r3, r7
 8002a54:	4619      	mov	r1, r3
 8002a56:	4806      	ldr	r0, [pc, #24]	; (8002a70 <MX_TIM4_Init+0x94>)
 8002a58:	f006 fe12 	bl	8009680 <HAL_TIMEx_MasterConfigSynchronization>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002a62:	f7ff fe4f 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a66:	bf00      	nop
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000358 	.word	0x20000358
 8002a74:	40000800 	.word	0x40000800

08002a78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_TIM_Base_MspInit+0x34>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10b      	bne.n	8002aa2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_TIM_Base_MspInit+0x38>)
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <HAL_TIM_Base_MspInit+0x38>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	6253      	str	r3, [r2, #36]	; 0x24
 8002a96:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_TIM_Base_MspInit+0x38>)
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	40000800 	.word	0x40000800
 8002ab0:	40023800 	.word	0x40023800

08002ab4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ab8:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002aba:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <MX_USART1_UART_Init+0x50>)
 8002abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ac0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ada:	220c      	movs	r2, #12
 8002adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aea:	4805      	ldr	r0, [pc, #20]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002aec:	f006 fe26 	bl	800973c <HAL_UART_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002af6:	f7ff fe05 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000398 	.word	0x20000398
 8002b04:	40013800 	.word	0x40013800

08002b08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a17      	ldr	r2, [pc, #92]	; (8002b84 <HAL_UART_MspInit+0x7c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d128      	bne.n	8002b7c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b2a:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <HAL_UART_MspInit+0x80>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4a16      	ldr	r2, [pc, #88]	; (8002b88 <HAL_UART_MspInit+0x80>)
 8002b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b34:	6213      	str	r3, [r2, #32]
 8002b36:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <HAL_UART_MspInit+0x80>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_UART_MspInit+0x80>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <HAL_UART_MspInit+0x80>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	61d3      	str	r3, [r2, #28]
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <HAL_UART_MspInit+0x80>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b6c:	2307      	movs	r3, #7
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	4619      	mov	r1, r3
 8002b76:	4805      	ldr	r0, [pc, #20]	; (8002b8c <HAL_UART_MspInit+0x84>)
 8002b78:	f002 f958 	bl	8004e2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40013800 	.word	0x40013800
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40020000 	.word	0x40020000

08002b90 <_Z10COM_Configy>:
 * \brief	Configurate I2C speed
 * \param	speed	I2C speed
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t COM_Config(uint64_t speed)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	e9c7 0100 	strd	r0, r1, [r7]
    int8_t ret = RET_NG;
 8002b9a:	23ff      	movs	r3, #255	; 0xff
 8002b9c:	73fb      	strb	r3, [r7, #15]

	ret = USR_I2C_Config(speed);
 8002b9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ba2:	f001 fab0 	bl	8004106 <_Z14USR_I2C_Configy>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	73fb      	strb	r3, [r7, #15]

    return ret;
 8002baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <_Z16COM_WriteRegProght>:
 * \param	reg_addr 	sensor programming register address.
 * 			data 		data to transmit.
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t COM_WriteRegProg(uint8_t reg_addr, uint16_t data)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	460a      	mov	r2, r1
 8002bc0:	71fb      	strb	r3, [r7, #7]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	80bb      	strh	r3, [r7, #4]
	uint8_t message[3];
	int8_t ret = RET_NG;
 8002bc6:	23ff      	movs	r3, #255	; 0xff
 8002bc8:	73fb      	strb	r3, [r7, #15]

	/* Set register address write bit */
	reg_addr |= (uint8_t)0x80;
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bd0:	71fb      	strb	r3, [r7, #7]
	
	/* Write the register address, followed by the value to be written */
	message[0] = reg_addr;
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	733b      	strb	r3, [r7, #12]
	message[1] = (uint8_t)data;
 8002bd6:	88bb      	ldrh	r3, [r7, #4]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	737b      	strb	r3, [r7, #13]
	message[2] = (uint8_t)(data >> 8);
 8002bdc:	88bb      	ldrh	r3, [r7, #4]
 8002bde:	121b      	asrs	r3, r3, #8
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	73bb      	strb	r3, [r7, #14]

	/* For the 2-byte registers, we also need to also write MSB after the LSB */
	if ((reg_addr & 0x40u) != 0u) {
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <_Z16COM_WriteRegProght+0x4c>
		ret = USR_I2C_Write(CHIRP_I2C_ADDR_PROG, message, 2);	/* 8-bit data */
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	2045      	movs	r0, #69	; 0x45
 8002bf8:	f001 fa90 	bl	800411c <_Z13USR_I2C_WritehPKht>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	e008      	b.n	8002c14 <_Z16COM_WriteRegProght+0x5e>
	} else {
		ret = USR_I2C_Write(CHIRP_I2C_ADDR_PROG, message, 3);	/* 16-bit data */
 8002c02:	f107 030c 	add.w	r3, r7, #12
 8002c06:	2203      	movs	r2, #3
 8002c08:	4619      	mov	r1, r3
 8002c0a:	2045      	movs	r0, #69	; 0x45
 8002c0c:	f001 fa86 	bl	800411c <_Z13USR_I2C_WritehPKht>
 8002c10:	4603      	mov	r3, r0
 8002c12:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_Z15COM_WriteRegApphhtt>:
 * 			data		data to transmit
 * 			nbytes		number of bytes to write
 * \return 	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t COM_WriteRegApp(uint8_t i2c_addr, uint8_t reg_addr, uint16_t data, uint16_t nbytes)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4604      	mov	r4, r0
 8002c28:	4608      	mov	r0, r1
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4623      	mov	r3, r4
 8002c30:	71fb      	strb	r3, [r7, #7]
 8002c32:	4603      	mov	r3, r0
 8002c34:	71bb      	strb	r3, [r7, #6]
 8002c36:	460b      	mov	r3, r1
 8002c38:	80bb      	strh	r3, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	807b      	strh	r3, [r7, #2]
	uint8_t message[4];
	int8_t ret = RET_NG;
 8002c3e:	23ff      	movs	r3, #255	; 0xff
 8002c40:	73fb      	strb	r3, [r7, #15]
	uint16_t len = nbytes;
 8002c42:	887b      	ldrh	r3, [r7, #2]
 8002c44:	81bb      	strh	r3, [r7, #12]

	if (((int16_t)nbytes == 1) ||( (int16_t)nbytes == 2)) {
 8002c46:	887b      	ldrh	r3, [r7, #2]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d002      	beq.n	8002c52 <_Z15COM_WriteRegApphhtt+0x32>
 8002c4c:	887b      	ldrh	r3, [r7, #2]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d117      	bne.n	8002c82 <_Z15COM_WriteRegApphhtt+0x62>
		// Place byte count (2) in first byte of message
		// Sensor is little-endian, so LSB goes in at the lower address
		message[0] = reg_addr;
 8002c52:	79bb      	ldrb	r3, [r7, #6]
 8002c54:	723b      	strb	r3, [r7, #8]
		message[1] = (uint8_t)nbytes;
 8002c56:	887b      	ldrh	r3, [r7, #2]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	727b      	strb	r3, [r7, #9]
		message[2] = (uint8_t)data;
 8002c5c:	88bb      	ldrh	r3, [r7, #4]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	72bb      	strb	r3, [r7, #10]
		message[3] = (uint8_t)(data >> 8);
 8002c62:	88bb      	ldrh	r3, [r7, #4]
 8002c64:	121b      	asrs	r3, r3, #8
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	72fb      	strb	r3, [r7, #11]
		len = len+(uint16_t)2;
 8002c6a:	89bb      	ldrh	r3, [r7, #12]
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	81bb      	strh	r3, [r7, #12]
		ret = USR_I2C_Write(i2c_addr, message, len );
 8002c70:	89ba      	ldrh	r2, [r7, #12]
 8002c72:	f107 0108 	add.w	r1, r7, #8
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f001 fa4f 	bl	800411c <_Z13USR_I2C_WritehPKht>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}

08002c8e <_Z12COM_WriteMemttt>:
 * 			data		data to transmit
 * 			nbytes		number of bytes to write
 * \return 	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t COM_WriteMem(uint16_t mem_addr, uint16_t data, uint16_t nbytes)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	80fb      	strh	r3, [r7, #6]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	80bb      	strh	r3, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	807b      	strh	r3, [r7, #2]
	uint16_t opcode;
	int8_t ret = RET_NG;
 8002ca0:	23ff      	movs	r3, #255	; 0xff
 8002ca2:	737b      	strb	r3, [r7, #13]

	if (((int16_t)nbytes == 1) || ((int16_t)nbytes == 2)) {
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d002      	beq.n	8002cb0 <_Z12COM_WriteMemttt+0x22>
 8002caa:	887b      	ldrh	r3, [r7, #2]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d124      	bne.n	8002cfa <_Z12COM_WriteMemttt+0x6c>
		ret = COM_WriteRegProg(CH_PROG_REG_ADDR, mem_addr);
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	2005      	movs	r0, #5
 8002cb6:	f7ff ff7e 	bl	8002bb6 <_Z16COM_WriteRegProght>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	737b      	strb	r3, [r7, #13]

		if (ret == RET_OK) {
 8002cbe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <_Z12COM_WriteMemttt+0x46>
			ret = COM_WriteRegProg(CH_PROG_REG_DATA, data);
 8002cc6:	88bb      	ldrh	r3, [r7, #4]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	2006      	movs	r0, #6
 8002ccc:	f7ff ff73 	bl	8002bb6 <_Z16COM_WriteRegProght>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	737b      	strb	r3, [r7, #13]
		}

		if ((int16_t)nbytes == 1) {
 8002cd4:	887b      	ldrh	r3, [r7, #2]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d102      	bne.n	8002ce0 <_Z12COM_WriteMemttt+0x52>
			opcode = 0x0B;
 8002cda:	230b      	movs	r3, #11
 8002cdc:	81fb      	strh	r3, [r7, #14]
 8002cde:	e001      	b.n	8002ce4 <_Z12COM_WriteMemttt+0x56>
		} else {
			opcode = 0x03;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	81fb      	strh	r3, [r7, #14]
		}
		if (ret == RET_OK) {
 8002ce4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <_Z12COM_WriteMemttt+0x6c>
			ret = COM_WriteRegProg(CH_PROG_REG_CTL, opcode);
 8002cec:	89fb      	ldrh	r3, [r7, #14]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	2044      	movs	r0, #68	; 0x44
 8002cf2:	f7ff ff60 	bl	8002bb6 <_Z16COM_WriteRegProght>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	737b      	strb	r3, [r7, #13]
		}
	}
	
	return ret;
 8002cfa:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_Z17COM_WriteMemBursttPKht>:
 * 			buffer		pointer to data to transmit
 * 			nbytes		number of bytes to write
 * \return 	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t COM_WriteMemBurst(uint16_t mem_addr, const uint8_t* buffer, uint16_t nbytes)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	6039      	str	r1, [r7, #0]
 8002d10:	80fb      	strh	r3, [r7, #6]
 8002d12:	4613      	mov	r3, r2
 8002d14:	80bb      	strh	r3, [r7, #4]
	uint8_t burst_hdr[2] = {0xC4, 0x0B};
 8002d16:	f640 33c4 	movw	r3, #3012	; 0xbc4
 8002d1a:	81bb      	strh	r3, [r7, #12]
	int8_t ret = RET_NG;
 8002d1c:	23ff      	movs	r3, #255	; 0xff
 8002d1e:	73fb      	strb	r3, [r7, #15]

	ret = COM_WriteRegProg(CH_PROG_REG_ADDR, mem_addr);
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	4619      	mov	r1, r3
 8002d24:	2005      	movs	r0, #5
 8002d26:	f7ff ff46 	bl	8002bb6 <_Z16COM_WriteRegProght>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	73fb      	strb	r3, [r7, #15]

	if (ret == RET_OK) {
 8002d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d108      	bne.n	8002d48 <_Z17COM_WriteMemBursttPKht+0x42>
		ret = COM_WriteRegProg(CH_PROG_REG_CNT, (nbytes - (uint16_t)1));
 8002d36:	88bb      	ldrh	r3, [r7, #4]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	2007      	movs	r0, #7
 8002d40:	f7ff ff39 	bl	8002bb6 <_Z16COM_WriteRegProght>
 8002d44:	4603      	mov	r3, r0
 8002d46:	73fb      	strb	r3, [r7, #15]
	}
	if (ret == RET_OK) {
 8002d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d108      	bne.n	8002d62 <_Z17COM_WriteMemBursttPKht+0x5c>
		ret = USR_I2C_Write(CHIRP_I2C_ADDR_PROG, burst_hdr, sizeof(burst_hdr));
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	2202      	movs	r2, #2
 8002d56:	4619      	mov	r1, r3
 8002d58:	2045      	movs	r0, #69	; 0x45
 8002d5a:	f001 f9df 	bl	800411c <_Z13USR_I2C_WritehPKht>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	73fb      	strb	r3, [r7, #15]
	}
	if (ret == RET_OK) {
 8002d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d107      	bne.n	8002d7a <_Z17COM_WriteMemBursttPKht+0x74>
		ret = USR_I2C_Write(CHIRP_I2C_ADDR_PROG, buffer, nbytes);
 8002d6a:	88bb      	ldrh	r3, [r7, #4]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	6839      	ldr	r1, [r7, #0]
 8002d70:	2045      	movs	r0, #69	; 0x45
 8002d72:	f001 f9d3 	bl	800411c <_Z13USR_I2C_WritehPKht>
 8002d76:	4603      	mov	r3, r0
 8002d78:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <_Z11COM_ReadReghhPtt>:
 * 			read_val	read data value 
 * 			nbytes		number of bytes to read
 * \return 	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t COM_ReadReg(uint8_t i2c_addr, uint8_t reg_addr, uint16_t *read_val, uint16_t nbytes)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af02      	add	r7, sp, #8
 8002d8c:	603a      	str	r2, [r7, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4603      	mov	r3, r0
 8002d92:	71fb      	strb	r3, [r7, #7]
 8002d94:	460b      	mov	r3, r1
 8002d96:	71bb      	strb	r3, [r7, #6]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	80bb      	strh	r3, [r7, #4]
	uint8_t wr_buf;
	uint8_t rd_buf[2];
	int8_t ret = RET_NG;
 8002d9c:	23ff      	movs	r3, #255	; 0xff
 8002d9e:	73fb      	strb	r3, [r7, #15]

	if (((int16_t)nbytes == 1) || ((int16_t)nbytes == 2)) {
 8002da0:	88bb      	ldrh	r3, [r7, #4]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d002      	beq.n	8002dac <_Z11COM_ReadReghhPtt+0x26>
 8002da6:	88bb      	ldrh	r3, [r7, #4]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d124      	bne.n	8002df6 <_Z11COM_ReadReghhPtt+0x70>
		wr_buf = reg_addr;
 8002dac:	79bb      	ldrb	r3, [r7, #6]
 8002dae:	73bb      	strb	r3, [r7, #14]
		ret = USR_I2C_Read(i2c_addr, &wr_buf, 1, rd_buf, nbytes);
 8002db0:	f107 020c 	add.w	r2, r7, #12
 8002db4:	f107 010e 	add.w	r1, r7, #14
 8002db8:	79f8      	ldrb	r0, [r7, #7]
 8002dba:	88bb      	ldrh	r3, [r7, #4]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f001 f9d1 	bl	8004168 <_Z12USR_I2C_ReadhPhtS_t>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	73fb      	strb	r3, [r7, #15]

		if (ret == RET_OK){
 8002dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d111      	bne.n	8002df6 <_Z11COM_ReadReghhPtt+0x70>
			if (nbytes == (uint16_t)1) {
 8002dd2:	88bb      	ldrh	r3, [r7, #4]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d104      	bne.n	8002de2 <_Z11COM_ReadReghhPtt+0x5c>
				*read_val = (uint16_t)rd_buf[0];
 8002dd8:	7b3b      	ldrb	r3, [r7, #12]
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	801a      	strh	r2, [r3, #0]
 8002de0:	e009      	b.n	8002df6 <_Z11COM_ReadReghhPtt+0x70>
			} else {
				*read_val = (uint16_t)rd_buf[0] | ((uint16_t)rd_buf[1] << 8);
 8002de2:	7b3b      	ldrb	r3, [r7, #12]
 8002de4:	b21a      	sxth	r2, r3
 8002de6:	7b7b      	ldrb	r3, [r7, #13]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	4313      	orrs	r3, r2
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	return ret;
 8002df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <_Z16DRV_FWLoad_CH101v>:
 * \brief	Load firmware
 * \param	none
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t DRV_FWLoad_CH101(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
	int8_t ret = RET_NG;
 8002e0a:	23ff      	movs	r3, #255	; 0xff
 8002e0c:	73fb      	strb	r3, [r7, #15]
	uint8_t i2c_addr_app;
	uint16_t write_val;
	const uint8_t* pt_ram = &ram_ch101_gpr_init[0];
 8002e0e:	4b4d      	ldr	r3, [pc, #308]	; (8002f44 <_Z16DRV_FWLoad_CH101v+0x140>)
 8002e10:	60bb      	str	r3, [r7, #8]
	const uint8_t* pt_fw = &ch101_gpr_fw[0];
 8002e12:	4b4d      	ldr	r3, [pc, #308]	; (8002f48 <_Z16DRV_FWLoad_CH101v+0x144>)
 8002e14:	607b      	str	r3, [r7, #4]

	/* PROG pin assert */
	USR_GPIO_Set(gChirpDev.prog_pin, HIGH);
 8002e16:	4b4d      	ldr	r3, [pc, #308]	; (8002f4c <_Z16DRV_FWLoad_CH101v+0x148>)
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f001 f917 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>

	/* transfer ram value */
	ret = COM_WriteMemBurst(CH101_RAM_INIT_ADDRESS, pt_ram, CH101_RAM_INIT_WRITE_SIZE);
 8002e22:	220d      	movs	r2, #13
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	f640 1074 	movw	r0, #2420	; 0x974
 8002e2a:	f7ff ff6c 	bl	8002d06 <_Z17COM_WriteMemBursttPKht>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	73fb      	strb	r3, [r7, #15]

	/* transfer firmware */
	if (ret == RET_OK) {
 8002e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d108      	bne.n	8002e4c <_Z16DRV_FWLoad_CH101v+0x48>
		ret = COM_WriteMemBurst(CH101_PROG_MEM_ADDR, pt_fw, CH101_FW_SIZE);
 8002e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002e44:	f7ff ff5f 	bl	8002d06 <_Z17COM_WriteMemBursttPKht>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	73fb      	strb	r3, [r7, #15]
	}
	if (ret == RET_OK) {		
 8002e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d103      	bne.n	8002e5c <_Z16DRV_FWLoad_CH101v+0x58>
		DEBUG_PRINT_STR("FW Load: Successful\n");
 8002e54:	483e      	ldr	r0, [pc, #248]	; (8002f50 <_Z16DRV_FWLoad_CH101v+0x14c>)
 8002e56:	f007 fbf3 	bl	800a640 <puts>
 8002e5a:	e002      	b.n	8002e62 <_Z16DRV_FWLoad_CH101v+0x5e>
	} else {
		DEBUG_PRINT_STR("FW Load: Failed\n");
 8002e5c:	483d      	ldr	r0, [pc, #244]	; (8002f54 <_Z16DRV_FWLoad_CH101v+0x150>)
 8002e5e:	f007 fbef 	bl	800a640 <puts>
	}

	/* asic reset and halt */
	if (ret == RET_OK) {
 8002e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <_Z16DRV_FWLoad_CH101v+0x72>
		ret = COM_WriteRegProg(CH_PROG_REG_CPU, 0x40);	// reset asic
 8002e6a:	2140      	movs	r1, #64	; 0x40
 8002e6c:	2042      	movs	r0, #66	; 0x42
 8002e6e:	f7ff fea2 	bl	8002bb6 <_Z16COM_WriteRegProght>
 8002e72:	4603      	mov	r3, r0
 8002e74:	73fb      	strb	r3, [r7, #15]
	}
	if (ret == RET_OK) {
 8002e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d105      	bne.n	8002e8a <_Z16DRV_FWLoad_CH101v+0x86>
		ret = COM_WriteRegProg(CH_PROG_REG_CPU, 0x11);	// halt asic and disable watchdog
 8002e7e:	2111      	movs	r1, #17
 8002e80:	2042      	movs	r0, #66	; 0x42
 8002e82:	f7ff fe98 	bl	8002bb6 <_Z16COM_WriteRegProght>
 8002e86:	4603      	mov	r3, r0
 8002e88:	73fb      	strb	r3, [r7, #15]
	}

	/* transfer an I2C address to the sensor */
	if (ret == RET_OK) {
 8002e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10c      	bne.n	8002eac <_Z16DRV_FWLoad_CH101v+0xa8>
		i2c_addr_app = gChirpDev.i2c_addr;
 8002e92:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <_Z16DRV_FWLoad_CH101v+0x148>)
 8002e94:	79db      	ldrb	r3, [r3, #7]
 8002e96:	70fb      	strb	r3, [r7, #3]
		ret = COM_WriteMem(0x01C5, (uint16_t)i2c_addr_app, 1);
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f240 10c5 	movw	r0, #453	; 0x1c5
 8002ea4:	f7ff fef3 	bl	8002c8e <_Z12COM_WriteMemttt>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	73fb      	strb	r3, [r7, #15]
	}

	/* Run charge pumps */
	if (ret == RET_OK) {
 8002eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10e      	bne.n	8002ed2 <_Z16DRV_FWLoad_CH101v+0xce>
		write_val = 0x0200;
 8002eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eb8:	803b      	strh	r3, [r7, #0]
		ret  = COM_WriteMem(0x01A6, write_val, 2); // PMUT.CNTRL4 = HVVSS_FON
 8002eba:	883b      	ldrh	r3, [r7, #0]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8002ec4:	f7ff fee3 	bl	8002c8e <_Z12COM_WriteMemttt>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	73fb      	strb	r3, [r7, #15]
		USR_WaitMS(5);
 8002ecc:	2005      	movs	r0, #5
 8002ece:	f001 f90d 	bl	80040ec <_Z10USR_WaitMSt>
	}
	if (ret == RET_OK) {
 8002ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10e      	bne.n	8002ef8 <_Z16DRV_FWLoad_CH101v+0xf4>
		write_val = 0x0600;
 8002eda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ede:	803b      	strh	r3, [r7, #0]
		ret = COM_WriteMem(0x01A6, write_val, 2); // PMUT.CNTRL4 = (HVVSS_FON | HVVDD_FON)
 8002ee0:	883b      	ldrh	r3, [r7, #0]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8002eea:	f7ff fed0 	bl	8002c8e <_Z12COM_WriteMemttt>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	73fb      	strb	r3, [r7, #15]
		USR_WaitMS(5);
 8002ef2:	2005      	movs	r0, #5
 8002ef4:	f001 f8fa 	bl	80040ec <_Z10USR_WaitMSt>
	}
	if (ret == RET_OK) {
 8002ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <_Z16DRV_FWLoad_CH101v+0x112>
		write_val = 0x0000;
 8002f00:	2300      	movs	r3, #0
 8002f02:	803b      	strh	r3, [r7, #0]
		ret = COM_WriteMem(0x01A6, write_val, 2); // PMUT.CNTRL4 = 0
 8002f04:	883b      	ldrh	r3, [r7, #0]
 8002f06:	2202      	movs	r2, #2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8002f0e:	f7ff febe 	bl	8002c8e <_Z12COM_WriteMemttt>
 8002f12:	4603      	mov	r3, r0
 8002f14:	73fb      	strb	r3, [r7, #15]
	}

	/* asic run */
	if (ret == RET_OK) {
 8002f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <_Z16DRV_FWLoad_CH101v+0x126>
		ret = COM_WriteRegProg(CH_PROG_REG_CPU, 2); // Exit programming mode and run the chip
 8002f1e:	2102      	movs	r1, #2
 8002f20:	2042      	movs	r0, #66	; 0x42
 8002f22:	f7ff fe48 	bl	8002bb6 <_Z16COM_WriteRegProght>
 8002f26:	4603      	mov	r3, r0
 8002f28:	73fb      	strb	r3, [r7, #15]
	}

	/* PROG pin de-assert */
	USR_GPIO_Set(gChirpDev.prog_pin, LOW);
 8002f2a:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <_Z16DRV_FWLoad_CH101v+0x148>)
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f001 f88d 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>

	return ret;
 8002f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	0800cc40 	.word	0x0800cc40
 8002f48:	0800cc50 	.word	0x0800cc50
 8002f4c:	20000280 	.word	0x20000280
 8002f50:	0800cac0 	.word	0x0800cac0
 8002f54:	0800cad4 	.word	0x0800cad4

08002f58 <_Z21DRV_WaitForLock_CH101t>:
 * \brief	Wait for an individual sensor to finish start-up procedure.
 * \param	timeout_ms	timeout waiting for confirmation
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t DRV_WaitForLock_CH101(uint16_t timeout_ms)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	80fb      	strh	r3, [r7, #6]
	int8_t ret = RET_NG;
 8002f62:	23ff      	movs	r3, #255	; 0xff
 8002f64:	73fb      	strb	r3, [r7, #15]
	int8_t com;
	uint16_t count = (timeout_ms / 10u) + 1u;
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	4a1b      	ldr	r2, [pc, #108]	; (8002fd8 <_Z21DRV_WaitForLock_CH101t+0x80>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	08db      	lsrs	r3, r3, #3
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	81bb      	strh	r3, [r7, #12]
	uint16_t ready_value = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	813b      	strh	r3, [r7, #8]

	while (count > 0u) {
 8002f7a:	89bb      	ldrh	r3, [r7, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01a      	beq.n	8002fb6 <_Z21DRV_WaitForLock_CH101t+0x5e>
		USR_WaitMS(10);
 8002f80:	200a      	movs	r0, #10
 8002f82:	f001 f8b3 	bl	80040ec <_Z10USR_WaitMSt>
		count--;
 8002f86:	89bb      	ldrh	r3, [r7, #12]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	81bb      	strh	r3, [r7, #12]

		/* Check the status of the sensor */
		com = COM_ReadReg(gChirpDev.i2c_addr, CH101_COMMON_REG_READY, &ready_value, 1);
 8002f8c:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <_Z21DRV_WaitForLock_CH101t+0x84>)
 8002f8e:	79d8      	ldrb	r0, [r3, #7]
 8002f90:	f107 0208 	add.w	r2, r7, #8
 8002f94:	2301      	movs	r3, #1
 8002f96:	2114      	movs	r1, #20
 8002f98:	f7ff fef5 	bl	8002d86 <_Z11COM_ReadReghhPtt>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	72fb      	strb	r3, [r7, #11]
		if (com == RET_OK) {
 8002fa0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1e8      	bne.n	8002f7a <_Z21DRV_WaitForLock_CH101t+0x22>
			if ((ready_value & CH101_COMMON_READY_FREQ_LOCKED) != 0u) {
 8002fa8:	893b      	ldrh	r3, [r7, #8]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0e3      	beq.n	8002f7a <_Z21DRV_WaitForLock_CH101t+0x22>
				ret = RET_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
				break;
			}
		}
	}

	if (ret == RET_OK) {
 8002fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d103      	bne.n	8002fc6 <_Z21DRV_WaitForLock_CH101t+0x6e>
		DEBUG_PRINT_STR("Ready  : Successful\n");
 8002fbe:	4808      	ldr	r0, [pc, #32]	; (8002fe0 <_Z21DRV_WaitForLock_CH101t+0x88>)
 8002fc0:	f007 fb3e 	bl	800a640 <puts>
 8002fc4:	e002      	b.n	8002fcc <_Z21DRV_WaitForLock_CH101t+0x74>
	} else {
		DEBUG_PRINT_STR("Ready  : Failed\n");
 8002fc6:	4807      	ldr	r0, [pc, #28]	; (8002fe4 <_Z21DRV_WaitForLock_CH101t+0x8c>)
 8002fc8:	f007 fb3a 	bl	800a640 <puts>
	}

	return ret;
 8002fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	cccccccd 	.word	0xcccccccd
 8002fdc:	20000280 	.word	0x20000280
 8002fe0:	0800cae4 	.word	0x0800cae4
 8002fe4:	0800caf8 	.word	0x0800caf8

08002fe8 <_Z17DRV_MeasRTC_CH101v>:
 * \brief	Calibrate the sensor real-time clock against the host microcontroller clock.
 * \param	none
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t DRV_MeasRTC_CH101(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
	uint16_t calc_val;
	uint32_t count;
	uint16_t read_val;
	uint32_t num;
	uint32_t den;
	int8_t ret = RET_NG;
 8002fee:	23ff      	movs	r3, #255	; 0xff
 8002ff0:	75fb      	strb	r3, [r7, #23]

	/* Preparing the trigger pulse */
	ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH101_COMMON_REG_CAL_TRIG, 0x00, 1);
 8002ff2:	4b4a      	ldr	r3, [pc, #296]	; (800311c <_Z17DRV_MeasRTC_CH101v+0x134>)
 8002ff4:	79d8      	ldrb	r0, [r3, #7]
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2106      	movs	r1, #6
 8002ffc:	f7ff fe10 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 8003000:	4603      	mov	r3, r0
 8003002:	75fb      	strb	r3, [r7, #23]


	/* Trigger a pulse on the INT pin */
	if (ret == RET_OK) {
 8003004:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <_Z17DRV_MeasRTC_CH101v+0x30>
		DRV_GenPulseMS_CH101(RTC_CAL_PULSE_MS);
 800300c:	2064      	movs	r0, #100	; 0x64
 800300e:	f000 fa27 	bl	8003460 <_ZL20DRV_GenPulseMS_CH101t>

		/* Keep the IO low for at least 50us to allow the ASIC FW to deactivate the PT logic */
		USR_WaitMS(100);
 8003012:	2064      	movs	r0, #100	; 0x64
 8003014:	f001 f86a 	bl	80040ec <_Z10USR_WaitMSt>
	}

	/* Get calibration result */
	if (ret == RET_OK) {
 8003018:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d128      	bne.n	8003072 <_Z17DRV_MeasRTC_CH101v+0x8a>
		ret = COM_ReadReg(gChirpDev.i2c_addr, CH101_GPR_OPEN_REG_CAL_RESULT, &read_val, 2); //read rtc_cal_result
 8003020:	4b3e      	ldr	r3, [pc, #248]	; (800311c <_Z17DRV_MeasRTC_CH101v+0x134>)
 8003022:	79d8      	ldrb	r0, [r3, #7]
 8003024:	1cba      	adds	r2, r7, #2
 8003026:	2302      	movs	r3, #2
 8003028:	210a      	movs	r1, #10
 800302a:	f7ff feac 	bl	8002d86 <_Z11COM_ReadReghhPtt>
 800302e:	4603      	mov	r3, r0
 8003030:	75fb      	strb	r3, [r7, #23]

		if (ret == RET_OK) {
 8003032:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11b      	bne.n	8003072 <_Z17DRV_MeasRTC_CH101v+0x8a>
			sCalib.rtc_result = read_val;
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	4b38      	ldr	r3, [pc, #224]	; (8003120 <_Z17DRV_MeasRTC_CH101v+0x138>)
 800303e:	809a      	strh	r2, [r3, #4]

			count = ((uint32_t)read_val * 1000u) / RTC_CAL_PULSE_MS;
 8003040:	887b      	ldrh	r3, [r7, #2]
 8003042:	461a      	mov	r2, r3
 8003044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003048:	fb03 f302 	mul.w	r3, r3, r2
 800304c:	4a35      	ldr	r2, [pc, #212]	; (8003124 <_Z17DRV_MeasRTC_CH101v+0x13c>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	613b      	str	r3, [r7, #16]
			calc_val = (uint16_t)((uint32_t)CH101_GPR_OPEN_CTR * 16U * CH101_COMMON_FREQCOUNTERCYCLES / count);
 8003056:	4a34      	ldr	r2, [pc, #208]	; (8003128 <_Z17DRV_MeasRTC_CH101v+0x140>)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	81fb      	strh	r3, [r7, #14]
			ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH101_GPR_OPEN_REG_CALC, calc_val, 2);
 8003060:	4b2e      	ldr	r3, [pc, #184]	; (800311c <_Z17DRV_MeasRTC_CH101v+0x134>)
 8003062:	79d8      	ldrb	r0, [r3, #7]
 8003064:	89fa      	ldrh	r2, [r7, #14]
 8003066:	2302      	movs	r3, #2
 8003068:	2108      	movs	r1, #8
 800306a:	f7ff fdd9 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 800306e:	4603      	mov	r3, r0
 8003070:	75fb      	strb	r3, [r7, #23]

		}
	}

	/* Get frequency */
	if (ret == RET_OK) {
 8003072:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d120      	bne.n	80030bc <_Z17DRV_MeasRTC_CH101v+0xd4>
		ret = COM_ReadReg(gChirpDev.i2c_addr, CH101_COMMON_REG_TOF_SF, &read_val, 2); //read raw_freq
 800307a:	4b28      	ldr	r3, [pc, #160]	; (800311c <_Z17DRV_MeasRTC_CH101v+0x134>)
 800307c:	79d8      	ldrb	r0, [r3, #7]
 800307e:	1cba      	adds	r2, r7, #2
 8003080:	2302      	movs	r3, #2
 8003082:	2116      	movs	r1, #22
 8003084:	f7ff fe7f 	bl	8002d86 <_Z11COM_ReadReghhPtt>
 8003088:	4603      	mov	r3, r0
 800308a:	75fb      	strb	r3, [r7, #23]

		if (ret == RET_OK) {
 800308c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d113      	bne.n	80030bc <_Z17DRV_MeasRTC_CH101v+0xd4>
			num = ((((uint32_t)sCalib.rtc_result)*1000U) / (16U * CH101_COMMON_FREQCOUNTERCYCLES)) * (uint32_t)(read_val);
 8003094:	4b22      	ldr	r3, [pc, #136]	; (8003120 <_Z17DRV_MeasRTC_CH101v+0x138>)
 8003096:	889b      	ldrh	r3, [r3, #4]
 8003098:	461a      	mov	r2, r3
 800309a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309e:	fb03 f302 	mul.w	r3, r3, r2
 80030a2:	0adb      	lsrs	r3, r3, #11
 80030a4:	887a      	ldrh	r2, [r7, #2]
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	60bb      	str	r3, [r7, #8]
			den = (uint32_t)RTC_CAL_PULSE_MS;
 80030ac:	2364      	movs	r3, #100	; 0x64
 80030ae:	607b      	str	r3, [r7, #4]
			sCalib.freq = num / den;
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	4a19      	ldr	r2, [pc, #100]	; (8003120 <_Z17DRV_MeasRTC_CH101v+0x138>)
 80030ba:	6013      	str	r3, [r2, #0]
		}
	}

	/* Get scale factor */
	if (ret == RET_OK) {
 80030bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d113      	bne.n	80030ec <_Z17DRV_MeasRTC_CH101v+0x104>
		ret = COM_ReadReg(gChirpDev.i2c_addr, CH101_COMMON_REG_TOF_SF, &read_val, 2); //read scale_factor
 80030c4:	4b15      	ldr	r3, [pc, #84]	; (800311c <_Z17DRV_MeasRTC_CH101v+0x134>)
 80030c6:	79d8      	ldrb	r0, [r3, #7]
 80030c8:	1cba      	adds	r2, r7, #2
 80030ca:	2302      	movs	r3, #2
 80030cc:	2116      	movs	r1, #22
 80030ce:	f7ff fe5a 	bl	8002d86 <_Z11COM_ReadReghhPtt>
 80030d2:	4603      	mov	r3, r0
 80030d4:	75fb      	strb	r3, [r7, #23]
		if (ret == RET_OK) {
 80030d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <_Z17DRV_MeasRTC_CH101v+0xfe>
			sCalib.scale_factor = read_val;
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <_Z17DRV_MeasRTC_CH101v+0x138>)
 80030e2:	80da      	strh	r2, [r3, #6]
 80030e4:	e002      	b.n	80030ec <_Z17DRV_MeasRTC_CH101v+0x104>
		} else {
			sCalib.scale_factor = 0;
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <_Z17DRV_MeasRTC_CH101v+0x138>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	80da      	strh	r2, [r3, #6]
		}
	}


	DEBUG_PRINTF("Freq             =  %ld\n",sCalib.freq);
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <_Z17DRV_MeasRTC_CH101v+0x138>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4619      	mov	r1, r3
 80030f2:	480e      	ldr	r0, [pc, #56]	; (800312c <_Z17DRV_MeasRTC_CH101v+0x144>)
 80030f4:	f007 fa1e 	bl	800a534 <iprintf>
	DEBUG_PRINTF("RTC calib result =  %d\n",sCalib.rtc_result);
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <_Z17DRV_MeasRTC_CH101v+0x138>)
 80030fa:	889b      	ldrh	r3, [r3, #4]
 80030fc:	4619      	mov	r1, r3
 80030fe:	480c      	ldr	r0, [pc, #48]	; (8003130 <_Z17DRV_MeasRTC_CH101v+0x148>)
 8003100:	f007 fa18 	bl	800a534 <iprintf>
	DEBUG_PRINTF("Scale Factor     =  %d\n",sCalib.scale_factor);
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <_Z17DRV_MeasRTC_CH101v+0x138>)
 8003106:	88db      	ldrh	r3, [r3, #6]
 8003108:	4619      	mov	r1, r3
 800310a:	480a      	ldr	r0, [pc, #40]	; (8003134 <_Z17DRV_MeasRTC_CH101v+0x14c>)
 800310c:	f007 fa12 	bl	800a534 <iprintf>
	
	return ret;
 8003110:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20000280 	.word	0x20000280
 8003120:	20000264 	.word	0x20000264
 8003124:	51eb851f 	.word	0x51eb851f
 8003128:	159b4000 	.word	0x159b4000
 800312c:	0800cb08 	.word	0x0800cb08
 8003130:	0800cb24 	.word	0x0800cb24
 8003134:	0800cb3c 	.word	0x0800cb3c

08003138 <_Z17DRV_SetMode_CH101h>:
 * \brief	Set the mode of the sensor.
 * \param	mode	mode of the sensor
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t DRV_SetMode_CH101(uint8_t mode)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	71fb      	strb	r3, [r7, #7]
	int8_t ret = RET_NG;
 8003142:	23ff      	movs	r3, #255	; 0xff
 8003144:	73fb      	strb	r3, [r7, #15]

	switch (mode) {
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	2b20      	cmp	r3, #32
 800314a:	d043      	beq.n	80031d4 <_Z17DRV_SetMode_CH101h+0x9c>
 800314c:	2b20      	cmp	r3, #32
 800314e:	dc4b      	bgt.n	80031e8 <_Z17DRV_SetMode_CH101h+0xb0>
 8003150:	2b10      	cmp	r3, #16
 8003152:	d035      	beq.n	80031c0 <_Z17DRV_SetMode_CH101h+0x88>
 8003154:	2b10      	cmp	r3, #16
 8003156:	dc47      	bgt.n	80031e8 <_Z17DRV_SetMode_CH101h+0xb0>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <_Z17DRV_SetMode_CH101h+0x2a>
 800315c:	2b02      	cmp	r3, #2
 800315e:	d025      	beq.n	80031ac <_Z17DRV_SetMode_CH101h+0x74>
 8003160:	e042      	b.n	80031e8 <_Z17DRV_SetMode_CH101h+0xb0>
		case CH_MODE_IDLE:
			ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH101_COMMON_REG_OPMODE, CH_MODE_IDLE, 1);
 8003162:	4b26      	ldr	r3, [pc, #152]	; (80031fc <_Z17DRV_SetMode_CH101h+0xc4>)
 8003164:	79d8      	ldrb	r0, [r3, #7]
 8003166:	2301      	movs	r3, #1
 8003168:	2200      	movs	r2, #0
 800316a:	2101      	movs	r1, #1
 800316c:	f7ff fd58 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 8003170:	4603      	mov	r3, r0
 8003172:	73fb      	strb	r3, [r7, #15]

			if (ret == RET_OK) {
 8003174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d108      	bne.n	800318e <_Z17DRV_SetMode_CH101h+0x56>
				ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH101_COMMON_REG_PERIOD, 0x00, 1);
 800317c:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <_Z17DRV_SetMode_CH101h+0xc4>)
 800317e:	79d8      	ldrb	r0, [r3, #7]
 8003180:	2301      	movs	r3, #1
 8003182:	2200      	movs	r2, #0
 8003184:	2105      	movs	r1, #5
 8003186:	f7ff fd4b 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 800318a:	4603      	mov	r3, r0
 800318c:	73fb      	strb	r3, [r7, #15]

			}
			if (ret == RET_OK) {
 800318e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d12b      	bne.n	80031ee <_Z17DRV_SetMode_CH101h+0xb6>
				ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH101_COMMON_REG_TICK_INTERVAL, 2048, 2);
 8003196:	4b19      	ldr	r3, [pc, #100]	; (80031fc <_Z17DRV_SetMode_CH101h+0xc4>)
 8003198:	79d8      	ldrb	r0, [r3, #7]
 800319a:	2302      	movs	r3, #2
 800319c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031a0:	2102      	movs	r1, #2
 80031a2:	f7ff fd3d 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 80031a6:	4603      	mov	r3, r0
 80031a8:	73fb      	strb	r3, [r7, #15]

			}
			break;
 80031aa:	e020      	b.n	80031ee <_Z17DRV_SetMode_CH101h+0xb6>

		case CH_MODE_FREERUN:
			ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH101_COMMON_REG_OPMODE, CH_MODE_FREERUN, 1);
 80031ac:	4b13      	ldr	r3, [pc, #76]	; (80031fc <_Z17DRV_SetMode_CH101h+0xc4>)
 80031ae:	79d8      	ldrb	r0, [r3, #7]
 80031b0:	2301      	movs	r3, #1
 80031b2:	2202      	movs	r2, #2
 80031b4:	2101      	movs	r1, #1
 80031b6:	f7ff fd33 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 80031ba:	4603      	mov	r3, r0
 80031bc:	73fb      	strb	r3, [r7, #15]

			break;
 80031be:	e017      	b.n	80031f0 <_Z17DRV_SetMode_CH101h+0xb8>

		case CH_MODE_TRIGGERED_TX_RX:
			ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH101_COMMON_REG_OPMODE, CH_MODE_TRIGGERED_TX_RX, 1);
 80031c0:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <_Z17DRV_SetMode_CH101h+0xc4>)
 80031c2:	79d8      	ldrb	r0, [r3, #7]
 80031c4:	2301      	movs	r3, #1
 80031c6:	2210      	movs	r2, #16
 80031c8:	2101      	movs	r1, #1
 80031ca:	f7ff fd29 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 80031ce:	4603      	mov	r3, r0
 80031d0:	73fb      	strb	r3, [r7, #15]

			break;
 80031d2:	e00d      	b.n	80031f0 <_Z17DRV_SetMode_CH101h+0xb8>

		case CH_MODE_TRIGGERED_RX_ONLY:
			ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH101_COMMON_REG_OPMODE, CH_MODE_TRIGGERED_RX_ONLY, 1);
 80031d4:	4b09      	ldr	r3, [pc, #36]	; (80031fc <_Z17DRV_SetMode_CH101h+0xc4>)
 80031d6:	79d8      	ldrb	r0, [r3, #7]
 80031d8:	2301      	movs	r3, #1
 80031da:	2220      	movs	r2, #32
 80031dc:	2101      	movs	r1, #1
 80031de:	f7ff fd1f 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]

			break;
 80031e6:	e003      	b.n	80031f0 <_Z17DRV_SetMode_CH101h+0xb8>

		default:
			ret = RET_NG;
 80031e8:	23ff      	movs	r3, #255	; 0xff
 80031ea:	73fb      	strb	r3, [r7, #15]
			break;
 80031ec:	e000      	b.n	80031f0 <_Z17DRV_SetMode_CH101h+0xb8>
			break;
 80031ee:	bf00      	nop
	}

	return ret;
 80031f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000280 	.word	0x20000280

08003200 <_Z21DRV_SetMaxRange_CH101t>:
 * \brief	Set the max range of the sensor.
 * \param	range	max range of the sensor
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t DRV_SetMaxRange_CH101(uint16_t range)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	80fb      	strh	r3, [r7, #6]
	int8_t ret = RET_NG;
 800320a:	23ff      	movs	r3, #255	; 0xff
 800320c:	737b      	strb	r3, [r7, #13]
	uint16_t num_samples;

	num_samples = DRV_mmToSamples_CH101(range);
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	4618      	mov	r0, r3
 8003212:	f000 f893 	bl	800333c <_ZL21DRV_mmToSamples_CH101t>
 8003216:	4603      	mov	r3, r0
 8003218:	81fb      	strh	r3, [r7, #14]

	if (num_samples > CH101_GPR_OPEN_MAX_SAMPLES) {
 800321a:	89fb      	ldrh	r3, [r7, #14]
 800321c:	2b96      	cmp	r3, #150	; 0x96
 800321e:	d901      	bls.n	8003224 <_Z21DRV_SetMaxRange_CH101t+0x24>
		num_samples = CH101_GPR_OPEN_MAX_SAMPLES;
 8003220:	2396      	movs	r3, #150	; 0x96
 8003222:	81fb      	strh	r3, [r7, #14]
	}

	ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH101_COMMON_REG_MAX_RANGE, num_samples, 1);
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <_Z21DRV_SetMaxRange_CH101t+0x44>)
 8003226:	79d8      	ldrb	r0, [r3, #7]
 8003228:	89fa      	ldrh	r2, [r7, #14]
 800322a:	2301      	movs	r3, #1
 800322c:	2107      	movs	r1, #7
 800322e:	f7ff fcf7 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 8003232:	4603      	mov	r3, r0
 8003234:	737b      	strb	r3, [r7, #13]

	return ret;
 8003236:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000280 	.word	0x20000280

08003248 <_Z24DRV_SetStaticRange_CH101t>:
 * \brief	Set the static range of the sensor.
 * \param	samples		target sampling position
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t DRV_SetStaticRange_CH101(uint16_t samples)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	80fb      	strh	r3, [r7, #6]
	int8_t ret = RET_NG;
 8003252:	23ff      	movs	r3, #255	; 0xff
 8003254:	73fb      	strb	r3, [r7, #15]

	ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH101_COMMON_REG_STAT_RANGE, samples, 1);
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <_Z24DRV_SetStaticRange_CH101t+0x48>)
 8003258:	79d8      	ldrb	r0, [r3, #7]
 800325a:	88fa      	ldrh	r2, [r7, #6]
 800325c:	2301      	movs	r3, #1
 800325e:	2112      	movs	r1, #18
 8003260:	f7ff fcde 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 8003264:	4603      	mov	r3, r0
 8003266:	73fb      	strb	r3, [r7, #15]

	if (ret == RET_OK) {
 8003268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d108      	bne.n	8003282 <_Z24DRV_SetStaticRange_CH101t+0x3a>
		ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH101_COMMON_REG_STAT_COEFF, CH101_COMMON_STAT_COEFF_DEFAULT, 1);
 8003270:	4b07      	ldr	r3, [pc, #28]	; (8003290 <_Z24DRV_SetStaticRange_CH101t+0x48>)
 8003272:	79d8      	ldrb	r0, [r3, #7]
 8003274:	2301      	movs	r3, #1
 8003276:	2206      	movs	r2, #6
 8003278:	2113      	movs	r1, #19
 800327a:	f7ff fcd1 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 800327e:	4603      	mov	r3, r0
 8003280:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003282:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000280 	.word	0x20000280

08003294 <_Z27DRV_SetSampleInterval_CH101t>:
 * \brief	Set the measurement interval.
 * \param	interval	interval time
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t DRV_SetSampleInterval_CH101(uint16_t interval)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	80fb      	strh	r3, [r7, #6]
	int8_t ret = RET_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	75fb      	strb	r3, [r7, #23]
	uint32_t sample_interval;
	uint32_t period;
	uint32_t tick_interval;

	sample_interval = (uint32_t)sCalib.rtc_result * (uint32_t)interval / RTC_CAL_PULSE_MS;
 80032a2:	4b23      	ldr	r3, [pc, #140]	; (8003330 <_Z27DRV_SetSampleInterval_CH101t+0x9c>)
 80032a4:	889b      	ldrh	r3, [r3, #4]
 80032a6:	461a      	mov	r2, r3
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	fb03 f302 	mul.w	r3, r3, r2
 80032ae:	4a21      	ldr	r2, [pc, #132]	; (8003334 <_Z27DRV_SetSampleInterval_CH101t+0xa0>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	60bb      	str	r3, [r7, #8]
	
	if (interval != 0u) {
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <_Z27DRV_SetSampleInterval_CH101t+0x3e>
		period = (sample_interval / 2048u) + 1u;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	0adb      	lsrs	r3, r3, #11
 80032c2:	3301      	adds	r3, #1
 80032c4:	613b      	str	r3, [r7, #16]
		if (period > UINT8_MAX_VALUE) {	/* check if result fits in register */
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2bff      	cmp	r3, #255	; 0xff
 80032ca:	d904      	bls.n	80032d6 <_Z27DRV_SetSampleInterval_CH101t+0x42>
			ret = RET_NG;
 80032cc:	23ff      	movs	r3, #255	; 0xff
 80032ce:	75fb      	strb	r3, [r7, #23]
 80032d0:	e001      	b.n	80032d6 <_Z27DRV_SetSampleInterval_CH101t+0x42>
		}
	} else {
		period = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
	}

	if (ret == RET_OK) {
 80032d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d122      	bne.n	8003324 <_Z27DRV_SetSampleInterval_CH101t+0x90>
		if (period != 0u) {
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <_Z27DRV_SetSampleInterval_CH101t+0x5c>
			tick_interval = sample_interval / period;
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	e001      	b.n	80032f4 <_Z27DRV_SetSampleInterval_CH101t+0x60>
		} else {
			tick_interval = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
		}


		ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH101_COMMON_REG_PERIOD, (uint16_t) period, 1);
 80032f4:	4b10      	ldr	r3, [pc, #64]	; (8003338 <_Z27DRV_SetSampleInterval_CH101t+0xa4>)
 80032f6:	79d8      	ldrb	r0, [r3, #7]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	2301      	movs	r3, #1
 80032fe:	2105      	movs	r1, #5
 8003300:	f7ff fc8e 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 8003304:	4603      	mov	r3, r0
 8003306:	75fb      	strb	r3, [r7, #23]

		if (ret == RET_OK) {
 8003308:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <_Z27DRV_SetSampleInterval_CH101t+0x90>
			ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH101_COMMON_REG_TICK_INTERVAL, (uint16_t) tick_interval, 2);
 8003310:	4b09      	ldr	r3, [pc, #36]	; (8003338 <_Z27DRV_SetSampleInterval_CH101t+0xa4>)
 8003312:	79d8      	ldrb	r0, [r3, #7]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	b29a      	uxth	r2, r3
 8003318:	2302      	movs	r3, #2
 800331a:	2102      	movs	r1, #2
 800331c:	f7ff fc80 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 8003320:	4603      	mov	r3, r0
 8003322:	75fb      	strb	r3, [r7, #23]

		}
	}
	
	return ret;
 8003324:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000264 	.word	0x20000264
 8003334:	51eb851f 	.word	0x51eb851f
 8003338:	20000280 	.word	0x20000280

0800333c <_ZL21DRV_mmToSamples_CH101t>:
 * \brief	Convert range to sampling position.
 * \param	num_mm		range
 * \return	sampling position
============================================================================================*/
static uint16_t DRV_mmToSamples_CH101(uint16_t num_mm)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	80fb      	strh	r3, [r7, #6]
//	uint8_t  ret = RET_NG;
	uint16_t scale_factor;
	uint32_t num_samples = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
	uint32_t divisor1;
	uint32_t divisor2 = (RTC_CAL_PULSE_MS * CH_SPEEDOFSOUND_MPS);
 800334a:	f248 53fc 	movw	r3, #34300	; 0x85fc
 800334e:	613b      	str	r3, [r7, #16]

	divisor1 = 0x2000;			// (4*16*128)  XXX need define(s)
 8003350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003354:	60fb      	str	r3, [r7, #12]

	scale_factor = sCalib.scale_factor;
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <_ZL21DRV_mmToSamples_CH101t+0x6c>)
 8003358:	88db      	ldrh	r3, [r3, #6]
 800335a:	817b      	strh	r3, [r7, #10]
	num_samples = (((uint32_t)sCalib.rtc_result * scale_factor) + (divisor1 - 1u)) / divisor1;
 800335c:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <_ZL21DRV_mmToSamples_CH101t+0x6c>)
 800335e:	889b      	ldrh	r3, [r3, #4]
 8003360:	461a      	mov	r2, r3
 8003362:	897b      	ldrh	r3, [r7, #10]
 8003364:	fb03 f202 	mul.w	r2, r3, r2
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	1e5a      	subs	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	617b      	str	r3, [r7, #20]
	num_samples = ((num_samples * num_mm)  + (divisor2 - 1u)) / divisor2;		// oversample is not used in this firmware
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	fb02 f203 	mul.w	r2, r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4413      	add	r3, r2
 8003382:	1e5a      	subs	r2, r3, #1
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	fbb2 f3f3 	udiv	r3, r2, r3
 800338a:	617b      	str	r3, [r7, #20]

	if (num_samples > UINT16_MAX_VALUE) {
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003392:	d301      	bcc.n	8003398 <_ZL21DRV_mmToSamples_CH101t+0x5c>
		num_samples = 0;	// return zero if error
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
	} 

	return (uint16_t)num_samples;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	b29b      	uxth	r3, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000264 	.word	0x20000264

080033ac <_Z18DRV_GetRange_CH101v>:
 * \brief	Get range
 * \param	none
 * \return	range
============================================================================================*/
uint32_t DRV_GetRange_CH101(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
	uint32_t range = CH_NO_TARGET;
 80033b2:	f04f 33ff 	mov.w	r3, #4294967295
 80033b6:	617b      	str	r3, [r7, #20]
	uint16_t scale_factor;
	uint32_t num;
	uint32_t den;
	int8_t ret;

	ret = COM_ReadReg(gChirpDev.i2c_addr, CH101_COMMON_REG_TOF, &time_of_flight, 2);
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <_Z18DRV_GetRange_CH101v+0x74>)
 80033ba:	79d8      	ldrb	r0, [r3, #7]
 80033bc:	1dba      	adds	r2, r7, #6
 80033be:	2302      	movs	r3, #2
 80033c0:	2118      	movs	r1, #24
 80033c2:	f7ff fce0 	bl	8002d86 <_Z11COM_ReadReghhPtt>
 80033c6:	4603      	mov	r3, r0
 80033c8:	74fb      	strb	r3, [r7, #19]

	if ((ret == RET_OK) && (time_of_flight != UINT16_MAX_VALUE)) { // If object detected
 80033ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d121      	bne.n	8003416 <_Z18DRV_GetRange_CH101v+0x6a>
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033d8:	4293      	cmp	r3, r2
 80033da:	d01c      	beq.n	8003416 <_Z18DRV_GetRange_CH101v+0x6a>
		scale_factor = sCalib.scale_factor;
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <_Z18DRV_GetRange_CH101v+0x78>)
 80033de:	88db      	ldrh	r3, [r3, #6]
 80033e0:	823b      	strh	r3, [r7, #16]
		if (scale_factor != 0u) {
 80033e2:	8a3b      	ldrh	r3, [r7, #16]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d016      	beq.n	8003416 <_Z18DRV_GetRange_CH101v+0x6a>
			num = (CH_SPEEDOFSOUND_MPS * RTC_CAL_PULSE_MS * (uint32_t)time_of_flight);
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f248 53fc 	movw	r3, #34300	; 0x85fc
 80033f0:	fb03 f302 	mul.w	r3, r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
			den = ((uint32_t)sCalib.rtc_result * (uint32_t)scale_factor) >> 11;
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <_Z18DRV_GetRange_CH101v+0x78>)
 80033f8:	889b      	ldrh	r3, [r3, #4]
 80033fa:	461a      	mov	r2, r3
 80033fc:	8a3b      	ldrh	r3, [r7, #16]
 80033fe:	fb03 f302 	mul.w	r3, r3, r2
 8003402:	0adb      	lsrs	r3, r3, #11
 8003404:	60bb      	str	r3, [r7, #8]
			range = num / den;
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	617b      	str	r3, [r7, #20]
			range /= 2u;		// range_type = CH_RANGE_ECHO_ONE_WAY
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	617b      	str	r3, [r7, #20]
		}
	}
	
	return range;
 8003416:	697b      	ldr	r3, [r7, #20]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000280 	.word	0x20000280
 8003424:	20000264 	.word	0x20000264

08003428 <_Z22DRV_GetAmplitude_CH101v>:
 * \brief	Get amplitude
 * \param	none
 * \return	amplitude
============================================================================================*/
uint16_t DRV_GetAmplitude_CH101(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
	uint16_t amplitude = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	80bb      	strh	r3, [r7, #4]
	int8_t ret;

	ret = COM_ReadReg(gChirpDev.i2c_addr, CH101_COMMON_REG_AMPLITUDE, &amplitude, 2);
 8003432:	4b0a      	ldr	r3, [pc, #40]	; (800345c <_Z22DRV_GetAmplitude_CH101v+0x34>)
 8003434:	79d8      	ldrb	r0, [r3, #7]
 8003436:	1d3a      	adds	r2, r7, #4
 8003438:	2302      	movs	r3, #2
 800343a:	211a      	movs	r1, #26
 800343c:	f7ff fca3 	bl	8002d86 <_Z11COM_ReadReghhPtt>
 8003440:	4603      	mov	r3, r0
 8003442:	71fb      	strb	r3, [r7, #7]

	if (ret != RET_OK) {
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <_Z22DRV_GetAmplitude_CH101v+0x28>
		amplitude = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	80bb      	strh	r3, [r7, #4]
	}

	return amplitude;
 8003450:	88bb      	ldrh	r3, [r7, #4]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000280 	.word	0x20000280

08003460 <_ZL20DRV_GenPulseMS_CH101t>:
 * \brief	Generate pulse
 * \param	pulse_width		pulse width(msec)
 * \return	none
============================================================================================*/
static void DRV_GenPulseMS_CH101(uint16_t pulse_width)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	80fb      	strh	r3, [r7, #6]
	/* INT pin is the output setting */
	USR_GPIO_Set(gChirpDev.dir_pin, DIR_HOST_TO_SENSOR);
 800346a:	4b18      	ldr	r3, [pc, #96]	; (80034cc <_ZL20DRV_GenPulseMS_CH101t+0x6c>)
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2101      	movs	r1, #1
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fded 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>
	USR_GPIO_SetDir(gChirpDev.int_pin, GPIO_OUT);
 8003476:	4b15      	ldr	r3, [pc, #84]	; (80034cc <_ZL20DRV_GenPulseMS_CH101t+0x6c>)
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	2101      	movs	r1, #1
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fe03 	bl	8004088 <_Z15USR_GPIO_SetDirP6Gpio3nh>

	/* Generate pulse */
	USR_GPIO_Set(gChirpDev.int_pin, HIGH);
 8003482:	4b12      	ldr	r3, [pc, #72]	; (80034cc <_ZL20DRV_GenPulseMS_CH101t+0x6c>)
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	2101      	movs	r1, #1
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fde1 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>
	USR_WaitMS(pulse_width);
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fe2b 	bl	80040ec <_Z10USR_WaitMSt>
	USR_GPIO_Set(gChirpDev.int_pin, LOW);
 8003496:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <_ZL20DRV_GenPulseMS_CH101t+0x6c>)
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fdd7 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>

	/* INT pin is the input setting */
	USR_GPIO_Set(gChirpDev.dir_pin, DIR_SENSOR_TO_HOST);
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <_ZL20DRV_GenPulseMS_CH101t+0x6c>)
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fdd1 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>
	USR_GPIO_SetDir(gChirpDev.int_pin, GPIO_IN);
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <_ZL20DRV_GenPulseMS_CH101t+0x6c>)
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fde7 	bl	8004088 <_Z15USR_GPIO_SetDirP6Gpio3nh>
	USR_GPIO_SetPullDown(gChirpDev.int_pin);
 80034ba:	4b04      	ldr	r3, [pc, #16]	; (80034cc <_ZL20DRV_GenPulseMS_CH101t+0x6c>)
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fe04 	bl	80040cc <_Z20USR_GPIO_SetPullDownP6Gpio3n>
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000280 	.word	0x20000280

080034d0 <_Z16DRV_FWLoad_CH201v>:
 * \brief	Load firmware
 * \param	none
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t DRV_FWLoad_CH201(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
	int8_t ret = RET_NG;
 80034d6:	23ff      	movs	r3, #255	; 0xff
 80034d8:	73fb      	strb	r3, [r7, #15]
	uint8_t i2c_addr_app;
	uint16_t write_val;

	const uint8_t* pt_ram = &ram_ch201_gprmt_init[0];
 80034da:	4b4d      	ldr	r3, [pc, #308]	; (8003610 <_Z16DRV_FWLoad_CH201v+0x140>)
 80034dc:	60bb      	str	r3, [r7, #8]
	const uint8_t* pt_fw = &ch201_gprmt_fw[0];
 80034de:	4b4d      	ldr	r3, [pc, #308]	; (8003614 <_Z16DRV_FWLoad_CH201v+0x144>)
 80034e0:	607b      	str	r3, [r7, #4]

	/* PROG pin assert */
	USR_GPIO_Set(gChirpDev.prog_pin, HIGH);
 80034e2:	4b4d      	ldr	r3, [pc, #308]	; (8003618 <_Z16DRV_FWLoad_CH201v+0x148>)
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2101      	movs	r1, #1
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fdb1 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>

	/* transfer ram value */
	ret = COM_WriteMemBurst(CH201_RAM_INIT_ADDRESS, pt_ram, CH201_RAM_INIT_WRITE_SIZE);
 80034ee:	221c      	movs	r2, #28
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	f640 1058 	movw	r0, #2392	; 0x958
 80034f6:	f7ff fc06 	bl	8002d06 <_Z17COM_WriteMemBursttPKht>
 80034fa:	4603      	mov	r3, r0
 80034fc:	73fb      	strb	r3, [r7, #15]

	/* transfer firmware */
	if (ret == RET_OK) {
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d108      	bne.n	8003518 <_Z16DRV_FWLoad_CH201v+0x48>
		ret = COM_WriteMemBurst(CH201_PROG_MEM_ADDR, pt_fw, CH201_FW_SIZE);
 8003506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003510:	f7ff fbf9 	bl	8002d06 <_Z17COM_WriteMemBursttPKht>
 8003514:	4603      	mov	r3, r0
 8003516:	73fb      	strb	r3, [r7, #15]
	}
	if (ret == RET_OK) {		
 8003518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d103      	bne.n	8003528 <_Z16DRV_FWLoad_CH201v+0x58>
		DEBUG_PRINT_STR("FW Load: Successful\n");
 8003520:	483e      	ldr	r0, [pc, #248]	; (800361c <_Z16DRV_FWLoad_CH201v+0x14c>)
 8003522:	f007 f88d 	bl	800a640 <puts>
 8003526:	e002      	b.n	800352e <_Z16DRV_FWLoad_CH201v+0x5e>
	} else {
		DEBUG_PRINT_STR("FW Load: Failed\n");
 8003528:	483d      	ldr	r0, [pc, #244]	; (8003620 <_Z16DRV_FWLoad_CH201v+0x150>)
 800352a:	f007 f889 	bl	800a640 <puts>
	}

	/* asic reset and halt */
	if (ret == RET_OK) {
 800352e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d105      	bne.n	8003542 <_Z16DRV_FWLoad_CH201v+0x72>
		ret = COM_WriteRegProg(CH_PROG_REG_CPU, 0x40);	// reset asic
 8003536:	2140      	movs	r1, #64	; 0x40
 8003538:	2042      	movs	r0, #66	; 0x42
 800353a:	f7ff fb3c 	bl	8002bb6 <_Z16COM_WriteRegProght>
 800353e:	4603      	mov	r3, r0
 8003540:	73fb      	strb	r3, [r7, #15]
	}
	if (ret == RET_OK) {
 8003542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <_Z16DRV_FWLoad_CH201v+0x86>
		ret = COM_WriteRegProg(CH_PROG_REG_CPU, 0x11);	// halt asic and disable watchdog
 800354a:	2111      	movs	r1, #17
 800354c:	2042      	movs	r0, #66	; 0x42
 800354e:	f7ff fb32 	bl	8002bb6 <_Z16COM_WriteRegProght>
 8003552:	4603      	mov	r3, r0
 8003554:	73fb      	strb	r3, [r7, #15]
	}

	/* transfer an I2C address to the sensor */
	if (ret == RET_OK) {
 8003556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <_Z16DRV_FWLoad_CH201v+0xa8>
		i2c_addr_app = gChirpDev.i2c_addr;
 800355e:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <_Z16DRV_FWLoad_CH201v+0x148>)
 8003560:	79db      	ldrb	r3, [r3, #7]
 8003562:	70fb      	strb	r3, [r7, #3]
		ret = COM_WriteMem(0x01C5, (uint16_t)i2c_addr_app, 1);
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	b29b      	uxth	r3, r3
 8003568:	2201      	movs	r2, #1
 800356a:	4619      	mov	r1, r3
 800356c:	f240 10c5 	movw	r0, #453	; 0x1c5
 8003570:	f7ff fb8d 	bl	8002c8e <_Z12COM_WriteMemttt>
 8003574:	4603      	mov	r3, r0
 8003576:	73fb      	strb	r3, [r7, #15]
	}

	/* Run charge pumps */
	if (ret == RET_OK) {
 8003578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10e      	bne.n	800359e <_Z16DRV_FWLoad_CH201v+0xce>
		write_val = 0x0200;
 8003580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003584:	803b      	strh	r3, [r7, #0]
		ret  = COM_WriteMem(0x01A6, write_val, 2); // PMUT.CNTRL4 = HVVSS_FON
 8003586:	883b      	ldrh	r3, [r7, #0]
 8003588:	2202      	movs	r2, #2
 800358a:	4619      	mov	r1, r3
 800358c:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8003590:	f7ff fb7d 	bl	8002c8e <_Z12COM_WriteMemttt>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]
		USR_WaitMS(5);
 8003598:	2005      	movs	r0, #5
 800359a:	f000 fda7 	bl	80040ec <_Z10USR_WaitMSt>
	}
	if (ret == RET_OK) {
 800359e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10e      	bne.n	80035c4 <_Z16DRV_FWLoad_CH201v+0xf4>
		write_val = 0x0600;
 80035a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80035aa:	803b      	strh	r3, [r7, #0]
		ret = COM_WriteMem(0x01A6, write_val, 2); // PMUT.CNTRL4 = (HVVSS_FON | HVVDD_FON)
 80035ac:	883b      	ldrh	r3, [r7, #0]
 80035ae:	2202      	movs	r2, #2
 80035b0:	4619      	mov	r1, r3
 80035b2:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 80035b6:	f7ff fb6a 	bl	8002c8e <_Z12COM_WriteMemttt>
 80035ba:	4603      	mov	r3, r0
 80035bc:	73fb      	strb	r3, [r7, #15]
		USR_WaitMS(5);
 80035be:	2005      	movs	r0, #5
 80035c0:	f000 fd94 	bl	80040ec <_Z10USR_WaitMSt>
	}
	if (ret == RET_OK) {
 80035c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <_Z16DRV_FWLoad_CH201v+0x112>
		write_val = 0x0000;
 80035cc:	2300      	movs	r3, #0
 80035ce:	803b      	strh	r3, [r7, #0]
		ret = COM_WriteMem(0x01A6, write_val, 2); // PMUT.CNTRL4 = 0
 80035d0:	883b      	ldrh	r3, [r7, #0]
 80035d2:	2202      	movs	r2, #2
 80035d4:	4619      	mov	r1, r3
 80035d6:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 80035da:	f7ff fb58 	bl	8002c8e <_Z12COM_WriteMemttt>
 80035de:	4603      	mov	r3, r0
 80035e0:	73fb      	strb	r3, [r7, #15]
	}

	/* asic run */
	if (ret == RET_OK) {
 80035e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <_Z16DRV_FWLoad_CH201v+0x126>
		ret = COM_WriteRegProg(CH_PROG_REG_CPU, 2); // Exit programming mode and run the chip
 80035ea:	2102      	movs	r1, #2
 80035ec:	2042      	movs	r0, #66	; 0x42
 80035ee:	f7ff fae2 	bl	8002bb6 <_Z16COM_WriteRegProght>
 80035f2:	4603      	mov	r3, r0
 80035f4:	73fb      	strb	r3, [r7, #15]
	}

	/* PROG pin de-assert */
	USR_GPIO_Set(gChirpDev.prog_pin, LOW);
 80035f6:	4b08      	ldr	r3, [pc, #32]	; (8003618 <_Z16DRV_FWLoad_CH201v+0x148>)
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fd27 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>

	return ret;
 8003602:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	0800d450 	.word	0x0800d450
 8003614:	0800d46c 	.word	0x0800d46c
 8003618:	20000280 	.word	0x20000280
 800361c:	0800cb54 	.word	0x0800cb54
 8003620:	0800cb68 	.word	0x0800cb68

08003624 <_Z21DRV_WaitForLock_CH201t>:
 * \brief	Wait for an individual sensor to finish start-up procedure.
 * \param	timeout_ms	timeout waiting for confirmation
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t DRV_WaitForLock_CH201(uint16_t timeout_ms)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	80fb      	strh	r3, [r7, #6]
	int8_t ret = RET_NG;
 800362e:	23ff      	movs	r3, #255	; 0xff
 8003630:	73fb      	strb	r3, [r7, #15]
	int8_t com;
	uint16_t count = (timeout_ms / 10u) + 1u;
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	4a1b      	ldr	r2, [pc, #108]	; (80036a4 <_Z21DRV_WaitForLock_CH201t+0x80>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	08db      	lsrs	r3, r3, #3
 800363c:	b29b      	uxth	r3, r3
 800363e:	3301      	adds	r3, #1
 8003640:	81bb      	strh	r3, [r7, #12]
	uint16_t ready_value = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	813b      	strh	r3, [r7, #8]

	while (count > 0u) {
 8003646:	89bb      	ldrh	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01a      	beq.n	8003682 <_Z21DRV_WaitForLock_CH201t+0x5e>
		USR_WaitMS(10);
 800364c:	200a      	movs	r0, #10
 800364e:	f000 fd4d 	bl	80040ec <_Z10USR_WaitMSt>
		count--;
 8003652:	89bb      	ldrh	r3, [r7, #12]
 8003654:	3b01      	subs	r3, #1
 8003656:	81bb      	strh	r3, [r7, #12]

		/* Check the status of the sensor */
		com = COM_ReadReg(gChirpDev.i2c_addr, CH201_COMMON_REG_READY, &ready_value, 1);
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <_Z21DRV_WaitForLock_CH201t+0x84>)
 800365a:	79d8      	ldrb	r0, [r3, #7]
 800365c:	f107 0208 	add.w	r2, r7, #8
 8003660:	2301      	movs	r3, #1
 8003662:	2114      	movs	r1, #20
 8003664:	f7ff fb8f 	bl	8002d86 <_Z11COM_ReadReghhPtt>
 8003668:	4603      	mov	r3, r0
 800366a:	72fb      	strb	r3, [r7, #11]
		if (com == RET_OK) {
 800366c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e8      	bne.n	8003646 <_Z21DRV_WaitForLock_CH201t+0x22>
			if ((ready_value & CH201_COMMON_READY_FREQ_LOCKED) != 0u) {
 8003674:	893b      	ldrh	r3, [r7, #8]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0e3      	beq.n	8003646 <_Z21DRV_WaitForLock_CH201t+0x22>
				ret = RET_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
				break;
			}
		}
	}

	if (ret == RET_OK) {
 8003682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <_Z21DRV_WaitForLock_CH201t+0x6e>
		DEBUG_PRINT_STR("Ready  : Successful\n");
 800368a:	4808      	ldr	r0, [pc, #32]	; (80036ac <_Z21DRV_WaitForLock_CH201t+0x88>)
 800368c:	f006 ffd8 	bl	800a640 <puts>
 8003690:	e002      	b.n	8003698 <_Z21DRV_WaitForLock_CH201t+0x74>
	} else {
		DEBUG_PRINT_STR("Ready  : Failed\n");
 8003692:	4807      	ldr	r0, [pc, #28]	; (80036b0 <_Z21DRV_WaitForLock_CH201t+0x8c>)
 8003694:	f006 ffd4 	bl	800a640 <puts>
	}

	return ret;
 8003698:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	cccccccd 	.word	0xcccccccd
 80036a8:	20000280 	.word	0x20000280
 80036ac:	0800cb78 	.word	0x0800cb78
 80036b0:	0800cb8c 	.word	0x0800cb8c

080036b4 <_Z17DRV_MeasRTC_CH201v>:
 * \brief	Calibrate the sensor real-time clock against the host microcontroller clock.
 * \param	none
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t DRV_MeasRTC_CH201(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
	uint16_t read_val;
	uint32_t num;
	uint32_t den;
	int8_t ret = RET_NG;
 80036ba:	23ff      	movs	r3, #255	; 0xff
 80036bc:	73fb      	strb	r3, [r7, #15]

	/* Preparing the trigger pulse */
	ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH201_COMMON_REG_CAL_TRIG, 0x00, 1);
 80036be:	4b3e      	ldr	r3, [pc, #248]	; (80037b8 <_Z17DRV_MeasRTC_CH201v+0x104>)
 80036c0:	79d8      	ldrb	r0, [r3, #7]
 80036c2:	2301      	movs	r3, #1
 80036c4:	2200      	movs	r2, #0
 80036c6:	2106      	movs	r1, #6
 80036c8:	f7ff faaa 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 80036cc:	4603      	mov	r3, r0
 80036ce:	73fb      	strb	r3, [r7, #15]

	/* Trigger a pulse on the INT pin */
	if (ret == RET_OK) {
 80036d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <_Z17DRV_MeasRTC_CH201v+0x30>
		DRV_GenPulseMS_CH201(RTC_CAL_PULSE_MS);
 80036d8:	2064      	movs	r0, #100	; 0x64
 80036da:	f000 fa4d 	bl	8003b78 <_ZL20DRV_GenPulseMS_CH201t>

		/* Keep the IO low for at least 50us to allow the ASIC FW to deactivate the PT logic */
		USR_WaitMS(100);
 80036de:	2064      	movs	r0, #100	; 0x64
 80036e0:	f000 fd04 	bl	80040ec <_Z10USR_WaitMSt>
	}

	/* Get calibration result */
	if (ret == RET_OK) {
 80036e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10f      	bne.n	800370c <_Z17DRV_MeasRTC_CH201v+0x58>
		ret = COM_ReadReg(gChirpDev.i2c_addr, CH201_COMMON_REG_CAL_RESULT, &read_val, 2); //read rtc_cal_result
 80036ec:	4b32      	ldr	r3, [pc, #200]	; (80037b8 <_Z17DRV_MeasRTC_CH201v+0x104>)
 80036ee:	79d8      	ldrb	r0, [r3, #7]
 80036f0:	1cba      	adds	r2, r7, #2
 80036f2:	2302      	movs	r3, #2
 80036f4:	210a      	movs	r1, #10
 80036f6:	f7ff fb46 	bl	8002d86 <_Z11COM_ReadReghhPtt>
 80036fa:	4603      	mov	r3, r0
 80036fc:	73fb      	strb	r3, [r7, #15]
		if (ret == RET_OK) {
 80036fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d102      	bne.n	800370c <_Z17DRV_MeasRTC_CH201v+0x58>
			sCalib.rtc_result = read_val;
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <_Z17DRV_MeasRTC_CH201v+0x108>)
 800370a:	809a      	strh	r2, [r3, #4]
		}
	}

	/* Get frequency */
	if (ret == RET_OK) {
 800370c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d120      	bne.n	8003756 <_Z17DRV_MeasRTC_CH201v+0xa2>
		ret = COM_ReadReg(gChirpDev.i2c_addr, CH201_COMMON_REG_TOF_SF, &read_val, 2); //read raw_freq
 8003714:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <_Z17DRV_MeasRTC_CH201v+0x104>)
 8003716:	79d8      	ldrb	r0, [r3, #7]
 8003718:	1cba      	adds	r2, r7, #2
 800371a:	2302      	movs	r3, #2
 800371c:	2122      	movs	r1, #34	; 0x22
 800371e:	f7ff fb32 	bl	8002d86 <_Z11COM_ReadReghhPtt>
 8003722:	4603      	mov	r3, r0
 8003724:	73fb      	strb	r3, [r7, #15]

		if (ret == RET_OK) {
 8003726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d113      	bne.n	8003756 <_Z17DRV_MeasRTC_CH201v+0xa2>

			num = ((((uint32_t)sCalib.rtc_result)*1000U) / (16U * CH201_COMMON_FREQCOUNTERCYCLES)) * (uint32_t)(read_val);
 800372e:	4b23      	ldr	r3, [pc, #140]	; (80037bc <_Z17DRV_MeasRTC_CH201v+0x108>)
 8003730:	889b      	ldrh	r3, [r3, #4]
 8003732:	461a      	mov	r2, r3
 8003734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003738:	fb03 f302 	mul.w	r3, r3, r2
 800373c:	0adb      	lsrs	r3, r3, #11
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	fb02 f303 	mul.w	r3, r2, r3
 8003744:	60bb      	str	r3, [r7, #8]

			den = (uint32_t)RTC_CAL_PULSE_MS;
 8003746:	2364      	movs	r3, #100	; 0x64
 8003748:	607b      	str	r3, [r7, #4]
			sCalib.freq = num / den;
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	4a1a      	ldr	r2, [pc, #104]	; (80037bc <_Z17DRV_MeasRTC_CH201v+0x108>)
 8003754:	6013      	str	r3, [r2, #0]
		}
	}

	/* Get scale factor */
	if (ret == RET_OK) {
 8003756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d113      	bne.n	8003786 <_Z17DRV_MeasRTC_CH201v+0xd2>
		ret = COM_ReadReg(gChirpDev.i2c_addr, CH201_COMMON_REG_TOF_SF, &read_val, 2); //read scale_factor
 800375e:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <_Z17DRV_MeasRTC_CH201v+0x104>)
 8003760:	79d8      	ldrb	r0, [r3, #7]
 8003762:	1cba      	adds	r2, r7, #2
 8003764:	2302      	movs	r3, #2
 8003766:	2122      	movs	r1, #34	; 0x22
 8003768:	f7ff fb0d 	bl	8002d86 <_Z11COM_ReadReghhPtt>
 800376c:	4603      	mov	r3, r0
 800376e:	73fb      	strb	r3, [r7, #15]

		if (ret == RET_OK) {
 8003770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d103      	bne.n	8003780 <_Z17DRV_MeasRTC_CH201v+0xcc>
			sCalib.scale_factor = read_val;
 8003778:	887a      	ldrh	r2, [r7, #2]
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <_Z17DRV_MeasRTC_CH201v+0x108>)
 800377c:	80da      	strh	r2, [r3, #6]
 800377e:	e002      	b.n	8003786 <_Z17DRV_MeasRTC_CH201v+0xd2>
		} else {
			sCalib.scale_factor = 0;
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <_Z17DRV_MeasRTC_CH201v+0x108>)
 8003782:	2200      	movs	r2, #0
 8003784:	80da      	strh	r2, [r3, #6]
		}
	}


	DEBUG_PRINTF("Freq             =  %ld\n",sCalib.freq);
 8003786:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <_Z17DRV_MeasRTC_CH201v+0x108>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4619      	mov	r1, r3
 800378c:	480c      	ldr	r0, [pc, #48]	; (80037c0 <_Z17DRV_MeasRTC_CH201v+0x10c>)
 800378e:	f006 fed1 	bl	800a534 <iprintf>
	DEBUG_PRINTF("RTC calib result =  %d\n",sCalib.rtc_result);
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <_Z17DRV_MeasRTC_CH201v+0x108>)
 8003794:	889b      	ldrh	r3, [r3, #4]
 8003796:	4619      	mov	r1, r3
 8003798:	480a      	ldr	r0, [pc, #40]	; (80037c4 <_Z17DRV_MeasRTC_CH201v+0x110>)
 800379a:	f006 fecb 	bl	800a534 <iprintf>
	DEBUG_PRINTF("Scale Factor     =  %d\n",sCalib.scale_factor);
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <_Z17DRV_MeasRTC_CH201v+0x108>)
 80037a0:	88db      	ldrh	r3, [r3, #6]
 80037a2:	4619      	mov	r1, r3
 80037a4:	4808      	ldr	r0, [pc, #32]	; (80037c8 <_Z17DRV_MeasRTC_CH201v+0x114>)
 80037a6:	f006 fec5 	bl	800a534 <iprintf>
	
	return ret;
 80037aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000280 	.word	0x20000280
 80037bc:	2000026c 	.word	0x2000026c
 80037c0:	0800cb9c 	.word	0x0800cb9c
 80037c4:	0800cbb8 	.word	0x0800cbb8
 80037c8:	0800cbd0 	.word	0x0800cbd0

080037cc <_Z17DRV_SetMode_CH201h>:
 * \brief	Set the mode of the sensor.
 * \param	mode	mode of the sensor
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t DRV_SetMode_CH201(uint8_t mode)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	71fb      	strb	r3, [r7, #7]
	int8_t ret = RET_NG;
 80037d6:	23ff      	movs	r3, #255	; 0xff
 80037d8:	73fb      	strb	r3, [r7, #15]

	switch (mode) {
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d043      	beq.n	8003868 <_Z17DRV_SetMode_CH201h+0x9c>
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	dc4b      	bgt.n	800387c <_Z17DRV_SetMode_CH201h+0xb0>
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	d035      	beq.n	8003854 <_Z17DRV_SetMode_CH201h+0x88>
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	dc47      	bgt.n	800387c <_Z17DRV_SetMode_CH201h+0xb0>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <_Z17DRV_SetMode_CH201h+0x2a>
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d025      	beq.n	8003840 <_Z17DRV_SetMode_CH201h+0x74>
 80037f4:	e042      	b.n	800387c <_Z17DRV_SetMode_CH201h+0xb0>
		case CH_MODE_IDLE:
			ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH201_COMMON_REG_OPMODE, CH_MODE_IDLE, 1);
 80037f6:	4b26      	ldr	r3, [pc, #152]	; (8003890 <_Z17DRV_SetMode_CH201h+0xc4>)
 80037f8:	79d8      	ldrb	r0, [r3, #7]
 80037fa:	2301      	movs	r3, #1
 80037fc:	2200      	movs	r2, #0
 80037fe:	2101      	movs	r1, #1
 8003800:	f7ff fa0e 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 8003804:	4603      	mov	r3, r0
 8003806:	73fb      	strb	r3, [r7, #15]

			if (ret == RET_OK) {
 8003808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d108      	bne.n	8003822 <_Z17DRV_SetMode_CH201h+0x56>
				ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH201_COMMON_REG_PERIOD, 0x00, 1);
 8003810:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <_Z17DRV_SetMode_CH201h+0xc4>)
 8003812:	79d8      	ldrb	r0, [r3, #7]
 8003814:	2301      	movs	r3, #1
 8003816:	2200      	movs	r2, #0
 8003818:	2105      	movs	r1, #5
 800381a:	f7ff fa01 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 800381e:	4603      	mov	r3, r0
 8003820:	73fb      	strb	r3, [r7, #15]

			}
			if (ret == RET_OK) {
 8003822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d12b      	bne.n	8003882 <_Z17DRV_SetMode_CH201h+0xb6>
				ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH201_COMMON_REG_TICK_INTERVAL, 2048, 2);
 800382a:	4b19      	ldr	r3, [pc, #100]	; (8003890 <_Z17DRV_SetMode_CH201h+0xc4>)
 800382c:	79d8      	ldrb	r0, [r3, #7]
 800382e:	2302      	movs	r3, #2
 8003830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003834:	2102      	movs	r1, #2
 8003836:	f7ff f9f3 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 800383a:	4603      	mov	r3, r0
 800383c:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800383e:	e020      	b.n	8003882 <_Z17DRV_SetMode_CH201h+0xb6>

		case CH_MODE_FREERUN:
			ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH201_COMMON_REG_OPMODE, CH_MODE_FREERUN, 1);
 8003840:	4b13      	ldr	r3, [pc, #76]	; (8003890 <_Z17DRV_SetMode_CH201h+0xc4>)
 8003842:	79d8      	ldrb	r0, [r3, #7]
 8003844:	2301      	movs	r3, #1
 8003846:	2202      	movs	r2, #2
 8003848:	2101      	movs	r1, #1
 800384a:	f7ff f9e9 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 800384e:	4603      	mov	r3, r0
 8003850:	73fb      	strb	r3, [r7, #15]

			break;
 8003852:	e017      	b.n	8003884 <_Z17DRV_SetMode_CH201h+0xb8>

		case CH_MODE_TRIGGERED_TX_RX:
			ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH201_COMMON_REG_OPMODE, CH_MODE_TRIGGERED_TX_RX, 1);
 8003854:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <_Z17DRV_SetMode_CH201h+0xc4>)
 8003856:	79d8      	ldrb	r0, [r3, #7]
 8003858:	2301      	movs	r3, #1
 800385a:	2210      	movs	r2, #16
 800385c:	2101      	movs	r1, #1
 800385e:	f7ff f9df 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 8003862:	4603      	mov	r3, r0
 8003864:	73fb      	strb	r3, [r7, #15]
			break;
 8003866:	e00d      	b.n	8003884 <_Z17DRV_SetMode_CH201h+0xb8>

		case CH_MODE_TRIGGERED_RX_ONLY:
			ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH201_COMMON_REG_OPMODE, CH_MODE_TRIGGERED_RX_ONLY, 1);
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <_Z17DRV_SetMode_CH201h+0xc4>)
 800386a:	79d8      	ldrb	r0, [r3, #7]
 800386c:	2301      	movs	r3, #1
 800386e:	2220      	movs	r2, #32
 8003870:	2101      	movs	r1, #1
 8003872:	f7ff f9d5 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 8003876:	4603      	mov	r3, r0
 8003878:	73fb      	strb	r3, [r7, #15]
			break;
 800387a:	e003      	b.n	8003884 <_Z17DRV_SetMode_CH201h+0xb8>

		default:
			ret = RET_NG;
 800387c:	23ff      	movs	r3, #255	; 0xff
 800387e:	73fb      	strb	r3, [r7, #15]
			break;
 8003880:	e000      	b.n	8003884 <_Z17DRV_SetMode_CH201h+0xb8>
			break;
 8003882:	bf00      	nop
	}

	return ret;
 8003884:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20000280 	.word	0x20000280

08003894 <_Z21DRV_SetMaxRange_CH201t>:
 * \brief	Set the max range of the sensor.
 * \param	range	max range of the sensor
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t DRV_SetMaxRange_CH201(uint16_t range)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	80fb      	strh	r3, [r7, #6]
	int8_t ret = RET_NG;
 800389e:	23ff      	movs	r3, #255	; 0xff
 80038a0:	737b      	strb	r3, [r7, #13]
	uint16_t num_samples;

	num_samples = DRV_mmToSamples_CH201(range);
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 f8d3 	bl	8003a50 <_ZL21DRV_mmToSamples_CH201t>
 80038aa:	4603      	mov	r3, r0
 80038ac:	81fb      	strh	r3, [r7, #14]

	if (num_samples > CH201_GPRMT_MAX_SAMPLES) {
 80038ae:	89fb      	ldrh	r3, [r7, #14]
 80038b0:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80038b4:	d902      	bls.n	80038bc <_Z21DRV_SetMaxRange_CH201t+0x28>
		num_samples = CH201_GPRMT_MAX_SAMPLES;
 80038b6:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80038ba:	81fb      	strh	r3, [r7, #14]
	}

	num_samples /= 2u;					// each internal count for CH201 represents 2 physical samples
 80038bc:	89fb      	ldrh	r3, [r7, #14]
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	81fb      	strh	r3, [r7, #14]
	ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH201_COMMON_REG_MAX_RANGE, num_samples, 1);
 80038c2:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <_Z21DRV_SetMaxRange_CH201t+0x4c>)
 80038c4:	79d8      	ldrb	r0, [r3, #7]
 80038c6:	89fa      	ldrh	r2, [r7, #14]
 80038c8:	2301      	movs	r3, #1
 80038ca:	2107      	movs	r1, #7
 80038cc:	f7ff f9a8 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 80038d0:	4603      	mov	r3, r0
 80038d2:	737b      	strb	r3, [r7, #13]

	return ret;
 80038d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20000280 	.word	0x20000280

080038e4 <_Z27DRV_SetSampleInterval_CH201t>:
 * \brief	Set the measurement interval.
 * \param	interval	interval time
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t DRV_SetSampleInterval_CH201(uint16_t interval)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	80fb      	strh	r3, [r7, #6]
	int8_t ret = RET_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75fb      	strb	r3, [r7, #23]
	uint32_t sample_interval;
	uint32_t period;
	uint32_t tick_interval;

	sample_interval = (uint32_t)sCalib.rtc_result * (uint32_t)interval / RTC_CAL_PULSE_MS;
 80038f2:	4b23      	ldr	r3, [pc, #140]	; (8003980 <_Z27DRV_SetSampleInterval_CH201t+0x9c>)
 80038f4:	889b      	ldrh	r3, [r3, #4]
 80038f6:	461a      	mov	r2, r3
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	fb03 f302 	mul.w	r3, r3, r2
 80038fe:	4a21      	ldr	r2, [pc, #132]	; (8003984 <_Z27DRV_SetSampleInterval_CH201t+0xa0>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	60bb      	str	r3, [r7, #8]
	
	if (interval != 0u) {
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <_Z27DRV_SetSampleInterval_CH201t+0x3e>
		period = (sample_interval / 2048u) + 1u;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	0adb      	lsrs	r3, r3, #11
 8003912:	3301      	adds	r3, #1
 8003914:	613b      	str	r3, [r7, #16]
		if (period > UINT8_MAX_VALUE) {	/* check if result fits in register */
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2bff      	cmp	r3, #255	; 0xff
 800391a:	d904      	bls.n	8003926 <_Z27DRV_SetSampleInterval_CH201t+0x42>
			ret = RET_NG;
 800391c:	23ff      	movs	r3, #255	; 0xff
 800391e:	75fb      	strb	r3, [r7, #23]
 8003920:	e001      	b.n	8003926 <_Z27DRV_SetSampleInterval_CH201t+0x42>
		}
	} else {
		period = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
	}

	if (ret == RET_OK) {
 8003926:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d122      	bne.n	8003974 <_Z27DRV_SetSampleInterval_CH201t+0x90>
		if (period != 0u) {
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <_Z27DRV_SetSampleInterval_CH201t+0x5c>
			tick_interval = sample_interval / period;
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	e001      	b.n	8003944 <_Z27DRV_SetSampleInterval_CH201t+0x60>
		} else {
			tick_interval = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
		}

		ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH201_COMMON_REG_PERIOD, (uint16_t) period, 1);
 8003944:	4b10      	ldr	r3, [pc, #64]	; (8003988 <_Z27DRV_SetSampleInterval_CH201t+0xa4>)
 8003946:	79d8      	ldrb	r0, [r3, #7]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	b29a      	uxth	r2, r3
 800394c:	2301      	movs	r3, #1
 800394e:	2105      	movs	r1, #5
 8003950:	f7ff f966 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 8003954:	4603      	mov	r3, r0
 8003956:	75fb      	strb	r3, [r7, #23]

		if (ret == RET_OK) {
 8003958:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d109      	bne.n	8003974 <_Z27DRV_SetSampleInterval_CH201t+0x90>

			ret = COM_WriteRegApp(gChirpDev.i2c_addr, CH201_COMMON_REG_TICK_INTERVAL, (uint16_t) tick_interval, 2);
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <_Z27DRV_SetSampleInterval_CH201t+0xa4>)
 8003962:	79d8      	ldrb	r0, [r3, #7]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	b29a      	uxth	r2, r3
 8003968:	2302      	movs	r3, #2
 800396a:	2102      	movs	r1, #2
 800396c:	f7ff f958 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 8003970:	4603      	mov	r3, r0
 8003972:	75fb      	strb	r3, [r7, #23]
		}
	}
	
	return ret;
 8003974:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	2000026c 	.word	0x2000026c
 8003984:	51eb851f 	.word	0x51eb851f
 8003988:	20000280 	.word	0x20000280

0800398c <_Z23DRV_SetThresholds_CH201P15ch_thresholds_t>:
 * \brief	Set the multiple thresholds.
 * \param	thresholds	multiple threshold data
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t DRV_SetThresholds_CH201(ch_thresholds_t *thresholds)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]

uint8_t sReg_Threshold[6] = {
 8003994:	4a2c      	ldr	r2, [pc, #176]	; (8003a48 <_Z23DRV_SetThresholds_CH201P15ch_thresholds_t+0xbc>)
 8003996:	f107 030c 	add.w	r3, r7, #12
 800399a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800399e:	6018      	str	r0, [r3, #0]
 80039a0:	3304      	adds	r3, #4
 80039a2:	8019      	strh	r1, [r3, #0]
	CH201_COMMON_REG_THRESH_LEN_2,
	CH201_COMMON_REG_THRESH_LEN_3,
	CH201_COMMON_REG_THRESH_LEN_4,
	0u
};
	uint8_t	thresh_len_reg = 0;		// offset of register for this threshold's length
 80039a4:	2300      	movs	r3, #0
 80039a6:	76fb      	strb	r3, [r7, #27]
	int8_t ret = RET_NG;		// default return = error
 80039a8:	23ff      	movs	r3, #255	; 0xff
 80039aa:	77fb      	strb	r3, [r7, #31]
	uint8_t	thresh_num;
	uint16_t thresh_len;
	uint16_t thresh_level;
	uint16_t start_sample = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	83bb      	strh	r3, [r7, #28]
	uint16_t next_start_sample;

	for (thresh_num = 0; thresh_num < CH201_COMMON_NUM_THRESHOLDS; thresh_num++) {
 80039b0:	2300      	movs	r3, #0
 80039b2:	77bb      	strb	r3, [r7, #30]
 80039b4:	7fbb      	ldrb	r3, [r7, #30]
 80039b6:	2b05      	cmp	r3, #5
 80039b8:	d83f      	bhi.n	8003a3a <_Z23DRV_SetThresholds_CH201P15ch_thresholds_t+0xae>

		thresh_len_reg = sReg_Threshold[thresh_num];
 80039ba:	7fbb      	ldrb	r3, [r7, #30]
 80039bc:	f107 0220 	add.w	r2, r7, #32
 80039c0:	4413      	add	r3, r2
 80039c2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80039c6:	76fb      	strb	r3, [r7, #27]
		next_start_sample = thresholds->threshold[thresh_num + 1u].start_sample;
 80039c8:	7fbb      	ldrb	r3, [r7, #30]
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80039d2:	833b      	strh	r3, [r7, #24]
		thresh_len = (next_start_sample - start_sample);
 80039d4:	8b3a      	ldrh	r2, [r7, #24]
 80039d6:	8bbb      	ldrh	r3, [r7, #28]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	82fb      	strh	r3, [r7, #22]
		start_sample  = next_start_sample;
 80039dc:	8b3b      	ldrh	r3, [r7, #24]
 80039de:	83bb      	strh	r3, [r7, #28]
		
		if (thresh_len_reg != 0u) { // last threshold does not have length field - assumed to extend to end of data
 80039e0:	7efb      	ldrb	r3, [r7, #27]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <_Z23DRV_SetThresholds_CH201P15ch_thresholds_t+0x6c>
			ret = COM_WriteRegApp(gChirpDev.i2c_addr, thresh_len_reg, thresh_len, 1u);	// set the length field (if any) for this threshold
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <_Z23DRV_SetThresholds_CH201P15ch_thresholds_t+0xc0>)
 80039e8:	79d8      	ldrb	r0, [r3, #7]
 80039ea:	8afa      	ldrh	r2, [r7, #22]
 80039ec:	7ef9      	ldrb	r1, [r7, #27]
 80039ee:	2301      	movs	r3, #1
 80039f0:	f7ff f916 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 80039f4:	4603      	mov	r3, r0
 80039f6:	77fb      	strb	r3, [r7, #31]
		}

		if (ret == RET_OK) { // write level to this threshold's entry in register array
 80039f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d112      	bne.n	8003a26 <_Z23DRV_SetThresholds_CH201P15ch_thresholds_t+0x9a>
			thresh_level = thresholds->threshold[thresh_num].level;
 8003a00:	7fbb      	ldrb	r3, [r7, #30]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	885b      	ldrh	r3, [r3, #2]
 8003a0a:	82bb      	strh	r3, [r7, #20]
			ret = COM_WriteRegApp(gChirpDev.i2c_addr, (uint8_t)(CH201_COMMON_REG_THRESHOLDS + (thresh_num * sizeof(uint16_t))), thresh_level, 2u);
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <_Z23DRV_SetThresholds_CH201P15ch_thresholds_t+0xc0>)
 8003a0e:	79d8      	ldrb	r0, [r3, #7]
 8003a10:	7fbb      	ldrb	r3, [r7, #30]
 8003a12:	330b      	adds	r3, #11
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	b2d9      	uxtb	r1, r3
 8003a1a:	8aba      	ldrh	r2, [r7, #20]
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	f7ff f8ff 	bl	8002c20 <_Z15COM_WriteRegApphhtt>
 8003a22:	4603      	mov	r3, r0
 8003a24:	77fb      	strb	r3, [r7, #31]
		}
		if (ret == RET_NG) {
 8003a26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d003      	beq.n	8003a38 <_Z23DRV_SetThresholds_CH201P15ch_thresholds_t+0xac>
	for (thresh_num = 0; thresh_num < CH201_COMMON_NUM_THRESHOLDS; thresh_num++) {
 8003a30:	7fbb      	ldrb	r3, [r7, #30]
 8003a32:	3301      	adds	r3, #1
 8003a34:	77bb      	strb	r3, [r7, #30]
 8003a36:	e7bd      	b.n	80039b4 <_Z23DRV_SetThresholds_CH201P15ch_thresholds_t+0x28>
			break;
 8003a38:	bf00      	nop
		}
	}

	return ret;
 8003a3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3720      	adds	r7, #32
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	0800cbe8 	.word	0x0800cbe8
 8003a4c:	20000280 	.word	0x20000280

08003a50 <_ZL21DRV_mmToSamples_CH201t>:
 * \brief	Convert range to sampling position.
 * \param	num_mm		range
 * \return	sampling position
============================================================================================*/
static uint16_t DRV_mmToSamples_CH201(uint16_t num_mm)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	80fb      	strh	r3, [r7, #6]
	uint16_t scale_factor;
	uint32_t num_samples = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
	uint32_t divisor1;
	uint32_t divisor2 = (RTC_CAL_PULSE_MS * CH_SPEEDOFSOUND_MPS);
 8003a5e:	f248 53fc 	movw	r3, #34300	; 0x85fc
 8003a62:	613b      	str	r3, [r7, #16]

	divisor1 = 0x4000;			// (4*16*128*2)  XXX need define(s)
 8003a64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a68:	60fb      	str	r3, [r7, #12]

	scale_factor = sCalib.scale_factor;
 8003a6a:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <_ZL21DRV_mmToSamples_CH201t+0x74>)
 8003a6c:	88db      	ldrh	r3, [r3, #6]
 8003a6e:	817b      	strh	r3, [r7, #10]
	num_samples = (((uint32_t)sCalib.rtc_result * scale_factor) + (divisor1 - 1u)) / divisor1;
 8003a70:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <_ZL21DRV_mmToSamples_CH201t+0x74>)
 8003a72:	889b      	ldrh	r3, [r3, #4]
 8003a74:	461a      	mov	r2, r3
 8003a76:	897b      	ldrh	r3, [r7, #10]
 8003a78:	fb03 f202 	mul.w	r2, r3, r2
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	1e5a      	subs	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	617b      	str	r3, [r7, #20]
	num_samples = ((num_samples * num_mm)  + (divisor2 - 1u)) / divisor2;		// oversample is not used in this firmware
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	fb02 f203 	mul.w	r2, r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4413      	add	r3, r2
 8003a96:	1e5a      	subs	r2, r3, #1
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9e:	617b      	str	r3, [r7, #20]

	if (num_samples > UINT16_MAX_VALUE) {
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa6:	d302      	bcc.n	8003aae <_ZL21DRV_mmToSamples_CH201t+0x5e>
		num_samples = 0;	// return zero if error
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	e002      	b.n	8003ab4 <_ZL21DRV_mmToSamples_CH201t+0x64>
	} else {
		num_samples *= 2u;			// each internal count for CH201 represents 2 physical samples
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	617b      	str	r3, [r7, #20]

	}

	return (uint16_t)num_samples;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	b29b      	uxth	r3, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	371c      	adds	r7, #28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	2000026c 	.word	0x2000026c

08003ac8 <_Z18DRV_GetRange_CH201v>:
 * \brief	Get range
 * \param	none
 * \return	range
============================================================================================*/
uint32_t DRV_GetRange_CH201(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
	uint32_t range = CH_NO_TARGET;
 8003ace:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad2:	617b      	str	r3, [r7, #20]
	uint16_t scale_factor;
	uint32_t num;
	uint32_t den;
	int8_t ret;

	ret = COM_ReadReg(gChirpDev.i2c_addr, CH201_COMMON_REG_TOF, &time_of_flight, 2);
 8003ad4:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <_Z18DRV_GetRange_CH201v+0x70>)
 8003ad6:	79d8      	ldrb	r0, [r3, #7]
 8003ad8:	1dba      	adds	r2, r7, #6
 8003ada:	2302      	movs	r3, #2
 8003adc:	2124      	movs	r1, #36	; 0x24
 8003ade:	f7ff f952 	bl	8002d86 <_Z11COM_ReadReghhPtt>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	74fb      	strb	r3, [r7, #19]

	if ((ret == RET_OK) && (time_of_flight != UINT16_MAX_VALUE)) { // If object detected
 8003ae6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d11e      	bne.n	8003b2c <_Z18DRV_GetRange_CH201v+0x64>
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d019      	beq.n	8003b2c <_Z18DRV_GetRange_CH201v+0x64>
		scale_factor = sCalib.scale_factor;
 8003af8:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <_Z18DRV_GetRange_CH201v+0x74>)
 8003afa:	88db      	ldrh	r3, [r3, #6]
 8003afc:	823b      	strh	r3, [r7, #16]
		if (scale_factor != 0u) {
 8003afe:	8a3b      	ldrh	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d013      	beq.n	8003b2c <_Z18DRV_GetRange_CH201v+0x64>
			num = (CH_SPEEDOFSOUND_MPS * RTC_CAL_PULSE_MS * (uint32_t)time_of_flight);
 8003b04:	88fb      	ldrh	r3, [r7, #6]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f248 53fc 	movw	r3, #34300	; 0x85fc
 8003b0c:	fb03 f302 	mul.w	r3, r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
			den = ((uint32_t)sCalib.rtc_result * (uint32_t)scale_factor) >> 11;
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <_Z18DRV_GetRange_CH201v+0x74>)
 8003b14:	889b      	ldrh	r3, [r3, #4]
 8003b16:	461a      	mov	r2, r3
 8003b18:	8a3b      	ldrh	r3, [r7, #16]
 8003b1a:	fb03 f302 	mul.w	r3, r3, r2
 8003b1e:	0adb      	lsrs	r3, r3, #11
 8003b20:	60bb      	str	r3, [r7, #8]
			range = num / den;
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	617b      	str	r3, [r7, #20]
		}
	}
	
	return range;
 8003b2c:	697b      	ldr	r3, [r7, #20]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000280 	.word	0x20000280
 8003b3c:	2000026c 	.word	0x2000026c

08003b40 <_Z22DRV_GetAmplitude_CH201v>:
 * \brief	Get amplitude
 * \param	none
 * \return	amplitude
============================================================================================*/
uint16_t DRV_GetAmplitude_CH201(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
	uint16_t amplitude = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	80bb      	strh	r3, [r7, #4]
	int8_t ret;

	ret = COM_ReadReg(gChirpDev.i2c_addr, CH201_COMMON_REG_AMPLITUDE, &amplitude, 2);
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <_Z22DRV_GetAmplitude_CH201v+0x34>)
 8003b4c:	79d8      	ldrb	r0, [r3, #7]
 8003b4e:	1d3a      	adds	r2, r7, #4
 8003b50:	2302      	movs	r3, #2
 8003b52:	2126      	movs	r1, #38	; 0x26
 8003b54:	f7ff f917 	bl	8002d86 <_Z11COM_ReadReghhPtt>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	71fb      	strb	r3, [r7, #7]

	if (ret != RET_OK) {
 8003b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <_Z22DRV_GetAmplitude_CH201v+0x28>
		amplitude = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	80bb      	strh	r3, [r7, #4]
	}

	return amplitude;
 8003b68:	88bb      	ldrh	r3, [r7, #4]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000280 	.word	0x20000280

08003b78 <_ZL20DRV_GenPulseMS_CH201t>:
 * \brief	Generate pulse
 * \param	pulse_width		pulse width(msec)
 * \return	none
============================================================================================*/
static void DRV_GenPulseMS_CH201(uint16_t pulse_width)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	80fb      	strh	r3, [r7, #6]
	/* INT pin is the output setting */
	USR_GPIO_Set(gChirpDev.dir_pin, DIR_HOST_TO_SENSOR);
 8003b82:	4b18      	ldr	r3, [pc, #96]	; (8003be4 <_ZL20DRV_GenPulseMS_CH201t+0x6c>)
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2101      	movs	r1, #1
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fa61 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>
	USR_GPIO_SetDir(gChirpDev.int_pin, GPIO_OUT);
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <_ZL20DRV_GenPulseMS_CH201t+0x6c>)
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	2101      	movs	r1, #1
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fa77 	bl	8004088 <_Z15USR_GPIO_SetDirP6Gpio3nh>

	/* Generate pulse */
	USR_GPIO_Set(gChirpDev.int_pin, HIGH);
 8003b9a:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <_ZL20DRV_GenPulseMS_CH201t+0x6c>)
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fa55 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>
	USR_WaitMS(pulse_width);
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fa9f 	bl	80040ec <_Z10USR_WaitMSt>
	USR_GPIO_Set(gChirpDev.int_pin, LOW);
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <_ZL20DRV_GenPulseMS_CH201t+0x6c>)
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fa4b 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>

	/* INT pin is the input setting */
	USR_GPIO_Set(gChirpDev.dir_pin, DIR_SENSOR_TO_HOST);
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <_ZL20DRV_GenPulseMS_CH201t+0x6c>)
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fa45 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>
	USR_GPIO_SetDir(gChirpDev.int_pin, GPIO_IN);
 8003bc6:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <_ZL20DRV_GenPulseMS_CH201t+0x6c>)
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fa5b 	bl	8004088 <_Z15USR_GPIO_SetDirP6Gpio3nh>
	USR_GPIO_SetPullDown(gChirpDev.int_pin);
 8003bd2:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <_ZL20DRV_GenPulseMS_CH201t+0x6c>)
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fa78 	bl	80040cc <_Z20USR_GPIO_SetPullDownP6Gpio3n>
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20000280 	.word	0x20000280

08003be8 <_Z11CH_API_Initt>:
 * \brief	Initialize the sensor.
 * \param	type  CHIRP_TYPE_CH101/CHIRP_TYPE_CH201
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t CH_API_Init(uint16_t type)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	80fb      	strh	r3, [r7, #6]
	static uint8_t sPassed = 0;
	uint16_t sig_word;
	int8_t ret = RET_NG;
 8003bf2:	23ff      	movs	r3, #255	; 0xff
 8003bf4:	73fb      	strb	r3, [r7, #15]

	/*Specify sensor type */
	sChirpType = type;
 8003bf6:	4a4f      	ldr	r2, [pc, #316]	; (8003d34 <_Z11CH_API_Initt+0x14c>)
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	8013      	strh	r3, [r2, #0]
	// {
	// 	//do nothing
	// }

	/* Initialize variable */
	sConfig.mode = gChirpDev.mode;
 8003bfc:	4b4e      	ldr	r3, [pc, #312]	; (8003d38 <_Z11CH_API_Initt+0x150>)
 8003bfe:	781a      	ldrb	r2, [r3, #0]
 8003c00:	4b4e      	ldr	r3, [pc, #312]	; (8003d3c <_Z11CH_API_Initt+0x154>)
 8003c02:	701a      	strb	r2, [r3, #0]
	sConfig.max_range = gChirpDev.max_range;
 8003c04:	4b4c      	ldr	r3, [pc, #304]	; (8003d38 <_Z11CH_API_Initt+0x150>)
 8003c06:	889a      	ldrh	r2, [r3, #4]
 8003c08:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <_Z11CH_API_Initt+0x154>)
 8003c0a:	805a      	strh	r2, [r3, #2]
	sConfig.sample_interval = gChirpDev.interval;
 8003c0c:	4b4a      	ldr	r3, [pc, #296]	; (8003d38 <_Z11CH_API_Initt+0x150>)
 8003c0e:	885a      	ldrh	r2, [r3, #2]
 8003c10:	4b4a      	ldr	r3, [pc, #296]	; (8003d3c <_Z11CH_API_Initt+0x154>)
 8003c12:	80da      	strh	r2, [r3, #6]
	sConfig.static_range = 0;
 8003c14:	4b49      	ldr	r3, [pc, #292]	; (8003d3c <_Z11CH_API_Initt+0x154>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	809a      	strh	r2, [r3, #4]

	/* Initialize I/O pin */
	USR_GPIO_Init();
 8003c1a:	f000 f9eb 	bl	8003ff4 <_Z13USR_GPIO_Initv>
	
	/* Reset all sensors */
	USR_GPIO_Set(gChirpDev.reset_pin, LOW);
 8003c1e:	4b46      	ldr	r3, [pc, #280]	; (8003d38 <_Z11CH_API_Initt+0x150>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2100      	movs	r1, #0
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fa13 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>
	USR_WaitMS(1);
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f000 fa5e 	bl	80040ec <_Z10USR_WaitMSt>
	USR_GPIO_Set(gChirpDev.reset_pin, HIGH);
 8003c30:	4b41      	ldr	r3, [pc, #260]	; (8003d38 <_Z11CH_API_Initt+0x150>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fa0a 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>

	/* Configure I2C */
	if (sPassed == 0u) {
 8003c3c:	4b40      	ldr	r3, [pc, #256]	; (8003d40 <_Z11CH_API_Initt+0x158>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d107      	bne.n	8003c54 <_Z11CH_API_Initt+0x6c>
		sPassed = 1;
 8003c44:	4b3e      	ldr	r3, [pc, #248]	; (8003d40 <_Z11CH_API_Initt+0x158>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	701a      	strb	r2, [r3, #0]
		(void)COM_Config(CHIRP_I2C_SPEED);
 8003c4a:	483e      	ldr	r0, [pc, #248]	; (8003d44 <_Z11CH_API_Initt+0x15c>)
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	f7fe ff9e 	bl	8002b90 <_Z10COM_Configy>
	}

	/* Assert PROG pin */
	USR_GPIO_Set(gChirpDev.prog_pin, HIGH);
 8003c54:	4b38      	ldr	r3, [pc, #224]	; (8003d38 <_Z11CH_API_Initt+0x150>)
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f9f8 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>
	
	/* Detect the sensor */
	ret = COM_ReadReg(CHIRP_I2C_ADDR_PROG, 0x00, &sig_word, 2);
 8003c60:	f107 020c 	add.w	r2, r7, #12
 8003c64:	2302      	movs	r3, #2
 8003c66:	2100      	movs	r1, #0
 8003c68:	2045      	movs	r0, #69	; 0x45
 8003c6a:	f7ff f88c 	bl	8002d86 <_Z11COM_ReadReghhPtt>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	73fb      	strb	r3, [r7, #15]
	if ((ret == RET_OK) && (sig_word == CH_SIG_WORD))
 8003c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <_Z11CH_API_Initt+0xa8>
 8003c7a:	89bb      	ldrh	r3, [r7, #12]
 8003c7c:	f240 220a 	movw	r2, #522	; 0x20a
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d105      	bne.n	8003c90 <_Z11CH_API_Initt+0xa8>
	{
		ret = RET_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]
		DEBUG_PRINT_STR("Sensor : Connected\n");
 8003c88:	482f      	ldr	r0, [pc, #188]	; (8003d48 <_Z11CH_API_Initt+0x160>)
 8003c8a:	f006 fcd9 	bl	800a640 <puts>
 8003c8e:	e004      	b.n	8003c9a <_Z11CH_API_Initt+0xb2>
	}
	else
	{
		ret = RET_NG;
 8003c90:	23ff      	movs	r3, #255	; 0xff
 8003c92:	73fb      	strb	r3, [r7, #15]
		DEBUG_PRINT_STR("Sensor : Not Connected\n");
 8003c94:	482d      	ldr	r0, [pc, #180]	; (8003d4c <_Z11CH_API_Initt+0x164>)
 8003c96:	f006 fcd3 	bl	800a640 <puts>
	}
	
	/* De-assert PROG pin */
	USR_GPIO_Set(gChirpDev.prog_pin, LOW);
 8003c9a:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <_Z11CH_API_Initt+0x150>)
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 f9d5 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>

	if(sChirpType == CHIRP_TYPE_CH201)
 8003ca6:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <_Z11CH_API_Initt+0x14c>)
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d11c      	bne.n	8003ce8 <_Z11CH_API_Initt+0x100>
	{
		/* Load firmware */
		if (ret == RET_OK) {
 8003cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d103      	bne.n	8003cbe <_Z11CH_API_Initt+0xd6>
			ret = DRV_FWLoad_CH201();
 8003cb6:	f7ff fc0b 	bl	80034d0 <_Z16DRV_FWLoad_CH201v>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	73fb      	strb	r3, [r7, #15]
		}
		/* Check the sensor ready */
		if (ret == RET_OK) {
 8003cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <_Z11CH_API_Initt+0xe8>
			ret = DRV_WaitForLock_CH201(CHDRV_FREQLOCK_TIMEOUT_MS);
 8003cc6:	2064      	movs	r0, #100	; 0x64
 8003cc8:	f7ff fcac 	bl	8003624 <_Z21DRV_WaitForLock_CH201t>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	73fb      	strb	r3, [r7, #15]
		}
		/* Calibrate the sensor RTC */
		if (ret == RET_OK) {
 8003cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d127      	bne.n	8003d28 <_Z11CH_API_Initt+0x140>
			USR_WaitMS(1);
 8003cd8:	2001      	movs	r0, #1
 8003cda:	f000 fa07 	bl	80040ec <_Z10USR_WaitMSt>
			ret = DRV_MeasRTC_CH201();
 8003cde:	f7ff fce9 	bl	80036b4 <_Z17DRV_MeasRTC_CH201v>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	73fb      	strb	r3, [r7, #15]
 8003ce6:	e01f      	b.n	8003d28 <_Z11CH_API_Initt+0x140>
		}
	}
	else if (sChirpType == CHIRP_TYPE_CH101)
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <_Z11CH_API_Initt+0x14c>)
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d11b      	bne.n	8003d28 <_Z11CH_API_Initt+0x140>
	{
		/* Load firmware */
		if (ret == RET_OK) {
 8003cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d103      	bne.n	8003d00 <_Z11CH_API_Initt+0x118>
			ret = DRV_FWLoad_CH101();
 8003cf8:	f7ff f884 	bl	8002e04 <_Z16DRV_FWLoad_CH101v>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	73fb      	strb	r3, [r7, #15]
		}
		/* Check the sensor ready */
		if (ret == RET_OK) {
 8003d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <_Z11CH_API_Initt+0x12a>
			ret = DRV_WaitForLock_CH101(CHDRV_FREQLOCK_TIMEOUT_MS);
 8003d08:	2064      	movs	r0, #100	; 0x64
 8003d0a:	f7ff f925 	bl	8002f58 <_Z21DRV_WaitForLock_CH101t>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	73fb      	strb	r3, [r7, #15]
		}
		/* Calibrate the sensor RTC */
		if (ret == RET_OK) {
 8003d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <_Z11CH_API_Initt+0x140>
			USR_WaitMS(1);
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f000 f9e6 	bl	80040ec <_Z10USR_WaitMSt>
			ret = DRV_MeasRTC_CH101();
 8003d20:	f7ff f962 	bl	8002fe8 <_Z17DRV_MeasRTC_CH101v>
 8003d24:	4603      	mov	r3, r0
 8003d26:	73fb      	strb	r3, [r7, #15]
	}
	else
	{
		//do nothing
	}
	return ret;
 8003d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	2000027c 	.word	0x2000027c
 8003d38:	20000280 	.word	0x20000280
 8003d3c:	20000274 	.word	0x20000274
 8003d40:	2000027e 	.word	0x2000027e
 8003d44:	000186a0 	.word	0x000186a0
 8003d48:	0800cbf0 	.word	0x0800cbf0
 8003d4c:	0800cc04 	.word	0x0800cc04

08003d50 <_Z13CH_API_Confightt>:
 * \param	range		measurement range
 *			interval	measurement interval
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t CH_API_Config(uint8_t mode, uint16_t range, uint16_t interval)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	71fb      	strb	r3, [r7, #7]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	80bb      	strh	r3, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	807b      	strh	r3, [r7, #2]
	uint16_t set_range;
	uint16_t set_interval;
	uint8_t  set_mode;
	int8_t   ret = RET_NG;
 8003d62:	23ff      	movs	r3, #255	; 0xff
 8003d64:	733b      	strb	r3, [r7, #12]

	if( (mode == CH_MODE_IDLE)
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <_Z13CH_API_Confightt+0x2e>
	 || (mode == CH_MODE_FREERUN)
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d005      	beq.n	8003d7e <_Z13CH_API_Confightt+0x2e>
	 || (mode == CH_MODE_TRIGGERED_TX_RX)
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d002      	beq.n	8003d7e <_Z13CH_API_Confightt+0x2e>
	 || (mode == CH_MODE_TRIGGERED_RX_ONLY) )
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d102      	bne.n	8003d84 <_Z13CH_API_Confightt+0x34>
	{
		set_mode = mode;
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	737b      	strb	r3, [r7, #13]
 8003d82:	e002      	b.n	8003d8a <_Z13CH_API_Confightt+0x3a>
	}
	else
	{
		set_mode = sConfig.mode;
 8003d84:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <_Z13CH_API_Confightt+0x13c>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	737b      	strb	r3, [r7, #13]
	}

	if ( ((sChirpType == CHIRP_TYPE_CH101) && ((range > 1200u)||(range < 40u)))
 8003d8a:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <_Z13CH_API_Confightt+0x140>)
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d106      	bne.n	8003da0 <_Z13CH_API_Confightt+0x50>
 8003d92:	88bb      	ldrh	r3, [r7, #4]
 8003d94:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003d98:	d80e      	bhi.n	8003db8 <_Z13CH_API_Confightt+0x68>
 8003d9a:	88bb      	ldrh	r3, [r7, #4]
 8003d9c:	2b27      	cmp	r3, #39	; 0x27
 8003d9e:	d90b      	bls.n	8003db8 <_Z13CH_API_Confightt+0x68>
	 ||  ((sChirpType == CHIRP_TYPE_CH201) && ((range > 5000u)||(range < 200u))) )
 8003da0:	4b3b      	ldr	r3, [pc, #236]	; (8003e90 <_Z13CH_API_Confightt+0x140>)
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d10b      	bne.n	8003dc0 <_Z13CH_API_Confightt+0x70>
 8003da8:	88bb      	ldrh	r3, [r7, #4]
 8003daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d802      	bhi.n	8003db8 <_Z13CH_API_Confightt+0x68>
 8003db2:	88bb      	ldrh	r3, [r7, #4]
 8003db4:	2bc7      	cmp	r3, #199	; 0xc7
 8003db6:	d803      	bhi.n	8003dc0 <_Z13CH_API_Confightt+0x70>
	{
		set_range = sConfig.max_range;	/* Use the last setting */
 8003db8:	4b34      	ldr	r3, [pc, #208]	; (8003e8c <_Z13CH_API_Confightt+0x13c>)
 8003dba:	885b      	ldrh	r3, [r3, #2]
 8003dbc:	81fb      	strh	r3, [r7, #14]
 8003dbe:	e001      	b.n	8003dc4 <_Z13CH_API_Confightt+0x74>
	}
	else 
	{
		set_range = range;				/* Reconfigure */
 8003dc0:	88bb      	ldrh	r3, [r7, #4]
 8003dc2:	81fb      	strh	r3, [r7, #14]
	}
	set_interval = interval;
 8003dc4:	887b      	ldrh	r3, [r7, #2]
 8003dc6:	817b      	strh	r3, [r7, #10]

	/* Stores configurations */
	sConfig.mode			= set_mode;
 8003dc8:	4a30      	ldr	r2, [pc, #192]	; (8003e8c <_Z13CH_API_Confightt+0x13c>)
 8003dca:	7b7b      	ldrb	r3, [r7, #13]
 8003dcc:	7013      	strb	r3, [r2, #0]
	sConfig.max_range		= set_range;
 8003dce:	4a2f      	ldr	r2, [pc, #188]	; (8003e8c <_Z13CH_API_Confightt+0x13c>)
 8003dd0:	89fb      	ldrh	r3, [r7, #14]
 8003dd2:	8053      	strh	r3, [r2, #2]
	sConfig.sample_interval = set_interval;
 8003dd4:	4a2d      	ldr	r2, [pc, #180]	; (8003e8c <_Z13CH_API_Confightt+0x13c>)
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	80d3      	strh	r3, [r2, #6]
	sConfig.static_range	= 0;
 8003dda:	4b2c      	ldr	r3, [pc, #176]	; (8003e8c <_Z13CH_API_Confightt+0x13c>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	809a      	strh	r2, [r3, #4]

	if (sChirpType == CHIRP_TYPE_CH201)
 8003de0:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <_Z13CH_API_Confightt+0x140>)
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d123      	bne.n	8003e30 <_Z13CH_API_Confightt+0xe0>
	{
		/* Set mode */
		ret = DRV_SetMode_CH201(set_mode);
 8003de8:	7b7b      	ldrb	r3, [r7, #13]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fcee 	bl	80037cc <_Z17DRV_SetMode_CH201h>
 8003df0:	4603      	mov	r3, r0
 8003df2:	733b      	strb	r3, [r7, #12]
		/* Set max range */
		if (ret == RET_OK) {
 8003df4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d105      	bne.n	8003e08 <_Z13CH_API_Confightt+0xb8>
			ret = DRV_SetMaxRange_CH201(set_range);
 8003dfc:	89fb      	ldrh	r3, [r7, #14]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fd48 	bl	8003894 <_Z21DRV_SetMaxRange_CH201t>
 8003e04:	4603      	mov	r3, r0
 8003e06:	733b      	strb	r3, [r7, #12]
		}
		/* Set sample interval */
		if (ret == RET_OK) {
 8003e08:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d105      	bne.n	8003e1c <_Z13CH_API_Confightt+0xcc>
			ret = DRV_SetSampleInterval_CH201(set_interval);
 8003e10:	897b      	ldrh	r3, [r7, #10]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fd66 	bl	80038e4 <_Z27DRV_SetSampleInterval_CH201t>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	733b      	strb	r3, [r7, #12]
		}
		/* Set multiple thresholds */
		if (ret == RET_OK) {
 8003e1c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d12c      	bne.n	8003e7e <_Z13CH_API_Confightt+0x12e>
			ret = DRV_SetThresholds_CH201(&sThresholds);
 8003e24:	481b      	ldr	r0, [pc, #108]	; (8003e94 <_Z13CH_API_Confightt+0x144>)
 8003e26:	f7ff fdb1 	bl	800398c <_Z23DRV_SetThresholds_CH201P15ch_thresholds_t>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	733b      	strb	r3, [r7, #12]
 8003e2e:	e026      	b.n	8003e7e <_Z13CH_API_Confightt+0x12e>
		}
	}
	else if (sChirpType == CHIRP_TYPE_CH101)
 8003e30:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <_Z13CH_API_Confightt+0x140>)
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d122      	bne.n	8003e7e <_Z13CH_API_Confightt+0x12e>
	{
		/* Set mode */
		ret = DRV_SetMode_CH101(set_mode);
 8003e38:	7b7b      	ldrb	r3, [r7, #13]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff f97c 	bl	8003138 <_Z17DRV_SetMode_CH101h>
 8003e40:	4603      	mov	r3, r0
 8003e42:	733b      	strb	r3, [r7, #12]
		/* Set max range */
		if (ret == RET_OK) {
 8003e44:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <_Z13CH_API_Confightt+0x108>
			ret = DRV_SetMaxRange_CH101(set_range);
 8003e4c:	89fb      	ldrh	r3, [r7, #14]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff f9d6 	bl	8003200 <_Z21DRV_SetMaxRange_CH101t>
 8003e54:	4603      	mov	r3, r0
 8003e56:	733b      	strb	r3, [r7, #12]
		}
		/* Set static range */
		if (ret == RET_OK) {
 8003e58:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d104      	bne.n	8003e6a <_Z13CH_API_Confightt+0x11a>
			ret = DRV_SetStaticRange_CH101(0);
 8003e60:	2000      	movs	r0, #0
 8003e62:	f7ff f9f1 	bl	8003248 <_Z24DRV_SetStaticRange_CH101t>
 8003e66:	4603      	mov	r3, r0
 8003e68:	733b      	strb	r3, [r7, #12]
		}
		/* Set sample interval */
		if (ret == RET_OK) {
 8003e6a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d105      	bne.n	8003e7e <_Z13CH_API_Confightt+0x12e>
			ret = DRV_SetSampleInterval_CH101(set_interval);
 8003e72:	897b      	ldrh	r3, [r7, #10]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fa0d 	bl	8003294 <_Z27DRV_SetSampleInterval_CH101t>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	733b      	strb	r3, [r7, #12]
	}
	else
	{
		//do nothing
	}
	return ret;
 8003e7e:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000274 	.word	0x20000274
 8003e90:	2000027c 	.word	0x2000027c
 8003e94:	20000004 	.word	0x20000004

08003e98 <_Z16CH_API_MeasStartv>:
 * \brief	Start measurement.
 * \param	none
 * \return	none
============================================================================================*/
void CH_API_MeasStart(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
	if (sConfig.mode == CH_MODE_FREERUN)
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <_Z16CH_API_MeasStartv+0x38>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d112      	bne.n	8003eca <_Z16CH_API_MeasStartv+0x32>
	{
		/* INT pin is the input setting. At the same time, the DIR pin is also controlled. */
		USR_GPIO_Set(gChirpDev.dir_pin, DIR_SENSOR_TO_HOST);
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <_Z16CH_API_MeasStartv+0x3c>)
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f8d0 	bl	8004050 <_Z12USR_GPIO_SetP6Gpio3nh>
		USR_GPIO_SetDir(gChirpDev.int_pin, GPIO_IN);
 8003eb0:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <_Z16CH_API_MeasStartv+0x3c>)
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f8e6 	bl	8004088 <_Z15USR_GPIO_SetDirP6Gpio3nh>
		USR_GPIO_SetPullDown(gChirpDev.int_pin);
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <_Z16CH_API_MeasStartv+0x3c>)
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 f903 	bl	80040cc <_Z20USR_GPIO_SetPullDownP6Gpio3n>
		/* Enable GPIO interrupt */
		USR_IntrEnable();
 8003ec6:	f000 f86d 	bl	8003fa4 <_Z14USR_IntrEnablev>
	}
	else
	{
		// do noting
	}
}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000274 	.word	0x20000274
 8003ed4:	20000280 	.word	0x20000280

08003ed8 <_Z16CH_API_GetResultP14chirp_result_t>:
 * \brief	Get measurement results.
 * \param	p_result	measurement result
 * \return	measurement finish or not
============================================================================================*/
int8_t CH_API_GetResult(chirp_result_t *p_result)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	chirp_result_t meas_data;
	int8_t ret = RET_NOT_FINISH;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	75fb      	strb	r3, [r7, #23]

	if (p_result == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <_Z16CH_API_GetResultP14chirp_result_t+0x16>
	{
		return RET_NOT_FINISH;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e044      	b.n	8003f78 <_Z16CH_API_GetResultP14chirp_result_t+0xa0>
	}
	if (sConfig.mode == CH_MODE_TRIGGERED_TX_RX)
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <_Z16CH_API_GetResultP14chirp_result_t+0xa8>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d03e      	beq.n	8003f74 <_Z16CH_API_GetResultP14chirp_result_t+0x9c>
		// 	{
		// 		//do nothing
		// 	}
		// }
	}
	else if (sConfig.mode == CH_MODE_FREERUN)
 8003ef6:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <_Z16CH_API_GetResultP14chirp_result_t+0xa8>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d13a      	bne.n	8003f74 <_Z16CH_API_GetResultP14chirp_result_t+0x9c>
	{
		/* Get measurement results */
//		if (USR_IntrCallbackOccured() != 0u)
//		{
			ret = RET_FINISH;
 8003efe:	2301      	movs	r3, #1
 8003f00:	75fb      	strb	r3, [r7, #23]
			USR_IntrCallbackRefresh();
 8003f02:	f000 f86b 	bl	8003fdc <_Z23USR_IntrCallbackRefreshv>
			if (sChirpType == CHIRP_TYPE_CH201)
 8003f06:	4b1f      	ldr	r3, [pc, #124]	; (8003f84 <_Z16CH_API_GetResultP14chirp_result_t+0xac>)
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d117      	bne.n	8003f3e <_Z16CH_API_GetResultP14chirp_result_t+0x66>
			{
				/* Get range */
				meas_data.range = DRV_GetRange_CH201();		// range_type = CH_RANGE_ECHO_ONE_WAY
 8003f0e:	f7ff fddb 	bl	8003ac8 <_Z18DRV_GetRange_CH201v>
 8003f12:	4603      	mov	r3, r0
 8003f14:	60fb      	str	r3, [r7, #12]
				/* Get amplitude */
				if (meas_data.range == CH_NO_TARGET)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d102      	bne.n	8003f24 <_Z16CH_API_GetResultP14chirp_result_t+0x4c>
				{
					meas_data.amplitude = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	823b      	strh	r3, [r7, #16]
 8003f22:	e003      	b.n	8003f2c <_Z16CH_API_GetResultP14chirp_result_t+0x54>
				}
				else
				{
					meas_data.amplitude = DRV_GetAmplitude_CH201();
 8003f24:	f7ff fe0c 	bl	8003b40 <_Z22DRV_GetAmplitude_CH201v>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	823b      	strh	r3, [r7, #16]
				}
				*p_result = meas_data;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f107 030c 	add.w	r3, r7, #12
 8003f34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003f38:	e882 0003 	stmia.w	r2, {r0, r1}
 8003f3c:	e01a      	b.n	8003f74 <_Z16CH_API_GetResultP14chirp_result_t+0x9c>
			}
			else if (sChirpType == CHIRP_TYPE_CH101)
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <_Z16CH_API_GetResultP14chirp_result_t+0xac>)
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d116      	bne.n	8003f74 <_Z16CH_API_GetResultP14chirp_result_t+0x9c>
			{
				/* Get range */
				meas_data.range = DRV_GetRange_CH101();		// range_type = CH_RANGE_ECHO_ONE_WAY
 8003f46:	f7ff fa31 	bl	80033ac <_Z18DRV_GetRange_CH101v>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	60fb      	str	r3, [r7, #12]

				/* Get amplitude */
				if (meas_data.range == CH_NO_TARGET) 
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d102      	bne.n	8003f5c <_Z16CH_API_GetResultP14chirp_result_t+0x84>
				{
					meas_data.amplitude = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	823b      	strh	r3, [r7, #16]
 8003f5a:	e003      	b.n	8003f64 <_Z16CH_API_GetResultP14chirp_result_t+0x8c>
				}
				else
				{
					meas_data.amplitude = DRV_GetAmplitude_CH101();
 8003f5c:	f7ff fa64 	bl	8003428 <_Z22DRV_GetAmplitude_CH101v>
 8003f60:	4603      	mov	r3, r0
 8003f62:	823b      	strh	r3, [r7, #16]
				}
				*p_result = meas_data;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f107 030c 	add.w	r3, r7, #12
 8003f6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003f70:	e882 0003 	stmia.w	r2, {r0, r1}
	}
	else
	{
		// do nothing
	}
	return ret;
 8003f74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000274 	.word	0x20000274
 8003f84:	2000027c 	.word	0x2000027c

08003f88 <HAL_GPIO_EXTI_Callback>:
// 		gChirpDev.IRQFlag= 1;
// 	}
// }

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	CHX01_ToF::handleCallBack(GPIO_Pin);
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fd fadf 	bl	8001558 <_ZN9CHX01_ToF14handleCallBackEt>
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <_Z14USR_IntrEnablev>:
 * \brief	Enable GPIO interrupts
 * \param	pin		GPIO pin
 * \return	none
============================================================================================*/
void USR_IntrEnable()
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0

	// } else {
	//     gpio_set_irq_enabled(pin, 0x8u, true);		/* posedge */
	// }

	HAL_NVIC_EnableIRQ(gChirpDev.int_line);	// NOTE: this enables the entire line, so other ints on this line will also be enabled
 8003fa8:	4b03      	ldr	r3, [pc, #12]	; (8003fb8 <_Z14USR_IntrEnablev+0x14>)
 8003faa:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fec5 	bl	8004d3e <HAL_NVIC_EnableIRQ>
}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20000280 	.word	0x20000280

08003fbc <_Z15USR_IntrDisablev>:
 * \brief	Disable GPIO interrupts
 * \param	pin		GPIO pin
 * \return	none
============================================================================================*/
void USR_IntrDisable()
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
    // gpio_set_irq_enabled(pin, 0x8u, false);
	gChirpDev.IRQFlag = 0;
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <_Z15USR_IntrDisablev+0x1c>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	HAL_NVIC_DisableIRQ(gChirpDev.int_line);	// NOTE: this disables the entire line, so other ints on this line will also be disabled
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <_Z15USR_IntrDisablev+0x1c>)
 8003fca:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fec3 	bl	8004d5a <HAL_NVIC_DisableIRQ>
	// __HAL_GPIO_EXTI_CLEAR_IT(INT_PIN_NUM);
}
 8003fd4:	bf00      	nop
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000280 	.word	0x20000280

08003fdc <_Z23USR_IntrCallbackRefreshv>:
 * \brief	Clear interrupt status flag
 * \param	none
 * \return	none
============================================================================================*/
void USR_IntrCallbackRefresh(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
	/* Interrupt_disable */
	// USR_IntrDisable();

	gChirpDev.IRQFlag = 0; // Flag now gets cleared in USR_IntrDisable
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <_Z23USR_IntrCallbackRefreshv+0x14>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	
	/* Interrupt_enable */
	// USR_IntrEnable();
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr
 8003ff0:	20000280 	.word	0x20000280

08003ff4 <_Z13USR_GPIO_Initv>:
 * \brief	Initialize  I/O pins
 * \param	none
 * \return	none
============================================================================================*/
void USR_GPIO_Init(void)
{
 8003ff4:	b598      	push	{r3, r4, r7, lr}
 8003ff6:	af00      	add	r7, sp, #0

	gChirpDev.reset_pin->setMode(GPIO_MODE_OUTPUT_PP_3NFW, GPIO_STATE_LOW_3NFW);
 8003ff8:	4b14      	ldr	r3, [pc, #80]	; (800404c <_Z13USR_GPIO_Initv+0x58>)
 8003ffa:	68d8      	ldr	r0, [r3, #12]
 8003ffc:	4b13      	ldr	r3, [pc, #76]	; (800404c <_Z13USR_GPIO_Initv+0x58>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681c      	ldr	r4, [r3, #0]
 8004004:	2300      	movs	r3, #0
 8004006:	2200      	movs	r2, #0
 8004008:	2100      	movs	r1, #0
 800400a:	47a0      	blx	r4
	gChirpDev.prog_pin->setMode(GPIO_MODE_OUTPUT_PP_3NFW, GPIO_STATE_LOW_3NFW);
 800400c:	4b0f      	ldr	r3, [pc, #60]	; (800404c <_Z13USR_GPIO_Initv+0x58>)
 800400e:	6918      	ldr	r0, [r3, #16]
 8004010:	4b0e      	ldr	r3, [pc, #56]	; (800404c <_Z13USR_GPIO_Initv+0x58>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681c      	ldr	r4, [r3, #0]
 8004018:	2300      	movs	r3, #0
 800401a:	2200      	movs	r2, #0
 800401c:	2100      	movs	r1, #0
 800401e:	47a0      	blx	r4
	gChirpDev.int_pin->setMode(GPIO_MODE_OUTPUT_PP_3NFW, GPIO_STATE_LOW_3NFW);
 8004020:	4b0a      	ldr	r3, [pc, #40]	; (800404c <_Z13USR_GPIO_Initv+0x58>)
 8004022:	6958      	ldr	r0, [r3, #20]
 8004024:	4b09      	ldr	r3, [pc, #36]	; (800404c <_Z13USR_GPIO_Initv+0x58>)
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681c      	ldr	r4, [r3, #0]
 800402c:	2300      	movs	r3, #0
 800402e:	2200      	movs	r2, #0
 8004030:	2100      	movs	r1, #0
 8004032:	47a0      	blx	r4
	gChirpDev.dir_pin->setMode(GPIO_MODE_OUTPUT_PP_3NFW, GPIO_STATE_HIGH_3NFW/*DIR_HOST_TO_SENSOR*/);
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <_Z13USR_GPIO_Initv+0x58>)
 8004036:	6998      	ldr	r0, [r3, #24]
 8004038:	4b04      	ldr	r3, [pc, #16]	; (800404c <_Z13USR_GPIO_Initv+0x58>)
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681c      	ldr	r4, [r3, #0]
 8004040:	2300      	movs	r3, #0
 8004042:	2201      	movs	r2, #1
 8004044:	2100      	movs	r1, #0
 8004046:	47a0      	blx	r4
//	gChirpDev.dir_pin->setMode(GPIO_MODE_OUTPUT_PP_3NFW, GPIO_STATE_LOW_3NFW/*DIR_SENSOR_TO_HOST*/);
}
 8004048:	bf00      	nop
 800404a:	bd98      	pop	{r3, r4, r7, pc}
 800404c:	20000280 	.word	0x20000280

08004050 <_Z12USR_GPIO_SetP6Gpio3nh>:
 * \param	pin		GPIO pin
 *			level	HIGH or LOW
 * \return	none
============================================================================================*/
void USR_GPIO_Set(Gpio3n* pin, uint8_t level)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	70fb      	strb	r3, [r7, #3]
	bool val=false;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]
	if (level!=0u)
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <_Z12USR_GPIO_SetP6Gpio3nh+0x1c>
	{
		val=true;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
 800406a:	e001      	b.n	8004070 <_Z12USR_GPIO_SetP6Gpio3nh+0x20>
	}
	else
	{
		val=false;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]
	}
//	gpio_put(pin, val);
	pin->setOutput((tdeGpioState)val);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3304      	adds	r3, #4
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	7bf9      	ldrb	r1, [r7, #15]
 800407a:	2200      	movs	r2, #0
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4798      	blx	r3
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <_Z15USR_GPIO_SetDirP6Gpio3nh>:
 * \param	pin		GPIO pin
 *			dir		IN or OUT
 * \return	none
============================================================================================*/
void USR_GPIO_SetDir(Gpio3n* pin, uint8_t dir)
{
 8004088:	b590      	push	{r4, r7, lr}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
//	bool val=false;
	if (dir==(uint8_t)GPIO_IN)
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <_Z15USR_GPIO_SetDirP6Gpio3nh+0x28>
	{
//		val = false;
		USR_IntrEnable();
 800409a:	f7ff ff83 	bl	8003fa4 <_Z14USR_IntrEnablev>
		pin->setMode(GPIO_MODE_IT_RISING_3NFW, GPIO_STATE_LOW_3NFW);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681c      	ldr	r4, [r3, #0]
 80040a4:	2300      	movs	r3, #0
 80040a6:	2200      	movs	r2, #0
 80040a8:	2108      	movs	r1, #8
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	47a0      	blx	r4
//		val = true;
		USR_IntrDisable();
		pin->setMode(GPIO_MODE_OUTPUT_PP_3NFW, GPIO_STATE_LOW_3NFW);
	} 
//	gpio_set_dir(pin, val);
}
 80040ae:	e009      	b.n	80040c4 <_Z15USR_GPIO_SetDirP6Gpio3nh+0x3c>
		USR_IntrDisable();
 80040b0:	f7ff ff84 	bl	8003fbc <_Z15USR_IntrDisablev>
		pin->setMode(GPIO_MODE_OUTPUT_PP_3NFW, GPIO_STATE_LOW_3NFW);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681c      	ldr	r4, [r3, #0]
 80040ba:	2300      	movs	r3, #0
 80040bc:	2200      	movs	r2, #0
 80040be:	2100      	movs	r1, #0
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	47a0      	blx	r4
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd90      	pop	{r4, r7, pc}

080040cc <_Z20USR_GPIO_SetPullDownP6Gpio3n>:
 * \brief	Set pull down of GPIO pin
 * \param	pin		GPIO pin
 * \return	none
============================================================================================*/
void USR_GPIO_SetPullDown(Gpio3n* pin)	// WARNING: sets pin to low because of how stm init works
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	pin->setMode(GPIO_MODE_INPUT_PD_3NFW, GPIO_STATE_LOW_3NFW);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681c      	ldr	r4, [r3, #0]
 80040da:	2300      	movs	r3, #0
 80040dc:	2200      	movs	r2, #0
 80040de:	2107      	movs	r1, #7
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	47a0      	blx	r4
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd90      	pop	{r4, r7, pc}

080040ec <_Z10USR_WaitMSt>:
 * \brief	Wait time
 * \param	time	wait time(msec)
 * \return	none
============================================================================================*/
void USR_WaitMS(uint16_t t_ms)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(t_ms);
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fce7 	bl	8004acc <HAL_Delay>
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <_Z14USR_I2C_Configy>:
 * \brief	Configurate I2C communication
 * \param	speed	I2C speed
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t USR_I2C_Config(uint64_t speed)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	e9c7 0100 	strd	r0, r1, [r7]
    // Make the I2C pins available to picotool
    // bi_decl(bi_2pins_with_func(PIN_SDA, PIN_SCL, GPIO_FUNC_I2C));

//    set_flag = 1;

    return RET_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <_Z13USR_I2C_WritehPKht>:
 * 			buffer		pointer to data to write
 * 			len			data length to write
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t USR_I2C_Write(uint8_t i2c_addr, const uint8_t *buffer, uint16_t len)
{
 800411c:	b590      	push	{r4, r7, lr}
 800411e:	b087      	sub	sp, #28
 8004120:	af02      	add	r7, sp, #8
 8004122:	4603      	mov	r3, r0
 8004124:	6039      	str	r1, [r7, #0]
 8004126:	71fb      	strb	r3, [r7, #7]
 8004128:	4613      	mov	r3, r2
 800412a:	80bb      	strh	r3, [r7, #4]
	// 	return RET_NG;
	// }
	
	// if(HAL_I2C_Master_Transmit(I2C_PORT, i2c_addr << 1, const_cast<uint8_t*>(buffer), len, I2C_TIME_OUT))	return RET_NG;
	
	tdeErrorCode *pErr = NULL;
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
	gChirpDev.pI2cBus->rawWrite(i2c_addr, const_cast<uint8_t*>(buffer), len, pErr);
 8004130:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <_Z13USR_I2C_WritehPKht+0x48>)
 8004132:	6898      	ldr	r0, [r3, #8]
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <_Z13USR_I2C_WritehPKht+0x48>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	681c      	ldr	r4, [r3, #0]
 800413e:	88ba      	ldrh	r2, [r7, #4]
 8004140:	79f9      	ldrb	r1, [r7, #7]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	4613      	mov	r3, r2
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	47a0      	blx	r4
	if(pErr)	return RET_NG;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <_Z13USR_I2C_WritehPKht+0x3c>
 8004152:	f04f 33ff 	mov.w	r3, #4294967295
 8004156:	e000      	b.n	800415a <_Z13USR_I2C_WritehPKht+0x3e>

	return RET_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	bd90      	pop	{r4, r7, pc}
 8004162:	bf00      	nop
 8004164:	20000280 	.word	0x20000280

08004168 <_Z12USR_I2C_ReadhPhtS_t>:
 * 			rd_buffer		pointer to data to read
 * 			rd_len			data length to read
 * \return	RET_OK succeeded, RET_NG otherwise
============================================================================================*/
int8_t USR_I2C_Read(uint8_t i2c_addr, uint8_t *wr_buffer, uint16_t wr_len, uint8_t *rd_buffer, uint16_t rd_len)
{
 8004168:	b590      	push	{r4, r7, lr}
 800416a:	b089      	sub	sp, #36	; 0x24
 800416c:	af02      	add	r7, sp, #8
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	4603      	mov	r3, r0
 8004174:	73fb      	strb	r3, [r7, #15]
 8004176:	4613      	mov	r3, r2
 8004178:	81bb      	strh	r3, [r7, #12]
	// if (num != (int16_t)rd_len){
	// 	return RET_NG;
	// }

	// if(HAL_I2C_Master_Transmit(I2C_PORT, i2c_addr << 1, wr_buffer, wr_len, 1))	return RET_NG;
	tdeErrorCode *pErr = NULL;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
	gChirpDev.pI2cBus->rawWrite(i2c_addr, wr_buffer, wr_len, pErr);
 800417e:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <_Z12USR_I2C_ReadhPhtS_t+0x70>)
 8004180:	6898      	ldr	r0, [r3, #8]
 8004182:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <_Z12USR_I2C_ReadhPhtS_t+0x70>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	330c      	adds	r3, #12
 800418a:	681c      	ldr	r4, [r3, #0]
 800418c:	89ba      	ldrh	r2, [r7, #12]
 800418e:	7bf9      	ldrb	r1, [r7, #15]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	47a0      	blx	r4
	if(pErr)	return RET_NG;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <_Z12USR_I2C_ReadhPhtS_t+0x3e>
 80041a0:	f04f 33ff 	mov.w	r3, #4294967295
 80041a4:	e014      	b.n	80041d0 <_Z12USR_I2C_ReadhPhtS_t+0x68>

	// if(HAL_I2C_Master_Receive(I2C_PORT, i2c_addr << 1, rd_buffer, rd_len, 1))	return RET_NG;
	gChirpDev.pI2cBus->rawRead(i2c_addr, rd_buffer, rd_len, pErr);
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <_Z12USR_I2C_ReadhPhtS_t+0x70>)
 80041a8:	6898      	ldr	r0, [r3, #8]
 80041aa:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <_Z12USR_I2C_ReadhPhtS_t+0x70>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3310      	adds	r3, #16
 80041b2:	681c      	ldr	r4, [r3, #0]
 80041b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80041b6:	7bf9      	ldrb	r1, [r7, #15]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	4613      	mov	r3, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	47a0      	blx	r4
	if(pErr)	return RET_NG;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <_Z12USR_I2C_ReadhPhtS_t+0x66>
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295
 80041cc:	e000      	b.n	80041d0 <_Z12USR_I2C_ReadhPhtS_t+0x68>


	return RET_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd90      	pop	{r4, r7, pc}
 80041d8:	20000280 	.word	0x20000280

080041dc <_ZN6Gpio3nC1Ev>:
/* Abstract Base Class for implementing generic GPIO functionalities
 on various embedded hardwares. Hardware specific wrapper classes can
 inherit this class and implement the pure virtual methods declared here */
/************************************************************************/

class Gpio3n {
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <_ZN6Gpio3nC1Ev+0x1c>)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	0800dcd4 	.word	0x0800dcd4

080041fc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh>:
	//Restore ignore flag before it was critical section begun
	_isIgnored = _isIgnoredOld;
}

////////////// GPIO //////////////
GpioStm32L1::GpioStm32L1(tdeGpioPortName port, uint8_t pin) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	70fb      	strb	r3, [r7, #3]
 8004208:	4613      	mov	r3, r2
 800420a:	70bb      	strb	r3, [r7, #2]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ffe4 	bl	80041dc <_ZN6Gpio3nC1Ev>
 8004214:	4a6d      	ldr	r2, [pc, #436]	; (80043cc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d0>)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	601a      	str	r2, [r3, #0]
	switch (port) {
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d85d      	bhi.n	80042dc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0xe0>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x2c>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	0800423d 	.word	0x0800423d
 800422c:	0800425d 	.word	0x0800425d
 8004230:	0800427d 	.word	0x0800427d
 8004234:	0800429d 	.word	0x0800429d
 8004238:	080042bd 	.word	0x080042bd
	case GPIO_PORT_A_3NFW:
		_port = GPIOA;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a64      	ldr	r2, [pc, #400]	; (80043d0 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d4>)
 8004240:	605a      	str	r2, [r3, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8004242:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	4a63      	ldr	r2, [pc, #396]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	61d3      	str	r3, [r2, #28]
 800424e:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	69fb      	ldr	r3, [r7, #28]
		break;
 800425a:	e040      	b.n	80042de <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0xe2>
	case GPIO_PORT_B_3NFW:
		_port = GPIOB;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a5e      	ldr	r2, [pc, #376]	; (80043d8 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1dc>)
 8004260:	605a      	str	r2, [r3, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	4a5b      	ldr	r2, [pc, #364]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 8004268:	f043 0302 	orr.w	r3, r3, #2
 800426c:	61d3      	str	r3, [r2, #28]
 800426e:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	69bb      	ldr	r3, [r7, #24]
		break;
 800427a:	e030      	b.n	80042de <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0xe2>
	case GPIO_PORT_C_3NFW:
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800427c:	4b55      	ldr	r3, [pc, #340]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	4a54      	ldr	r2, [pc, #336]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 8004282:	f043 0304 	orr.w	r3, r3, #4
 8004286:	61d3      	str	r3, [r2, #28]
 8004288:	4b52      	ldr	r3, [pc, #328]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	697b      	ldr	r3, [r7, #20]
		_port = GPIOC;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a51      	ldr	r2, [pc, #324]	; (80043dc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1e0>)
 8004298:	605a      	str	r2, [r3, #4]
		break;
 800429a:	e020      	b.n	80042de <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0xe2>
	case GPIO_PORT_D_3NFW:
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800429c:	4b4d      	ldr	r3, [pc, #308]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	4a4c      	ldr	r2, [pc, #304]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 80042a2:	f043 0308 	orr.w	r3, r3, #8
 80042a6:	61d3      	str	r3, [r2, #28]
 80042a8:	4b4a      	ldr	r3, [pc, #296]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	693b      	ldr	r3, [r7, #16]
		_port = GPIOD;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a4a      	ldr	r2, [pc, #296]	; (80043e0 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1e4>)
 80042b8:	605a      	str	r2, [r3, #4]
		break;
 80042ba:	e010      	b.n	80042de <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0xe2>
	case GPIO_PORT_E_3NFW:
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80042bc:	4b45      	ldr	r3, [pc, #276]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	4a44      	ldr	r2, [pc, #272]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 80042c2:	f043 0310 	orr.w	r3, r3, #16
 80042c6:	61d3      	str	r3, [r2, #28]
 80042c8:	4b42      	ldr	r3, [pc, #264]	; (80043d4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1d8>)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	68fb      	ldr	r3, [r7, #12]
		_port = GPIOE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a43      	ldr	r2, [pc, #268]	; (80043e4 <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1e8>)
 80042d8:	605a      	str	r2, [r3, #4]
		break;
 80042da:	e000      	b.n	80042de <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0xe2>
	default:
		break;
 80042dc:	bf00      	nop
	}

	switch (pin) {
 80042de:	78bb      	ldrb	r3, [r7, #2]
 80042e0:	2b0f      	cmp	r3, #15
 80042e2:	d86b      	bhi.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
 80042e4:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0xf0>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	0800432d 	.word	0x0800432d
 80042f0:	08004335 	.word	0x08004335
 80042f4:	0800433d 	.word	0x0800433d
 80042f8:	08004345 	.word	0x08004345
 80042fc:	0800434d 	.word	0x0800434d
 8004300:	08004355 	.word	0x08004355
 8004304:	0800435d 	.word	0x0800435d
 8004308:	08004365 	.word	0x08004365
 800430c:	0800436d 	.word	0x0800436d
 8004310:	08004377 	.word	0x08004377
 8004314:	08004381 	.word	0x08004381
 8004318:	0800438b 	.word	0x0800438b
 800431c:	08004395 	.word	0x08004395
 8004320:	0800439f 	.word	0x0800439f
 8004324:	080043a9 	.word	0x080043a9
 8004328:	080043b3 	.word	0x080043b3
	case 0:
		_pin = GPIO_PIN_0;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	811a      	strh	r2, [r3, #8]
		break;
 8004332:	e043      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 1:
		_pin = GPIO_PIN_1;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	811a      	strh	r2, [r3, #8]
		break;
 800433a:	e03f      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 2:
		_pin = GPIO_PIN_2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2204      	movs	r2, #4
 8004340:	811a      	strh	r2, [r3, #8]
		break;
 8004342:	e03b      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 3:
		_pin = GPIO_PIN_3;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2208      	movs	r2, #8
 8004348:	811a      	strh	r2, [r3, #8]
		break;
 800434a:	e037      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 4:
		_pin = GPIO_PIN_4;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2210      	movs	r2, #16
 8004350:	811a      	strh	r2, [r3, #8]
		break;
 8004352:	e033      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 5:
		_pin = GPIO_PIN_5;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	811a      	strh	r2, [r3, #8]
		break;
 800435a:	e02f      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 6:
		_pin = GPIO_PIN_6;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2240      	movs	r2, #64	; 0x40
 8004360:	811a      	strh	r2, [r3, #8]
		break;
 8004362:	e02b      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 7:
		_pin = GPIO_PIN_7;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2280      	movs	r2, #128	; 0x80
 8004368:	811a      	strh	r2, [r3, #8]
		break;
 800436a:	e027      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 8:
		_pin = GPIO_PIN_8;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004372:	811a      	strh	r2, [r3, #8]
		break;
 8004374:	e022      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 9:
		_pin = GPIO_PIN_9;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800437c:	811a      	strh	r2, [r3, #8]
		break;
 800437e:	e01d      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 10:
		_pin = GPIO_PIN_10;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004386:	811a      	strh	r2, [r3, #8]
		break;
 8004388:	e018      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 11:
		_pin = GPIO_PIN_11;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004390:	811a      	strh	r2, [r3, #8]
		break;
 8004392:	e013      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 12:
		_pin = GPIO_PIN_12;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800439a:	811a      	strh	r2, [r3, #8]
		break;
 800439c:	e00e      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 13:
		_pin = GPIO_PIN_13;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043a4:	811a      	strh	r2, [r3, #8]
		break;
 80043a6:	e009      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 14:
		_pin = GPIO_PIN_14;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043ae:	811a      	strh	r2, [r3, #8]
		break;
 80043b0:	e004      	b.n	80043bc <_ZN11GpioStm32L1C1E15tdeGpioPortNameh+0x1c0>
	case 15:
		_pin = GPIO_PIN_15;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80043b8:	811a      	strh	r2, [r3, #8]
		break;
 80043ba:	bf00      	nop
	}

	_mode = GPIO_MODE_INPUT_HIZ_3NFW;	// This initialization is arbitrary!
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2205      	movs	r2, #5
 80043c0:	729a      	strb	r2, [r3, #10]
}
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4618      	mov	r0, r3
 80043c6:	3720      	adds	r7, #32
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	0800dc98 	.word	0x0800dc98
 80043d0:	40020000 	.word	0x40020000
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40020400 	.word	0x40020400
 80043dc:	40020800 	.word	0x40020800
 80043e0:	40020c00 	.word	0x40020c00
 80043e4:	40021000 	.word	0x40021000

080043e8 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode>:

void GpioStm32L1::setMode(tdeGpioMode eMode, tdeGpioState eInitState,
		tdeErrorCode *pErr) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	; 0x28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	460b      	mov	r3, r1
 80043f4:	72fb      	strb	r3, [r7, #11]
 80043f6:	4613      	mov	r3, r2
 80043f8:	72bb      	strb	r3, [r7, #10]
//		}
//	}
//#endif

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = _pin;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	891b      	ldrh	r3, [r3, #8]
 80043fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004400:	2300      	movs	r3, #0
 8004402:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004404:	2300      	movs	r3, #0
 8004406:	623b      	str	r3, [r7, #32]

	switch (eMode) {
 8004408:	7afb      	ldrb	r3, [r7, #11]
 800440a:	2b0d      	cmp	r3, #13
 800440c:	d84f      	bhi.n	80044ae <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0xc6>
 800440e:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0x2c>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	0800444d 	.word	0x0800444d
 8004418:	08004453 	.word	0x08004453
 800441c:	080044af 	.word	0x080044af
 8004420:	08004459 	.word	0x08004459
 8004424:	0800445f 	.word	0x0800445f
 8004428:	08004465 	.word	0x08004465
 800442c:	0800446b 	.word	0x0800446b
 8004430:	08004475 	.word	0x08004475
 8004434:	0800447f 	.word	0x0800447f
 8004438:	08004487 	.word	0x08004487
 800443c:	0800448f 	.word	0x0800448f
 8004440:	08004497 	.word	0x08004497
 8004444:	0800449f 	.word	0x0800449f
 8004448:	080044a7 	.word	0x080044a7
	case GPIO_MODE_OUTPUT_PP_3NFW:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800444c:	2301      	movs	r3, #1
 800444e:	61bb      	str	r3, [r7, #24]
		break;
 8004450:	e038      	b.n	80044c4 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0xdc>
	case GPIO_MODE_OUTPUT_OD_NCH_3NFW:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004452:	2311      	movs	r3, #17
 8004454:	61bb      	str	r3, [r7, #24]
		break;
 8004456:	e035      	b.n	80044c4 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0xdc>
	case GPIO_MODE_OUTPUT_AF_PP_3NFW:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004458:	2302      	movs	r3, #2
 800445a:	61bb      	str	r3, [r7, #24]
		break;
 800445c:	e032      	b.n	80044c4 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0xdc>
	case GPIO_MODE_OUTPUT_AF_OD_3NFW:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800445e:	2312      	movs	r3, #18
 8004460:	61bb      	str	r3, [r7, #24]
		break;
 8004462:	e02f      	b.n	80044c4 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0xdc>
	case GPIO_MODE_INPUT_HIZ_3NFW:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
		break;
 8004468:	e02c      	b.n	80044c4 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0xdc>
	case GPIO_MODE_INPUT_PU_3NFW:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800446a:	2300      	movs	r3, #0
 800446c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800446e:	2301      	movs	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
		break;
 8004472:	e027      	b.n	80044c4 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0xdc>
	case GPIO_MODE_INPUT_PD_3NFW:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004474:	2300      	movs	r3, #0
 8004476:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004478:	2302      	movs	r3, #2
 800447a:	61fb      	str	r3, [r7, #28]
		break;
 800447c:	e022      	b.n	80044c4 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0xdc>

	case GPIO_MODE_IT_RISING_3NFW:
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800447e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004482:	61bb      	str	r3, [r7, #24]
		break;
 8004484:	e01e      	b.n	80044c4 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0xdc>
	case GPIO_MODE_IT_FALLING_3NFW:
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004486:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800448a:	61bb      	str	r3, [r7, #24]
		break;
 800448c:	e01a      	b.n	80044c4 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0xdc>
	case GPIO_MODE_IT_R_F_3NFW:
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800448e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8004492:	61bb      	str	r3, [r7, #24]
		break;
 8004494:	e016      	b.n	80044c4 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0xdc>

	case GPIO_MODE_EVT_RISING_3NFW:
		GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004496:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800449a:	61bb      	str	r3, [r7, #24]
		break;
 800449c:	e012      	b.n	80044c4 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0xdc>
	case GPIO_MODE_EVT_FALLING_3NFW:
		GPIO_InitStruct.Mode = GPIO_MODE_EVT_FALLING;
 800449e:	f44f 1308 	mov.w	r3, #2228224	; 0x220000
 80044a2:	61bb      	str	r3, [r7, #24]
		break;
 80044a4:	e00e      	b.n	80044c4 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0xdc>
	case GPIO_MODE_EVT_R_F_3NFW:
		GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING_FALLING;
 80044a6:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80044aa:	61bb      	str	r3, [r7, #24]
		break;
 80044ac:	e00a      	b.n	80044c4 <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0xdc>
	default:
		if (pErr != NULL) {
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01b      	beq.n	80044ec <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0x104>
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	701a      	strb	r2, [r3, #0]
		}
		return;
 80044c2:	e013      	b.n	80044ec <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0x104>
	}

	_mode = eMode;// Mode is changed only if the default case is not triggered (i.e. a valid mode is set)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	7afa      	ldrb	r2, [r7, #11]
 80044c8:	729a      	strb	r2, [r3, #10]
//
//		default:
//		return OPERATION_FAILED_3N;
//	}

	HAL_GPIO_Init(_port, &GPIO_InitStruct);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f107 0214 	add.w	r2, r7, #20
 80044d2:	4611      	mov	r1, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fca9 	bl	8004e2c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(_port, _pin, (GPIO_PinState) (eInitState));
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6858      	ldr	r0, [r3, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	891b      	ldrh	r3, [r3, #8]
 80044e2:	7aba      	ldrb	r2, [r7, #10]
 80044e4:	4619      	mov	r1, r3
 80044e6:	f000 ff18 	bl	800531a <HAL_GPIO_WritePin>
	return;
 80044ea:	e000      	b.n	80044ee <_ZN11GpioStm32L17setModeE11tdeGpioMode12tdeGpioStateP12tdeErrorCode+0x106>
		return;
 80044ec:	bf00      	nop
}
 80044ee:	3728      	adds	r7, #40	; 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <_ZN11GpioStm32L19setOutputE12tdeGpioStateP12tdeErrorCode>:

void GpioStm32L1::setOutput(tdeGpioState eState, tdeErrorCode *pErr) {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	460b      	mov	r3, r1
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	72fb      	strb	r3, [r7, #11]
//			return;
//		}
//	}
//#endif

	if (_mode != GPIO_MODE_OUTPUT_PP_3NFW
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	7a9b      	ldrb	r3, [r3, #10]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d016      	beq.n	8004538 <_ZN11GpioStm32L19setOutputE12tdeGpioStateP12tdeErrorCode+0x44>
			&& _mode != GPIO_MODE_OUTPUT_OD_NCH_3NFW
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	7a9b      	ldrb	r3, [r3, #10]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d012      	beq.n	8004538 <_ZN11GpioStm32L19setOutputE12tdeGpioStateP12tdeErrorCode+0x44>
			&& _mode != GPIO_MODE_OUTPUT_AF_PP_3NFW
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	7a9b      	ldrb	r3, [r3, #10]
 8004516:	2b03      	cmp	r3, #3
 8004518:	d00e      	beq.n	8004538 <_ZN11GpioStm32L19setOutputE12tdeGpioStateP12tdeErrorCode+0x44>
			&& _mode != GPIO_MODE_OUTPUT_AF_OD_3NFW) {
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	7a9b      	ldrb	r3, [r3, #10]
 800451e:	2b04      	cmp	r3, #4
 8004520:	d00a      	beq.n	8004538 <_ZN11GpioStm32L19setOutputE12tdeGpioStateP12tdeErrorCode+0x44>
		if (pErr != NULL) {
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d010      	beq.n	800454a <_ZN11GpioStm32L19setOutputE12tdeGpioStateP12tdeErrorCode+0x56>
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	b2da      	uxtb	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	701a      	strb	r2, [r3, #0]
		}
		return;
 8004536:	e008      	b.n	800454a <_ZN11GpioStm32L19setOutputE12tdeGpioStateP12tdeErrorCode+0x56>
	}

	HAL_GPIO_WritePin(_port, _pin, (GPIO_PinState) (eState));
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6858      	ldr	r0, [r3, #4]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	891b      	ldrh	r3, [r3, #8]
 8004540:	7afa      	ldrb	r2, [r7, #11]
 8004542:	4619      	mov	r1, r3
 8004544:	f000 fee9 	bl	800531a <HAL_GPIO_WritePin>
	return;
 8004548:	e000      	b.n	800454c <_ZN11GpioStm32L19setOutputE12tdeGpioStateP12tdeErrorCode+0x58>
		return;
 800454a:	bf00      	nop
}
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <_ZN11GpioStm32L115setOutputToggleEP12tdeErrorCode>:

void GpioStm32L1::setOutputToggle(tdeErrorCode *pErr) {
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	6039      	str	r1, [r7, #0]
//			return;
//		}
//	}
//#endif

	if (_mode != GPIO_MODE_OUTPUT_PP_3NFW
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	7a9b      	ldrb	r3, [r3, #10]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d016      	beq.n	8004592 <_ZN11GpioStm32L115setOutputToggleEP12tdeErrorCode+0x40>
			&& _mode != GPIO_MODE_OUTPUT_OD_NCH_3NFW
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	7a9b      	ldrb	r3, [r3, #10]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d012      	beq.n	8004592 <_ZN11GpioStm32L115setOutputToggleEP12tdeErrorCode+0x40>
			&& _mode != GPIO_MODE_OUTPUT_AF_PP_3NFW
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	7a9b      	ldrb	r3, [r3, #10]
 8004570:	2b03      	cmp	r3, #3
 8004572:	d00e      	beq.n	8004592 <_ZN11GpioStm32L115setOutputToggleEP12tdeErrorCode+0x40>
			&& _mode != GPIO_MODE_OUTPUT_AF_OD_3NFW) {
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	7a9b      	ldrb	r3, [r3, #10]
 8004578:	2b04      	cmp	r3, #4
 800457a:	d00a      	beq.n	8004592 <_ZN11GpioStm32L115setOutputToggleEP12tdeErrorCode+0x40>
		if (pErr != NULL) {
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d010      	beq.n	80045a4 <_ZN11GpioStm32L115setOutputToggleEP12tdeErrorCode+0x52>
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	b2da      	uxtb	r2, r3
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	701a      	strb	r2, [r3, #0]
		}
		return;
 8004590:	e008      	b.n	80045a4 <_ZN11GpioStm32L115setOutputToggleEP12tdeErrorCode+0x52>
	}

	HAL_GPIO_TogglePin(_port, _pin);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	891b      	ldrh	r3, [r3, #8]
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f000 fed4 	bl	800534a <HAL_GPIO_TogglePin>
	return;
 80045a2:	e000      	b.n	80045a6 <_ZN11GpioStm32L115setOutputToggleEP12tdeErrorCode+0x54>
		return;
 80045a4:	bf00      	nop
}
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <_ZN11GpioStm32L18getInputEP12tdeErrorCode>:

tdeGpioState GpioStm32L1::getInput(tdeErrorCode *pErr) {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
//			return;
//		}
//	}
//#endif

	if (_mode != GPIO_MODE_INPUT_HIZ_3NFW && _mode != GPIO_MODE_INPUT_PU_3NFW
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	7a9b      	ldrb	r3, [r3, #10]
 80045ba:	2b05      	cmp	r3, #5
 80045bc:	d011      	beq.n	80045e2 <_ZN11GpioStm32L18getInputEP12tdeErrorCode+0x36>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	7a9b      	ldrb	r3, [r3, #10]
 80045c2:	2b06      	cmp	r3, #6
 80045c4:	d00d      	beq.n	80045e2 <_ZN11GpioStm32L18getInputEP12tdeErrorCode+0x36>
			&& _mode != GPIO_MODE_INPUT_PD_3NFW) {
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	7a9b      	ldrb	r3, [r3, #10]
 80045ca:	2b07      	cmp	r3, #7
 80045cc:	d009      	beq.n	80045e2 <_ZN11GpioStm32L18getInputEP12tdeErrorCode+0x36>
		if (pErr != NULL) {
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d006      	beq.n	80045e2 <_ZN11GpioStm32L18getInputEP12tdeErrorCode+0x36>
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	701a      	strb	r2, [r3, #0]
		}
	}

	return (tdeGpioState) (HAL_GPIO_ReadPin(_port, _pin));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	891b      	ldrh	r3, [r3, #8]
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f000 fe7d 	bl	80052ec <HAL_GPIO_ReadPin>
 80045f2:	4603      	mov	r3, r0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <_ZN5I2c3nC1Ev>:
/* Abstract Base Class for implementing generic I2C Master functionalities
 on various embedded hardwares. Hardware specific wrapper classes can
 inherit this class and implement the pure virtual methods declared here */
/************************************************************************/

class I2c3n {
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	4a04      	ldr	r2, [pc, #16]	; (8004618 <_ZN5I2c3nC1Ev+0x1c>)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	0800dcb0 	.word	0x0800dcb0

0800461c <_ZN10I2cStm32L1C1EP17I2C_HandleTypeDef>:
}

////////////// I2C //////////////
#ifdef __STM32L1xx_HAL_I2C_H
#include "stm32l1xx_hal_i2c.h"
I2cStm32L1::I2cStm32L1(I2C_HandleTypeDef *pI2cHandle) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff ffe7 	bl	80045fc <_ZN5I2c3nC1Ev>
 800462e:	4a05      	ldr	r2, [pc, #20]	; (8004644 <_ZN10I2cStm32L1C1EP17I2C_HandleTypeDef+0x28>)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	601a      	str	r2, [r3, #0]
	_pI2cHandle = pI2cHandle;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	605a      	str	r2, [r3, #4]
}
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	0800dc74 	.word	0x0800dc74

08004648 <_ZN10I2cStm32L15startEP12tdeErrorCode>:

void I2cStm32L1::start(tdeErrorCode *pErr) {
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
//			return;
//		}
//	}
//#endif

	if (HAL_I2C_Init(_pI2cHandle) != HAL_OK) {
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fea8 	bl	80053ac <HAL_I2C_Init>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	bf14      	ite	ne
 8004662:	2301      	movne	r3, #1
 8004664:	2300      	moveq	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <_ZN10I2cStm32L15startEP12tdeErrorCode+0x3a>
		if (pErr != NULL) {
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <_ZN10I2cStm32L15startEP12tdeErrorCode+0x3a>
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	b2da      	uxtb	r2, r3
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	701a      	strb	r2, [r3, #0]
		}
	}
	return;
 8004680:	bf00      	nop
 8004682:	bf00      	nop
}
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <_ZN10I2cStm32L14stopEP12tdeErrorCode>:

void I2cStm32L1::stop(tdeErrorCode *pErr) {
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
//			return;
//		}
//	}
//#endif

	if (HAL_I2C_DeInit(_pI2cHandle) != HAL_OK) {
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4618      	mov	r0, r3
 800469a:	f000 ffcb 	bl	8005634 <HAL_I2C_DeInit>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf14      	ite	ne
 80046a4:	2301      	movne	r3, #1
 80046a6:	2300      	moveq	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <_ZN10I2cStm32L14stopEP12tdeErrorCode+0x3a>
		if (pErr != NULL) {
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <_ZN10I2cStm32L14stopEP12tdeErrorCode+0x3a>
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	701a      	strb	r2, [r3, #0]
		}
	}
	return;
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
}
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <_ZN10I2cStm32L116isSlaveConnectedEhP12tdeErrorCode>:

bool I2cStm32L1::isSlaveConnected(uint8_t devAddr7bit, tdeErrorCode *pErr) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	460b      	mov	r3, r1
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	72fb      	strb	r3, [r7, #11]
//		}
//	}
//#endif

	// Tries to reach the slave device once and waits for 10ms for it to respond
	if (HAL_I2C_IsDeviceReady(_pI2cHandle, (devAddr7bit << 1),
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6858      	ldr	r0, [r3, #4]
 80046de:	7afb      	ldrb	r3, [r7, #11]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	b299      	uxth	r1, r3
 80046e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046ea:	2201      	movs	r2, #1
 80046ec:	f001 fe36 	bl	800635c <HAL_I2C_IsDeviceReady>
 80046f0:	4603      	mov	r3, r0
			PALSTM32L1_I2C_SLAVE_PING_ATTEMPTS,
			PALSTM32L1_I2C_SLAVE_RESP_TIMEOUT_MS) == HAL_OK) {
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bf0c      	ite	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	2300      	movne	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
	if (HAL_I2C_IsDeviceReady(_pI2cHandle, (devAddr7bit << 1),
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <_ZN10I2cStm32L116isSlaveConnectedEhP12tdeErrorCode+0x38>
		return true;
 8004700:	2301      	movs	r3, #1
 8004702:	e00a      	b.n	800471a <_ZN10I2cStm32L116isSlaveConnectedEhP12tdeErrorCode+0x4e>
	} else {
		if (pErr != NULL) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d006      	beq.n	8004718 <_ZN10I2cStm32L116isSlaveConnectedEhP12tdeErrorCode+0x4c>
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	b2da      	uxtb	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	701a      	strb	r2, [r3, #0]
		}
		return false;
 8004718:	2300      	movs	r3, #0
	}
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <_ZN10I2cStm32L18rawWriteEhPhtP12tdeErrorCode>:

void I2cStm32L1::rawWrite(uint8_t devAddr7bit, uint8_t *pDataBuff, uint16_t len,
		tdeErrorCode *pErr) {
 8004722:	b580      	push	{r7, lr}
 8004724:	b086      	sub	sp, #24
 8004726:	af02      	add	r7, sp, #8
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	461a      	mov	r2, r3
 800472e:	460b      	mov	r3, r1
 8004730:	72fb      	strb	r3, [r7, #11]
 8004732:	4613      	mov	r3, r2
 8004734:	813b      	strh	r3, [r7, #8]
//			return;
//		}
//	}
//#endif

	if (isSlaveConnected(devAddr7bit, pErr) == false) {
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3308      	adds	r3, #8
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	7af9      	ldrb	r1, [r7, #11]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	4798      	blx	r3
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	bf0c      	ite	eq
 800474c:	2301      	moveq	r3, #1
 800474e:	2300      	movne	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d11f      	bne.n	8004796 <_ZN10I2cStm32L18rawWriteEhPhtP12tdeErrorCode+0x74>
		return;
	}

	if (HAL_I2C_Master_Transmit(_pI2cHandle, (devAddr7bit << 1), pDataBuff, len,
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6858      	ldr	r0, [r3, #4]
 800475a:	7afb      	ldrb	r3, [r7, #11]
 800475c:	b29b      	uxth	r3, r3
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	b299      	uxth	r1, r3
 8004762:	893b      	ldrh	r3, [r7, #8]
 8004764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004768:	9200      	str	r2, [sp, #0]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	f000 ffa6 	bl	80056bc <HAL_I2C_Master_Transmit>
 8004770:	4603      	mov	r3, r0
			PALSTM32L1_I2C_SLAVE_RESP_TIMEOUT_MS) != HAL_OK) {
 8004772:	2b00      	cmp	r3, #0
 8004774:	bf14      	ite	ne
 8004776:	2301      	movne	r3, #1
 8004778:	2300      	moveq	r3, #0
 800477a:	b2db      	uxtb	r3, r3
	if (HAL_I2C_Master_Transmit(_pI2cHandle, (devAddr7bit << 1), pDataBuff, len,
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00c      	beq.n	800479a <_ZN10I2cStm32L18rawWriteEhPhtP12tdeErrorCode+0x78>
		if (pErr != NULL) {
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <_ZN10I2cStm32L18rawWriteEhPhtP12tdeErrorCode+0x78>
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW);
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	b2da      	uxtb	r2, r3
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	701a      	strb	r2, [r3, #0]
		}
	}
	return;
 8004794:	e001      	b.n	800479a <_ZN10I2cStm32L18rawWriteEhPhtP12tdeErrorCode+0x78>
		return;
 8004796:	bf00      	nop
 8004798:	e000      	b.n	800479c <_ZN10I2cStm32L18rawWriteEhPhtP12tdeErrorCode+0x7a>
	return;
 800479a:	bf00      	nop
}
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <_ZN10I2cStm32L17rawReadEhPhtP12tdeErrorCode>:

void I2cStm32L1::rawRead(uint8_t devAddr7bit, uint8_t *pDataBuff, uint16_t len,
		tdeErrorCode *pErr) {
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b086      	sub	sp, #24
 80047a6:	af02      	add	r7, sp, #8
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	461a      	mov	r2, r3
 80047ae:	460b      	mov	r3, r1
 80047b0:	72fb      	strb	r3, [r7, #11]
 80047b2:	4613      	mov	r3, r2
 80047b4:	813b      	strh	r3, [r7, #8]
//			return;
//		}
//	}
//#endif

	if (isSlaveConnected(devAddr7bit, pErr) == false) {
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3308      	adds	r3, #8
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	7af9      	ldrb	r1, [r7, #11]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	4798      	blx	r3
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11f      	bne.n	8004816 <_ZN10I2cStm32L17rawReadEhPhtP12tdeErrorCode+0x74>
		return;
	}

	if (HAL_I2C_Master_Receive(_pI2cHandle, (devAddr7bit << 1), pDataBuff, len,
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6858      	ldr	r0, [r3, #4]
 80047da:	7afb      	ldrb	r3, [r7, #11]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	b299      	uxth	r1, r3
 80047e2:	893b      	ldrh	r3, [r7, #8]
 80047e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047e8:	9200      	str	r2, [sp, #0]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	f001 f864 	bl	80058b8 <HAL_I2C_Master_Receive>
 80047f0:	4603      	mov	r3, r0
			PALSTM32L1_I2C_SLAVE_RESP_TIMEOUT_MS) != HAL_OK) {
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bf14      	ite	ne
 80047f6:	2301      	movne	r3, #1
 80047f8:	2300      	moveq	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
	if (HAL_I2C_Master_Receive(_pI2cHandle, (devAddr7bit << 1), pDataBuff, len,
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00c      	beq.n	800481a <_ZN10I2cStm32L17rawReadEhPhtP12tdeErrorCode+0x78>
		if (pErr != NULL) {
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <_ZN10I2cStm32L17rawReadEhPhtP12tdeErrorCode+0x78>
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW);
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	b2da      	uxtb	r2, r3
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	701a      	strb	r2, [r3, #0]
		}
	}
	return;
 8004814:	e001      	b.n	800481a <_ZN10I2cStm32L17rawReadEhPhtP12tdeErrorCode+0x78>
		return;
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <_ZN10I2cStm32L17rawReadEhPhtP12tdeErrorCode+0x7a>
	return;
 800481a:	bf00      	nop
}
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <_ZN10I2cStm32L18memWriteEht11tdeBusWidthPhtP12tdeErrorCode>:

void I2cStm32L1::memWrite(uint8_t devAddr7bit, uint16_t memAddr,
		tdeBusWidth memBusWidth, uint8_t *pDataBuff, uint16_t len,
		tdeErrorCode *pErr) {
 8004822:	b590      	push	{r4, r7, lr}
 8004824:	b089      	sub	sp, #36	; 0x24
 8004826:	af04      	add	r7, sp, #16
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	4608      	mov	r0, r1
 800482c:	4611      	mov	r1, r2
 800482e:	461a      	mov	r2, r3
 8004830:	4603      	mov	r3, r0
 8004832:	70fb      	strb	r3, [r7, #3]
 8004834:	460b      	mov	r3, r1
 8004836:	803b      	strh	r3, [r7, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	70bb      	strb	r3, [r7, #2]
//		}
//	}
//#endif

	uint16_t val;
	switch (memBusWidth) {
 800483c:	78bb      	ldrb	r3, [r7, #2]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <_ZN10I2cStm32L18memWriteEht11tdeBusWidthPhtP12tdeErrorCode+0x26>
 8004842:	2b01      	cmp	r3, #1
 8004844:	d003      	beq.n	800484e <_ZN10I2cStm32L18memWriteEht11tdeBusWidthPhtP12tdeErrorCode+0x2c>
 8004846:	e005      	b.n	8004854 <_ZN10I2cStm32L18memWriteEht11tdeBusWidthPhtP12tdeErrorCode+0x32>
	case BUS_WIDTH_8_BIT_3NFW:
		val = 1;
 8004848:	2301      	movs	r3, #1
 800484a:	81fb      	strh	r3, [r7, #14]
		break;
 800484c:	e00d      	b.n	800486a <_ZN10I2cStm32L18memWriteEht11tdeBusWidthPhtP12tdeErrorCode+0x48>
	case BUS_WIDTH_16_BIT_3NFW:
		val = 2;
 800484e:	2302      	movs	r3, #2
 8004850:	81fb      	strh	r3, [r7, #14]
		break;
 8004852:	e00a      	b.n	800486a <_ZN10I2cStm32L18memWriteEht11tdeBusWidthPhtP12tdeErrorCode+0x48>
	default:
		if (pErr != NULL) {
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	2b00      	cmp	r3, #0
 8004858:	d03c      	beq.n	80048d4 <_ZN10I2cStm32L18memWriteEht11tdeBusWidthPhtP12tdeErrorCode+0xb2>
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	781b      	ldrb	r3, [r3, #0]
					| ERROR_CODE_BAD_ARG_3NFW);
 800485e:	f043 0303 	orr.w	r3, r3, #3
 8004862:	b2da      	uxtb	r2, r3
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	701a      	strb	r2, [r3, #0]
		}
		return;
 8004868:	e034      	b.n	80048d4 <_ZN10I2cStm32L18memWriteEht11tdeBusWidthPhtP12tdeErrorCode+0xb2>
	}

	if (isSlaveConnected(devAddr7bit, pErr) == false) {
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3308      	adds	r3, #8
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	78f9      	ldrb	r1, [r7, #3]
 8004874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d126      	bne.n	80048d8 <_ZN10I2cStm32L18memWriteEht11tdeBusWidthPhtP12tdeErrorCode+0xb6>
		return;
	}

	if (HAL_I2C_Mem_Write(_pI2cHandle, (devAddr7bit << 1), memAddr, val,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6858      	ldr	r0, [r3, #4]
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	b29b      	uxth	r3, r3
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	b299      	uxth	r1, r3
 8004896:	89fc      	ldrh	r4, [r7, #14]
 8004898:	883a      	ldrh	r2, [r7, #0]
 800489a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800489e:	9302      	str	r3, [sp, #8]
 80048a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	4623      	mov	r3, r4
 80048aa:	f001 fa37 	bl	8005d1c <HAL_I2C_Mem_Write>
 80048ae:	4603      	mov	r3, r0
			pDataBuff, len, PALSTM32L1_I2C_SLAVE_RESP_TIMEOUT_MS) != HAL_OK) {
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf14      	ite	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	2300      	moveq	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
	if (HAL_I2C_Mem_Write(_pI2cHandle, (devAddr7bit << 1), memAddr, val,
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00e      	beq.n	80048dc <_ZN10I2cStm32L18memWriteEht11tdeBusWidthPhtP12tdeErrorCode+0xba>
		if (pErr != NULL) {
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <_ZN10I2cStm32L18memWriteEht11tdeBusWidthPhtP12tdeErrorCode+0xba>
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW);
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	701a      	strb	r2, [r3, #0]
		}
	}
	return;
 80048d2:	e003      	b.n	80048dc <_ZN10I2cStm32L18memWriteEht11tdeBusWidthPhtP12tdeErrorCode+0xba>
		return;
 80048d4:	bf00      	nop
 80048d6:	e002      	b.n	80048de <_ZN10I2cStm32L18memWriteEht11tdeBusWidthPhtP12tdeErrorCode+0xbc>
		return;
 80048d8:	bf00      	nop
 80048da:	e000      	b.n	80048de <_ZN10I2cStm32L18memWriteEht11tdeBusWidthPhtP12tdeErrorCode+0xbc>
	return;
 80048dc:	bf00      	nop
}
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd90      	pop	{r4, r7, pc}

080048e4 <_ZN10I2cStm32L17memReadEht11tdeBusWidthPhtP12tdeErrorCode>:

void I2cStm32L1::memRead(uint8_t devAddr7bit, uint16_t memAddr,
		tdeBusWidth memBusWidth, uint8_t *pDataBuff, uint16_t len,
		tdeErrorCode *pErr) {
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b089      	sub	sp, #36	; 0x24
 80048e8:	af04      	add	r7, sp, #16
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	4608      	mov	r0, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	461a      	mov	r2, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	70fb      	strb	r3, [r7, #3]
 80048f6:	460b      	mov	r3, r1
 80048f8:	803b      	strh	r3, [r7, #0]
 80048fa:	4613      	mov	r3, r2
 80048fc:	70bb      	strb	r3, [r7, #2]
//		}
//	}
//#endif

	uint16_t val;
	switch (memBusWidth) {
 80048fe:	78bb      	ldrb	r3, [r7, #2]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <_ZN10I2cStm32L17memReadEht11tdeBusWidthPhtP12tdeErrorCode+0x26>
 8004904:	2b01      	cmp	r3, #1
 8004906:	d003      	beq.n	8004910 <_ZN10I2cStm32L17memReadEht11tdeBusWidthPhtP12tdeErrorCode+0x2c>
 8004908:	e005      	b.n	8004916 <_ZN10I2cStm32L17memReadEht11tdeBusWidthPhtP12tdeErrorCode+0x32>
	case BUS_WIDTH_8_BIT_3NFW:
		val = 1;
 800490a:	2301      	movs	r3, #1
 800490c:	81fb      	strh	r3, [r7, #14]
		break;
 800490e:	e00d      	b.n	800492c <_ZN10I2cStm32L17memReadEht11tdeBusWidthPhtP12tdeErrorCode+0x48>
	case BUS_WIDTH_16_BIT_3NFW:
		val = 2;
 8004910:	2302      	movs	r3, #2
 8004912:	81fb      	strh	r3, [r7, #14]
		break;
 8004914:	e00a      	b.n	800492c <_ZN10I2cStm32L17memReadEht11tdeBusWidthPhtP12tdeErrorCode+0x48>
	default:
		if (pErr != NULL) {
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	2b00      	cmp	r3, #0
 800491a:	d03c      	beq.n	8004996 <_ZN10I2cStm32L17memReadEht11tdeBusWidthPhtP12tdeErrorCode+0xb2>
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	781b      	ldrb	r3, [r3, #0]
					| ERROR_CODE_BAD_ARG_3NFW);
 8004920:	f043 0303 	orr.w	r3, r3, #3
 8004924:	b2da      	uxtb	r2, r3
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	701a      	strb	r2, [r3, #0]
		}
		return;
 800492a:	e034      	b.n	8004996 <_ZN10I2cStm32L17memReadEht11tdeBusWidthPhtP12tdeErrorCode+0xb2>
	}

	if (isSlaveConnected(devAddr7bit, pErr) == false) {
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3308      	adds	r3, #8
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	78f9      	ldrb	r1, [r7, #3]
 8004936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	4798      	blx	r3
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	bf0c      	ite	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	2300      	movne	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d126      	bne.n	800499a <_ZN10I2cStm32L17memReadEht11tdeBusWidthPhtP12tdeErrorCode+0xb6>
		return;
	}

	if (HAL_I2C_Mem_Read(_pI2cHandle, (devAddr7bit << 1), memAddr, val,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6858      	ldr	r0, [r3, #4]
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	b29b      	uxth	r3, r3
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	b299      	uxth	r1, r3
 8004958:	89fc      	ldrh	r4, [r7, #14]
 800495a:	883a      	ldrh	r2, [r7, #0]
 800495c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004960:	9302      	str	r3, [sp, #8]
 8004962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	4623      	mov	r3, r4
 800496c:	f001 fad0 	bl	8005f10 <HAL_I2C_Mem_Read>
 8004970:	4603      	mov	r3, r0
			pDataBuff, len, PALSTM32L1_I2C_SLAVE_RESP_TIMEOUT_MS) != HAL_OK) {
 8004972:	2b00      	cmp	r3, #0
 8004974:	bf14      	ite	ne
 8004976:	2301      	movne	r3, #1
 8004978:	2300      	moveq	r3, #0
 800497a:	b2db      	uxtb	r3, r3
	if (HAL_I2C_Mem_Read(_pI2cHandle, (devAddr7bit << 1), memAddr, val,
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00e      	beq.n	800499e <_ZN10I2cStm32L17memReadEht11tdeBusWidthPhtP12tdeErrorCode+0xba>
		if (pErr != NULL) {
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <_ZN10I2cStm32L17memReadEht11tdeBusWidthPhtP12tdeErrorCode+0xba>
			*pErr = (tdeErrorCode) (*pErr | ERROR_CODE_ERR_3NFW);
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	b2da      	uxtb	r2, r3
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	701a      	strb	r2, [r3, #0]
		}
	}

	return;
 8004994:	e003      	b.n	800499e <_ZN10I2cStm32L17memReadEht11tdeBusWidthPhtP12tdeErrorCode+0xba>
		return;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <_ZN10I2cStm32L17memReadEht11tdeBusWidthPhtP12tdeErrorCode+0xbc>
		return;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <_ZN10I2cStm32L17memReadEht11tdeBusWidthPhtP12tdeErrorCode+0xbc>
	return;
 800499e:	bf00      	nop
}
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd90      	pop	{r4, r7, pc}
	...

080049a8 <Reset_Handler>:


/* Call the clock system initialization function.*    bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049a8:	480b      	ldr	r0, [pc, #44]	; (80049d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80049aa:	490c      	ldr	r1, [pc, #48]	; (80049dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80049ac:	4a0c      	ldr	r2, [pc, #48]	; (80049e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80049ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049b0:	e002      	b.n	80049b8 <LoopCopyDataInit>

080049b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049b6:	3304      	adds	r3, #4

080049b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049bc:	d3f9      	bcc.n	80049b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049be:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80049c0:	4c09      	ldr	r4, [pc, #36]	; (80049e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049c4:	e001      	b.n	80049ca <LoopFillZerobss>

080049c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049c8:	3204      	adds	r2, #4

080049ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049cc:	d3fb      	bcc.n	80049c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049ce:	f005 f8fd 	bl	8009bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80049d2:	f7fd fdc9 	bl	8002568 <main>
  bx lr
 80049d6:	4770      	bx	lr
  ldr r0, =_sdata
 80049d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049dc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80049e0:	0800e0dc 	.word	0x0800e0dc
  ldr r2, =_sbss
 80049e4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80049e8:	200003f4 	.word	0x200003f4

080049ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80049ec:	e7fe      	b.n	80049ec <ADC1_IRQHandler>

080049ee <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049f8:	2003      	movs	r0, #3
 80049fa:	f000 f979 	bl	8004cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049fe:	200f      	movs	r0, #15
 8004a00:	f000 f80e 	bl	8004a20 <HAL_InitTick>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	71fb      	strb	r3, [r7, #7]
 8004a0e:	e001      	b.n	8004a14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a10:	f7fd fea0 	bl	8002754 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a14:	79fb      	ldrb	r3, [r7, #7]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004a2c:	4b16      	ldr	r3, [pc, #88]	; (8004a88 <HAL_InitTick+0x68>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d022      	beq.n	8004a7a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004a34:	4b15      	ldr	r3, [pc, #84]	; (8004a8c <HAL_InitTick+0x6c>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <HAL_InitTick+0x68>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a40:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 f994 	bl	8004d76 <HAL_SYSTICK_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10f      	bne.n	8004a74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b0f      	cmp	r3, #15
 8004a58:	d809      	bhi.n	8004a6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a62:	f000 f950 	bl	8004d06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a66:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <HAL_InitTick+0x70>)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	e007      	b.n	8004a7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	73fb      	strb	r3, [r7, #15]
 8004a72:	e004      	b.n	8004a7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	73fb      	strb	r3, [r7, #15]
 8004a78:	e001      	b.n	8004a7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20000020 	.word	0x20000020
 8004a8c:	20000000 	.word	0x20000000
 8004a90:	2000001c 	.word	0x2000001c

08004a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_IncTick+0x1c>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <HAL_IncTick+0x20>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	4a03      	ldr	r2, [pc, #12]	; (8004ab0 <HAL_IncTick+0x1c>)
 8004aa4:	6013      	str	r3, [r2, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	200003e0 	.word	0x200003e0
 8004ab4:	20000020 	.word	0x20000020

08004ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  return uwTick;
 8004abc:	4b02      	ldr	r3, [pc, #8]	; (8004ac8 <HAL_GetTick+0x10>)
 8004abe:	681b      	ldr	r3, [r3, #0]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr
 8004ac8:	200003e0 	.word	0x200003e0

08004acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ad4:	f7ff fff0 	bl	8004ab8 <HAL_GetTick>
 8004ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d004      	beq.n	8004af0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <HAL_Delay+0x40>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4413      	add	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004af0:	bf00      	nop
 8004af2:	f7ff ffe1 	bl	8004ab8 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d8f7      	bhi.n	8004af2 <HAL_Delay+0x26>
  {
  }
}
 8004b02:	bf00      	nop
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20000020 	.word	0x20000020

08004b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <__NVIC_SetPriorityGrouping+0x44>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b42:	4a04      	ldr	r2, [pc, #16]	; (8004b54 <__NVIC_SetPriorityGrouping+0x44>)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	60d3      	str	r3, [r2, #12]
}
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	e000ed00 	.word	0xe000ed00

08004b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b5c:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <__NVIC_GetPriorityGrouping+0x18>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	0a1b      	lsrs	r3, r3, #8
 8004b62:	f003 0307 	and.w	r3, r3, #7
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	e000ed00 	.word	0xe000ed00

08004b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	db0b      	blt.n	8004b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	f003 021f 	and.w	r2, r3, #31
 8004b8c:	4906      	ldr	r1, [pc, #24]	; (8004ba8 <__NVIC_EnableIRQ+0x34>)
 8004b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	2001      	movs	r0, #1
 8004b96:	fa00 f202 	lsl.w	r2, r0, r2
 8004b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr
 8004ba8:	e000e100 	.word	0xe000e100

08004bac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	db12      	blt.n	8004be4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	f003 021f 	and.w	r2, r3, #31
 8004bc4:	490a      	ldr	r1, [pc, #40]	; (8004bf0 <__NVIC_DisableIRQ+0x44>)
 8004bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	2001      	movs	r0, #1
 8004bce:	fa00 f202 	lsl.w	r2, r0, r2
 8004bd2:	3320      	adds	r3, #32
 8004bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004bd8:	f3bf 8f4f 	dsb	sy
}
 8004bdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004bde:	f3bf 8f6f 	isb	sy
}
 8004be2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	e000e100 	.word	0xe000e100

08004bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	6039      	str	r1, [r7, #0]
 8004bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	db0a      	blt.n	8004c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	490c      	ldr	r1, [pc, #48]	; (8004c40 <__NVIC_SetPriority+0x4c>)
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	0112      	lsls	r2, r2, #4
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	440b      	add	r3, r1
 8004c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c1c:	e00a      	b.n	8004c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	4908      	ldr	r1, [pc, #32]	; (8004c44 <__NVIC_SetPriority+0x50>)
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	3b04      	subs	r3, #4
 8004c2c:	0112      	lsls	r2, r2, #4
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	440b      	add	r3, r1
 8004c32:	761a      	strb	r2, [r3, #24]
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	e000e100 	.word	0xe000e100
 8004c44:	e000ed00 	.word	0xe000ed00

08004c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b089      	sub	sp, #36	; 0x24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f1c3 0307 	rsb	r3, r3, #7
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	bf28      	it	cs
 8004c66:	2304      	movcs	r3, #4
 8004c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	2b06      	cmp	r3, #6
 8004c70:	d902      	bls.n	8004c78 <NVIC_EncodePriority+0x30>
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	3b03      	subs	r3, #3
 8004c76:	e000      	b.n	8004c7a <NVIC_EncodePriority+0x32>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43da      	mvns	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c90:	f04f 31ff 	mov.w	r1, #4294967295
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9a:	43d9      	mvns	r1, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca0:	4313      	orrs	r3, r2
         );
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3724      	adds	r7, #36	; 0x24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cbc:	d301      	bcc.n	8004cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e00f      	b.n	8004ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cc2:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <SysTick_Config+0x40>)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cca:	210f      	movs	r1, #15
 8004ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd0:	f7ff ff90 	bl	8004bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <SysTick_Config+0x40>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cda:	4b04      	ldr	r3, [pc, #16]	; (8004cec <SysTick_Config+0x40>)
 8004cdc:	2207      	movs	r2, #7
 8004cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	e000e010 	.word	0xe000e010

08004cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff ff09 	bl	8004b10 <__NVIC_SetPriorityGrouping>
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b086      	sub	sp, #24
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
 8004d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d14:	2300      	movs	r3, #0
 8004d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d18:	f7ff ff1e 	bl	8004b58 <__NVIC_GetPriorityGrouping>
 8004d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	68b9      	ldr	r1, [r7, #8]
 8004d22:	6978      	ldr	r0, [r7, #20]
 8004d24:	f7ff ff90 	bl	8004c48 <NVIC_EncodePriority>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d2e:	4611      	mov	r1, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff ff5f 	bl	8004bf4 <__NVIC_SetPriority>
}
 8004d36:	bf00      	nop
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	4603      	mov	r3, r0
 8004d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff ff11 	bl	8004b74 <__NVIC_EnableIRQ>
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	4603      	mov	r3, r0
 8004d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff ff1f 	bl	8004bac <__NVIC_DisableIRQ>
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff ff94 	bl	8004cac <SysTick_Config>
 8004d84:	4603      	mov	r3, r0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d005      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2204      	movs	r2, #4
 8004daa:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
 8004db0:	e029      	b.n	8004e06 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 020e 	bic.w	r2, r2, #14
 8004dc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0201 	bic.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	f003 021c 	and.w	r2, r3, #28
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dde:	2101      	movs	r1, #1
 8004de0:	fa01 f202 	lsl.w	r2, r1, r2
 8004de4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4798      	blx	r3
    }
  }
  return status;
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e1e:	b2db      	uxtb	r3, r3
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr
	...

08004e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004e36:	2300      	movs	r3, #0
 8004e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004e42:	e154      	b.n	80050ee <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	2101      	movs	r1, #1
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e50:	4013      	ands	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8146 	beq.w	80050e8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d005      	beq.n	8004e74 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d130      	bne.n	8004ed6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	2203      	movs	r2, #3
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8004eaa:	2201      	movs	r2, #1
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	091b      	lsrs	r3, r3, #4
 8004ec0:	f003 0201 	and.w	r2, r3, #1
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d017      	beq.n	8004f12 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	2203      	movs	r2, #3
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d123      	bne.n	8004f66 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	08da      	lsrs	r2, r3, #3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3208      	adds	r2, #8
 8004f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	220f      	movs	r2, #15
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	08da      	lsrs	r2, r3, #3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3208      	adds	r2, #8
 8004f60:	6939      	ldr	r1, [r7, #16]
 8004f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	2203      	movs	r2, #3
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	43db      	mvns	r3, r3
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f003 0203 	and.w	r2, r3, #3
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80a0 	beq.w	80050e8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fa8:	4b58      	ldr	r3, [pc, #352]	; (800510c <HAL_GPIO_Init+0x2e0>)
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	4a57      	ldr	r2, [pc, #348]	; (800510c <HAL_GPIO_Init+0x2e0>)
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	6213      	str	r3, [r2, #32]
 8004fb4:	4b55      	ldr	r3, [pc, #340]	; (800510c <HAL_GPIO_Init+0x2e0>)
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8004fc0:	4a53      	ldr	r2, [pc, #332]	; (8005110 <HAL_GPIO_Init+0x2e4>)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	089b      	lsrs	r3, r3, #2
 8004fc6:	3302      	adds	r3, #2
 8004fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fcc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	220f      	movs	r2, #15
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a4b      	ldr	r2, [pc, #300]	; (8005114 <HAL_GPIO_Init+0x2e8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d019      	beq.n	8005020 <HAL_GPIO_Init+0x1f4>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a4a      	ldr	r2, [pc, #296]	; (8005118 <HAL_GPIO_Init+0x2ec>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d013      	beq.n	800501c <HAL_GPIO_Init+0x1f0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a49      	ldr	r2, [pc, #292]	; (800511c <HAL_GPIO_Init+0x2f0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00d      	beq.n	8005018 <HAL_GPIO_Init+0x1ec>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a48      	ldr	r2, [pc, #288]	; (8005120 <HAL_GPIO_Init+0x2f4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d007      	beq.n	8005014 <HAL_GPIO_Init+0x1e8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a47      	ldr	r2, [pc, #284]	; (8005124 <HAL_GPIO_Init+0x2f8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d101      	bne.n	8005010 <HAL_GPIO_Init+0x1e4>
 800500c:	2304      	movs	r3, #4
 800500e:	e008      	b.n	8005022 <HAL_GPIO_Init+0x1f6>
 8005010:	2305      	movs	r3, #5
 8005012:	e006      	b.n	8005022 <HAL_GPIO_Init+0x1f6>
 8005014:	2303      	movs	r3, #3
 8005016:	e004      	b.n	8005022 <HAL_GPIO_Init+0x1f6>
 8005018:	2302      	movs	r3, #2
 800501a:	e002      	b.n	8005022 <HAL_GPIO_Init+0x1f6>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <HAL_GPIO_Init+0x1f6>
 8005020:	2300      	movs	r3, #0
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	f002 0203 	and.w	r2, r2, #3
 8005028:	0092      	lsls	r2, r2, #2
 800502a:	4093      	lsls	r3, r2
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005032:	4937      	ldr	r1, [pc, #220]	; (8005110 <HAL_GPIO_Init+0x2e4>)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	089b      	lsrs	r3, r3, #2
 8005038:	3302      	adds	r3, #2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005040:	4b39      	ldr	r3, [pc, #228]	; (8005128 <HAL_GPIO_Init+0x2fc>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	43db      	mvns	r3, r3
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4013      	ands	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005064:	4a30      	ldr	r2, [pc, #192]	; (8005128 <HAL_GPIO_Init+0x2fc>)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800506a:	4b2f      	ldr	r3, [pc, #188]	; (8005128 <HAL_GPIO_Init+0x2fc>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	43db      	mvns	r3, r3
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4013      	ands	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800508e:	4a26      	ldr	r2, [pc, #152]	; (8005128 <HAL_GPIO_Init+0x2fc>)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005094:	4b24      	ldr	r3, [pc, #144]	; (8005128 <HAL_GPIO_Init+0x2fc>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	43db      	mvns	r3, r3
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4013      	ands	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80050b8:	4a1b      	ldr	r2, [pc, #108]	; (8005128 <HAL_GPIO_Init+0x2fc>)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050be:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <HAL_GPIO_Init+0x2fc>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	43db      	mvns	r3, r3
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4013      	ands	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80050e2:	4a11      	ldr	r2, [pc, #68]	; (8005128 <HAL_GPIO_Init+0x2fc>)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	3301      	adds	r3, #1
 80050ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f47f aea3 	bne.w	8004e44 <HAL_GPIO_Init+0x18>
  }
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40023800 	.word	0x40023800
 8005110:	40010000 	.word	0x40010000
 8005114:	40020000 	.word	0x40020000
 8005118:	40020400 	.word	0x40020400
 800511c:	40020800 	.word	0x40020800
 8005120:	40020c00 	.word	0x40020c00
 8005124:	40021000 	.word	0x40021000
 8005128:	40010400 	.word	0x40010400

0800512c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800513a:	2300      	movs	r3, #0
 800513c:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8005142:	e0b8      	b.n	80052b6 <HAL_GPIO_DeInit+0x18a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8005144:	2201      	movs	r2, #1
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	4013      	ands	r3, r2
 8005150:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 80ab 	beq.w	80052b0 <HAL_GPIO_DeInit+0x184>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 800515a:	4a5d      	ldr	r2, [pc, #372]	; (80052d0 <HAL_GPIO_DeInit+0x1a4>)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	089b      	lsrs	r3, r3, #2
 8005160:	3302      	adds	r3, #2
 8005162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005166:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	220f      	movs	r2, #15
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4013      	ands	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a55      	ldr	r2, [pc, #340]	; (80052d4 <HAL_GPIO_DeInit+0x1a8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d019      	beq.n	80051b8 <HAL_GPIO_DeInit+0x8c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a54      	ldr	r2, [pc, #336]	; (80052d8 <HAL_GPIO_DeInit+0x1ac>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d013      	beq.n	80051b4 <HAL_GPIO_DeInit+0x88>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a53      	ldr	r2, [pc, #332]	; (80052dc <HAL_GPIO_DeInit+0x1b0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00d      	beq.n	80051b0 <HAL_GPIO_DeInit+0x84>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a52      	ldr	r2, [pc, #328]	; (80052e0 <HAL_GPIO_DeInit+0x1b4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d007      	beq.n	80051ac <HAL_GPIO_DeInit+0x80>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a51      	ldr	r2, [pc, #324]	; (80052e4 <HAL_GPIO_DeInit+0x1b8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d101      	bne.n	80051a8 <HAL_GPIO_DeInit+0x7c>
 80051a4:	2304      	movs	r3, #4
 80051a6:	e008      	b.n	80051ba <HAL_GPIO_DeInit+0x8e>
 80051a8:	2305      	movs	r3, #5
 80051aa:	e006      	b.n	80051ba <HAL_GPIO_DeInit+0x8e>
 80051ac:	2303      	movs	r3, #3
 80051ae:	e004      	b.n	80051ba <HAL_GPIO_DeInit+0x8e>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e002      	b.n	80051ba <HAL_GPIO_DeInit+0x8e>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <HAL_GPIO_DeInit+0x8e>
 80051b8:	2300      	movs	r3, #0
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	f002 0203 	and.w	r2, r2, #3
 80051c0:	0092      	lsls	r2, r2, #2
 80051c2:	4093      	lsls	r3, r2
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d132      	bne.n	8005230 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80051ca:	4b47      	ldr	r3, [pc, #284]	; (80052e8 <HAL_GPIO_DeInit+0x1bc>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	43db      	mvns	r3, r3
 80051d2:	4945      	ldr	r1, [pc, #276]	; (80052e8 <HAL_GPIO_DeInit+0x1bc>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80051d8:	4b43      	ldr	r3, [pc, #268]	; (80052e8 <HAL_GPIO_DeInit+0x1bc>)
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	43db      	mvns	r3, r3
 80051e0:	4941      	ldr	r1, [pc, #260]	; (80052e8 <HAL_GPIO_DeInit+0x1bc>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80051e6:	4b40      	ldr	r3, [pc, #256]	; (80052e8 <HAL_GPIO_DeInit+0x1bc>)
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	43db      	mvns	r3, r3
 80051ee:	493e      	ldr	r1, [pc, #248]	; (80052e8 <HAL_GPIO_DeInit+0x1bc>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80051f4:	4b3c      	ldr	r3, [pc, #240]	; (80052e8 <HAL_GPIO_DeInit+0x1bc>)
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	43db      	mvns	r3, r3
 80051fc:	493a      	ldr	r1, [pc, #232]	; (80052e8 <HAL_GPIO_DeInit+0x1bc>)
 80051fe:	4013      	ands	r3, r2
 8005200:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	220f      	movs	r2, #15
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8005212:	4a2f      	ldr	r2, [pc, #188]	; (80052d0 <HAL_GPIO_DeInit+0x1a4>)
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	3302      	adds	r3, #2
 800521a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	43da      	mvns	r2, r3
 8005222:	482b      	ldr	r0, [pc, #172]	; (80052d0 <HAL_GPIO_DeInit+0x1a4>)
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	089b      	lsrs	r3, r3, #2
 8005228:	400a      	ands	r2, r1
 800522a:	3302      	adds	r3, #2
 800522c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	2103      	movs	r1, #3
 800523a:	fa01 f303 	lsl.w	r3, r1, r3
 800523e:	43db      	mvns	r3, r3
 8005240:	401a      	ands	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	08da      	lsrs	r2, r3, #3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3208      	adds	r2, #8
 800524e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	220f      	movs	r2, #15
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	43db      	mvns	r3, r3
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	08d2      	lsrs	r2, r2, #3
 8005266:	4019      	ands	r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3208      	adds	r2, #8
 800526c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	2103      	movs	r1, #3
 800527a:	fa01 f303 	lsl.w	r3, r1, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	401a      	ands	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	2101      	movs	r1, #1
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	fa01 f303 	lsl.w	r3, r1, r3
 8005292:	43db      	mvns	r3, r3
 8005294:	401a      	ands	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	2103      	movs	r1, #3
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	43db      	mvns	r3, r3
 80052aa:	401a      	ands	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	609a      	str	r2, [r3, #8]
    }

    position++;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	3301      	adds	r3, #1
 80052b4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	fa22 f303 	lsr.w	r3, r2, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f47f af40 	bne.w	8005144 <HAL_GPIO_DeInit+0x18>
  }
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40020000 	.word	0x40020000
 80052d8:	40020400 	.word	0x40020400
 80052dc:	40020800 	.word	0x40020800
 80052e0:	40020c00 	.word	0x40020c00
 80052e4:	40021000 	.word	0x40021000
 80052e8:	40010400 	.word	0x40010400

080052ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	887b      	ldrh	r3, [r7, #2]
 80052fe:	4013      	ands	r3, r2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
 8005308:	e001      	b.n	800530e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800530e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	807b      	strh	r3, [r7, #2]
 8005326:	4613      	mov	r3, r2
 8005328:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800532a:	787b      	ldrb	r3, [r7, #1]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005330:	887a      	ldrh	r2, [r7, #2]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8005336:	e003      	b.n	8005340 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8005338:	887b      	ldrh	r3, [r7, #2]
 800533a:	041a      	lsls	r2, r3, #16
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	619a      	str	r2, [r3, #24]
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr

0800534a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	460b      	mov	r3, r1
 8005354:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800535c:	887a      	ldrh	r2, [r7, #2]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4013      	ands	r3, r2
 8005362:	041a      	lsls	r2, r3, #16
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	43d9      	mvns	r1, r3
 8005368:	887b      	ldrh	r3, [r7, #2]
 800536a:	400b      	ands	r3, r1
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	619a      	str	r2, [r3, #24]
}
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	4603      	mov	r3, r0
 8005384:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005386:	4b08      	ldr	r3, [pc, #32]	; (80053a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005388:	695a      	ldr	r2, [r3, #20]
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	4013      	ands	r3, r2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d006      	beq.n	80053a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005392:	4a05      	ldr	r2, [pc, #20]	; (80053a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005394:	88fb      	ldrh	r3, [r7, #6]
 8005396:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005398:	88fb      	ldrh	r3, [r7, #6]
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe fdf4 	bl	8003f88 <HAL_GPIO_EXTI_Callback>
  }
}
 80053a0:	bf00      	nop
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40010400 	.word	0x40010400

080053ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e12b      	b.n	8005616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fd f802 	bl	80023dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2224      	movs	r2, #36	; 0x24
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800540e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005410:	f003 fea2 	bl	8009158 <HAL_RCC_GetPCLK1Freq>
 8005414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4a81      	ldr	r2, [pc, #516]	; (8005620 <HAL_I2C_Init+0x274>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d807      	bhi.n	8005430 <HAL_I2C_Init+0x84>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a80      	ldr	r2, [pc, #512]	; (8005624 <HAL_I2C_Init+0x278>)
 8005424:	4293      	cmp	r3, r2
 8005426:	bf94      	ite	ls
 8005428:	2301      	movls	r3, #1
 800542a:	2300      	movhi	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e006      	b.n	800543e <HAL_I2C_Init+0x92>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4a7d      	ldr	r2, [pc, #500]	; (8005628 <HAL_I2C_Init+0x27c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	bf94      	ite	ls
 8005438:	2301      	movls	r3, #1
 800543a:	2300      	movhi	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e0e7      	b.n	8005616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a78      	ldr	r2, [pc, #480]	; (800562c <HAL_I2C_Init+0x280>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	0c9b      	lsrs	r3, r3, #18
 8005450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4a6a      	ldr	r2, [pc, #424]	; (8005620 <HAL_I2C_Init+0x274>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d802      	bhi.n	8005480 <HAL_I2C_Init+0xd4>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	3301      	adds	r3, #1
 800547e:	e009      	b.n	8005494 <HAL_I2C_Init+0xe8>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005486:	fb02 f303 	mul.w	r3, r2, r3
 800548a:	4a69      	ldr	r2, [pc, #420]	; (8005630 <HAL_I2C_Init+0x284>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	099b      	lsrs	r3, r3, #6
 8005492:	3301      	adds	r3, #1
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	430b      	orrs	r3, r1
 800549a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	495c      	ldr	r1, [pc, #368]	; (8005620 <HAL_I2C_Init+0x274>)
 80054b0:	428b      	cmp	r3, r1
 80054b2:	d819      	bhi.n	80054e8 <HAL_I2C_Init+0x13c>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	1e59      	subs	r1, r3, #1
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	fbb1 f3f3 	udiv	r3, r1, r3
 80054c2:	1c59      	adds	r1, r3, #1
 80054c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054c8:	400b      	ands	r3, r1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HAL_I2C_Init+0x138>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1e59      	subs	r1, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80054dc:	3301      	adds	r3, #1
 80054de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e2:	e051      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 80054e4:	2304      	movs	r3, #4
 80054e6:	e04f      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d111      	bne.n	8005514 <HAL_I2C_Init+0x168>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	1e58      	subs	r0, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6859      	ldr	r1, [r3, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	440b      	add	r3, r1
 80054fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005502:	3301      	adds	r3, #1
 8005504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005508:	2b00      	cmp	r3, #0
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	e012      	b.n	800553a <HAL_I2C_Init+0x18e>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	1e58      	subs	r0, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6859      	ldr	r1, [r3, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	0099      	lsls	r1, r3, #2
 8005524:	440b      	add	r3, r1
 8005526:	fbb0 f3f3 	udiv	r3, r0, r3
 800552a:	3301      	adds	r3, #1
 800552c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005530:	2b00      	cmp	r3, #0
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_I2C_Init+0x196>
 800553e:	2301      	movs	r3, #1
 8005540:	e022      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10e      	bne.n	8005568 <HAL_I2C_Init+0x1bc>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1e58      	subs	r0, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6859      	ldr	r1, [r3, #4]
 8005552:	460b      	mov	r3, r1
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	440b      	add	r3, r1
 8005558:	fbb0 f3f3 	udiv	r3, r0, r3
 800555c:	3301      	adds	r3, #1
 800555e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005566:	e00f      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	1e58      	subs	r0, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	0099      	lsls	r1, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	fbb0 f3f3 	udiv	r3, r0, r3
 800557e:	3301      	adds	r3, #1
 8005580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	6809      	ldr	r1, [r1, #0]
 800558c:	4313      	orrs	r3, r2
 800558e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6911      	ldr	r1, [r2, #16]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68d2      	ldr	r2, [r2, #12]
 80055c2:	4311      	orrs	r1, r2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	430b      	orrs	r3, r1
 80055ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	000186a0 	.word	0x000186a0
 8005624:	001e847f 	.word	0x001e847f
 8005628:	003d08ff 	.word	0x003d08ff
 800562c:	431bde83 	.word	0x431bde83
 8005630:	10624dd3 	.word	0x10624dd3

08005634 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e021      	b.n	800568a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2224      	movs	r2, #36	; 0x24
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0201 	bic.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fc ff42 	bl	80024e8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a4:	2b80      	cmp	r3, #128	; 0x80
 80056a6:	d103      	bne.n	80056b0 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2200      	movs	r2, #0
 80056ae:	611a      	str	r2, [r3, #16]
  }
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr
	...

080056bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	607a      	str	r2, [r7, #4]
 80056c6:	461a      	mov	r2, r3
 80056c8:	460b      	mov	r3, r1
 80056ca:	817b      	strh	r3, [r7, #10]
 80056cc:	4613      	mov	r3, r2
 80056ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056d0:	f7ff f9f2 	bl	8004ab8 <HAL_GetTick>
 80056d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b20      	cmp	r3, #32
 80056e0:	f040 80e0 	bne.w	80058a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	2319      	movs	r3, #25
 80056ea:	2201      	movs	r2, #1
 80056ec:	4970      	ldr	r1, [pc, #448]	; (80058b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f002 fd9c 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80056fa:	2302      	movs	r3, #2
 80056fc:	e0d3      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_I2C_Master_Transmit+0x50>
 8005708:	2302      	movs	r3, #2
 800570a:	e0cc      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1ea>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b01      	cmp	r3, #1
 8005720:	d007      	beq.n	8005732 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0201 	orr.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005740:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2221      	movs	r2, #33	; 0x21
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2210      	movs	r2, #16
 800574e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	893a      	ldrh	r2, [r7, #8]
 8005762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4a50      	ldr	r2, [pc, #320]	; (80058b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005772:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005774:	8979      	ldrh	r1, [r7, #10]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	6a3a      	ldr	r2, [r7, #32]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f002 f9e0 	bl	8007b40 <I2C_MasterRequestWrite>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e08d      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800578a:	2300      	movs	r3, #0
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80057a0:	e066      	b.n	8005870 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	6a39      	ldr	r1, [r7, #32]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f002 fe5a 	bl	8008460 <I2C_WaitOnTXEFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d107      	bne.n	80057ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e06b      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	781a      	ldrb	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b04      	cmp	r3, #4
 800580a:	d11b      	bne.n	8005844 <HAL_I2C_Master_Transmit+0x188>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005810:	2b00      	cmp	r3, #0
 8005812:	d017      	beq.n	8005844 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	781a      	ldrb	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	6a39      	ldr	r1, [r7, #32]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f002 fe51 	bl	80084f0 <I2C_WaitOnBTFFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00d      	beq.n	8005870 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	2b04      	cmp	r3, #4
 800585a:	d107      	bne.n	800586c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800586a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e01a      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005874:	2b00      	cmp	r3, #0
 8005876:	d194      	bne.n	80057a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	00100002 	.word	0x00100002
 80058b4:	ffff0000 	.word	0xffff0000

080058b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08c      	sub	sp, #48	; 0x30
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	607a      	str	r2, [r7, #4]
 80058c2:	461a      	mov	r2, r3
 80058c4:	460b      	mov	r3, r1
 80058c6:	817b      	strh	r3, [r7, #10]
 80058c8:	4613      	mov	r3, r2
 80058ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058cc:	f7ff f8f4 	bl	8004ab8 <HAL_GetTick>
 80058d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b20      	cmp	r3, #32
 80058dc:	f040 8217 	bne.w	8005d0e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	2319      	movs	r3, #25
 80058e6:	2201      	movs	r2, #1
 80058e8:	497c      	ldr	r1, [pc, #496]	; (8005adc <HAL_I2C_Master_Receive+0x224>)
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f002 fc9e 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
 80058f8:	e20a      	b.n	8005d10 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_I2C_Master_Receive+0x50>
 8005904:	2302      	movs	r3, #2
 8005906:	e203      	b.n	8005d10 <HAL_I2C_Master_Receive+0x458>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b01      	cmp	r3, #1
 800591c:	d007      	beq.n	800592e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 0201 	orr.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800593c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2222      	movs	r2, #34	; 0x22
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2210      	movs	r2, #16
 800594a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	893a      	ldrh	r2, [r7, #8]
 800595e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4a5c      	ldr	r2, [pc, #368]	; (8005ae0 <HAL_I2C_Master_Receive+0x228>)
 800596e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005970:	8979      	ldrh	r1, [r7, #10]
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f002 f964 	bl	8007c44 <I2C_MasterRequestRead>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e1c4      	b.n	8005d10 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598a:	2b00      	cmp	r3, #0
 800598c:	d113      	bne.n	80059b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800598e:	2300      	movs	r3, #0
 8005990:	623b      	str	r3, [r7, #32]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	623b      	str	r3, [r7, #32]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	623b      	str	r3, [r7, #32]
 80059a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	e198      	b.n	8005ce8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d11b      	bne.n	80059f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	61fb      	str	r3, [r7, #28]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e178      	b.n	8005ce8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d11b      	bne.n	8005a36 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	e158      	b.n	8005ce8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a5c:	e144      	b.n	8005ce8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	f200 80f1 	bhi.w	8005c4a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d123      	bne.n	8005ab8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f002 fdb5 	bl	80085e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e145      	b.n	8005d10 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ab6:	e117      	b.n	8005ce8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d14e      	bne.n	8005b5e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	4906      	ldr	r1, [pc, #24]	; (8005ae4 <HAL_I2C_Master_Receive+0x22c>)
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f002 fbae 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e11a      	b.n	8005d10 <HAL_I2C_Master_Receive+0x458>
 8005ada:	bf00      	nop
 8005adc:	00100002 	.word	0x00100002
 8005ae0:	ffff0000 	.word	0xffff0000
 8005ae4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b5c:	e0c4      	b.n	8005ce8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	2200      	movs	r2, #0
 8005b66:	496c      	ldr	r1, [pc, #432]	; (8005d18 <HAL_I2C_Master_Receive+0x460>)
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f002 fb5f 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e0cb      	b.n	8005d10 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	4955      	ldr	r1, [pc, #340]	; (8005d18 <HAL_I2C_Master_Receive+0x460>)
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f002 fb31 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e09d      	b.n	8005d10 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c48:	e04e      	b.n	8005ce8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f002 fcc8 	bl	80085e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e058      	b.n	8005d10 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691a      	ldr	r2, [r3, #16]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d124      	bne.n	8005ce8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d107      	bne.n	8005cb6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f47f aeb6 	bne.w	8005a5e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e000      	b.n	8005d10 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005d0e:	2302      	movs	r3, #2
  }
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3728      	adds	r7, #40	; 0x28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	00010004 	.word	0x00010004

08005d1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af02      	add	r7, sp, #8
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	4608      	mov	r0, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	817b      	strh	r3, [r7, #10]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	813b      	strh	r3, [r7, #8]
 8005d32:	4613      	mov	r3, r2
 8005d34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d36:	f7fe febf 	bl	8004ab8 <HAL_GetTick>
 8005d3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	f040 80d9 	bne.w	8005efc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	2319      	movs	r3, #25
 8005d50:	2201      	movs	r2, #1
 8005d52:	496d      	ldr	r1, [pc, #436]	; (8005f08 <HAL_I2C_Mem_Write+0x1ec>)
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f002 fa69 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005d60:	2302      	movs	r3, #2
 8005d62:	e0cc      	b.n	8005efe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_I2C_Mem_Write+0x56>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e0c5      	b.n	8005efe <HAL_I2C_Mem_Write+0x1e2>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d007      	beq.n	8005d98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2221      	movs	r2, #33	; 0x21
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2240      	movs	r2, #64	; 0x40
 8005db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a3a      	ldr	r2, [r7, #32]
 8005dc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4a4d      	ldr	r2, [pc, #308]	; (8005f0c <HAL_I2C_Mem_Write+0x1f0>)
 8005dd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dda:	88f8      	ldrh	r0, [r7, #6]
 8005ddc:	893a      	ldrh	r2, [r7, #8]
 8005dde:	8979      	ldrh	r1, [r7, #10]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	4603      	mov	r3, r0
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f001 fff8 	bl	8007de0 <I2C_RequestMemoryWrite>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d052      	beq.n	8005e9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e081      	b.n	8005efe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f002 fb2e 	bl	8008460 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00d      	beq.n	8005e26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d107      	bne.n	8005e22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e06b      	b.n	8005efe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	781a      	ldrb	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d11b      	bne.n	8005e9c <HAL_I2C_Mem_Write+0x180>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d017      	beq.n	8005e9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	781a      	ldrb	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1aa      	bne.n	8005dfa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f002 fb21 	bl	80084f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00d      	beq.n	8005ed0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d107      	bne.n	8005ecc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e016      	b.n	8005efe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e000      	b.n	8005efe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005efc:	2302      	movs	r3, #2
  }
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	00100002 	.word	0x00100002
 8005f0c:	ffff0000 	.word	0xffff0000

08005f10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08c      	sub	sp, #48	; 0x30
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	4608      	mov	r0, r1
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4603      	mov	r3, r0
 8005f20:	817b      	strh	r3, [r7, #10]
 8005f22:	460b      	mov	r3, r1
 8005f24:	813b      	strh	r3, [r7, #8]
 8005f26:	4613      	mov	r3, r2
 8005f28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f2a:	f7fe fdc5 	bl	8004ab8 <HAL_GetTick>
 8005f2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	f040 8208 	bne.w	800634e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	2319      	movs	r3, #25
 8005f44:	2201      	movs	r2, #1
 8005f46:	497b      	ldr	r1, [pc, #492]	; (8006134 <HAL_I2C_Mem_Read+0x224>)
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f002 f96f 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005f54:	2302      	movs	r3, #2
 8005f56:	e1fb      	b.n	8006350 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <HAL_I2C_Mem_Read+0x56>
 8005f62:	2302      	movs	r3, #2
 8005f64:	e1f4      	b.n	8006350 <HAL_I2C_Mem_Read+0x440>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d007      	beq.n	8005f8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2222      	movs	r2, #34	; 0x22
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2240      	movs	r2, #64	; 0x40
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4a5b      	ldr	r2, [pc, #364]	; (8006138 <HAL_I2C_Mem_Read+0x228>)
 8005fcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fce:	88f8      	ldrh	r0, [r7, #6]
 8005fd0:	893a      	ldrh	r2, [r7, #8]
 8005fd2:	8979      	ldrh	r1, [r7, #10]
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	4603      	mov	r3, r0
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f001 ff94 	bl	8007f0c <I2C_RequestMemoryRead>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e1b0      	b.n	8006350 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d113      	bne.n	800601e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	623b      	str	r3, [r7, #32]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	623b      	str	r3, [r7, #32]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	623b      	str	r3, [r7, #32]
 800600a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	e184      	b.n	8006328 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006022:	2b01      	cmp	r3, #1
 8006024:	d11b      	bne.n	800605e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006036:	2300      	movs	r3, #0
 8006038:	61fb      	str	r3, [r7, #28]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	61fb      	str	r3, [r7, #28]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	61fb      	str	r3, [r7, #28]
 800604a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	e164      	b.n	8006328 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006062:	2b02      	cmp	r3, #2
 8006064:	d11b      	bne.n	800609e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006074:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006084:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006086:	2300      	movs	r3, #0
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	e144      	b.n	8006328 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800609e:	2300      	movs	r3, #0
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	617b      	str	r3, [r7, #20]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060b4:	e138      	b.n	8006328 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	f200 80f1 	bhi.w	80062a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d123      	bne.n	8006110 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f002 fa89 	bl	80085e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e139      	b.n	8006350 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006104:	b29b      	uxth	r3, r3
 8006106:	3b01      	subs	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800610e:	e10b      	b.n	8006328 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006114:	2b02      	cmp	r3, #2
 8006116:	d14e      	bne.n	80061b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	2200      	movs	r2, #0
 8006120:	4906      	ldr	r1, [pc, #24]	; (800613c <HAL_I2C_Mem_Read+0x22c>)
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f002 f882 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d008      	beq.n	8006140 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e10e      	b.n	8006350 <HAL_I2C_Mem_Read+0x440>
 8006132:	bf00      	nop
 8006134:	00100002 	.word	0x00100002
 8006138:	ffff0000 	.word	0xffff0000
 800613c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800614e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061b4:	e0b8      	b.n	8006328 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	2200      	movs	r2, #0
 80061be:	4966      	ldr	r1, [pc, #408]	; (8006358 <HAL_I2C_Mem_Read+0x448>)
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f002 f833 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0bf      	b.n	8006350 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	2200      	movs	r2, #0
 800621a:	494f      	ldr	r1, [pc, #316]	; (8006358 <HAL_I2C_Mem_Read+0x448>)
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f002 f805 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e091      	b.n	8006350 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800623a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006258:	3b01      	subs	r3, #1
 800625a:	b29a      	uxth	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006296:	b29b      	uxth	r3, r3
 8006298:	3b01      	subs	r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062a0:	e042      	b.n	8006328 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f002 f99c 	bl	80085e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e04c      	b.n	8006350 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	d118      	bne.n	8006328 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631e:	b29b      	uxth	r3, r3
 8006320:	3b01      	subs	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632c:	2b00      	cmp	r3, #0
 800632e:	f47f aec2 	bne.w	80060b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	e000      	b.n	8006350 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800634e:	2302      	movs	r3, #2
  }
}
 8006350:	4618      	mov	r0, r3
 8006352:	3728      	adds	r7, #40	; 0x28
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	00010004 	.word	0x00010004

0800635c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	460b      	mov	r3, r1
 800636a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800636c:	f7fe fba4 	bl	8004ab8 <HAL_GetTick>
 8006370:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b20      	cmp	r3, #32
 8006380:	f040 8111 	bne.w	80065a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	2319      	movs	r3, #25
 800638a:	2201      	movs	r2, #1
 800638c:	4988      	ldr	r1, [pc, #544]	; (80065b0 <HAL_I2C_IsDeviceReady+0x254>)
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f001 ff4c 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800639a:	2302      	movs	r3, #2
 800639c:	e104      	b.n	80065a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_I2C_IsDeviceReady+0x50>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e0fd      	b.n	80065a8 <HAL_I2C_IsDeviceReady+0x24c>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d007      	beq.n	80063d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f042 0201 	orr.w	r2, r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2224      	movs	r2, #36	; 0x24
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a70      	ldr	r2, [pc, #448]	; (80065b4 <HAL_I2C_IsDeviceReady+0x258>)
 80063f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006404:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2200      	movs	r2, #0
 800640e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f001 ff0a 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00d      	beq.n	800643a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800642c:	d103      	bne.n	8006436 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006434:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e0b6      	b.n	80065a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800643a:	897b      	ldrh	r3, [r7, #10]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	461a      	mov	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006448:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800644a:	f7fe fb35 	bl	8004ab8 <HAL_GetTick>
 800644e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b02      	cmp	r3, #2
 800645c:	bf0c      	ite	eq
 800645e:	2301      	moveq	r3, #1
 8006460:	2300      	movne	r3, #0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006474:	bf0c      	ite	eq
 8006476:	2301      	moveq	r3, #1
 8006478:	2300      	movne	r3, #0
 800647a:	b2db      	uxtb	r3, r3
 800647c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800647e:	e025      	b.n	80064cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006480:	f7fe fb1a 	bl	8004ab8 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d302      	bcc.n	8006496 <HAL_I2C_IsDeviceReady+0x13a>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d103      	bne.n	800649e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	22a0      	movs	r2, #160	; 0xa0
 800649a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	bf0c      	ite	eq
 80064ac:	2301      	moveq	r3, #1
 80064ae:	2300      	movne	r3, #0
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c2:	bf0c      	ite	eq
 80064c4:	2301      	moveq	r3, #1
 80064c6:	2300      	movne	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2ba0      	cmp	r3, #160	; 0xa0
 80064d6:	d005      	beq.n	80064e4 <HAL_I2C_IsDeviceReady+0x188>
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d102      	bne.n	80064e4 <HAL_I2C_IsDeviceReady+0x188>
 80064de:	7dbb      	ldrb	r3, [r7, #22]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0cd      	beq.n	8006480 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d129      	bne.n	800654e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006508:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800650a:	2300      	movs	r3, #0
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	613b      	str	r3, [r7, #16]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	613b      	str	r3, [r7, #16]
 800651e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	2319      	movs	r3, #25
 8006526:	2201      	movs	r2, #1
 8006528:	4921      	ldr	r1, [pc, #132]	; (80065b0 <HAL_I2C_IsDeviceReady+0x254>)
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f001 fe7e 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e036      	b.n	80065a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	e02c      	b.n	80065a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800655c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006566:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	2319      	movs	r3, #25
 800656e:	2201      	movs	r2, #1
 8006570:	490f      	ldr	r1, [pc, #60]	; (80065b0 <HAL_I2C_IsDeviceReady+0x254>)
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f001 fe5a 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e012      	b.n	80065a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	3301      	adds	r3, #1
 8006586:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	429a      	cmp	r2, r3
 800658e:	f4ff af32 	bcc.w	80063f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2220      	movs	r2, #32
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80065a6:	2302      	movs	r3, #2
  }
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3720      	adds	r7, #32
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	00100002 	.word	0x00100002
 80065b4:	ffff0000 	.word	0xffff0000

080065b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b088      	sub	sp, #32
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d003      	beq.n	80065f0 <HAL_I2C_EV_IRQHandler+0x38>
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	f040 80c1 	bne.w	8006772 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10d      	bne.n	8006626 <HAL_I2C_EV_IRQHandler+0x6e>
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006610:	d003      	beq.n	800661a <HAL_I2C_EV_IRQHandler+0x62>
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006618:	d101      	bne.n	800661e <HAL_I2C_EV_IRQHandler+0x66>
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <HAL_I2C_EV_IRQHandler+0x68>
 800661e:	2300      	movs	r3, #0
 8006620:	2b01      	cmp	r3, #1
 8006622:	f000 8132 	beq.w	800688a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00c      	beq.n	800664a <HAL_I2C_EV_IRQHandler+0x92>
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	0a5b      	lsrs	r3, r3, #9
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d006      	beq.n	800664a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f002 f85c 	bl	80086fa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fcd6 	bl	8006ff4 <I2C_Master_SB>
 8006648:	e092      	b.n	8006770 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	08db      	lsrs	r3, r3, #3
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <HAL_I2C_EV_IRQHandler+0xb2>
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	0a5b      	lsrs	r3, r3, #9
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fd4b 	bl	80070fe <I2C_Master_ADD10>
 8006668:	e082      	b.n	8006770 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <HAL_I2C_EV_IRQHandler+0xd2>
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	0a5b      	lsrs	r3, r3, #9
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fd64 	bl	8007150 <I2C_Master_ADDR>
 8006688:	e072      	b.n	8006770 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	089b      	lsrs	r3, r3, #2
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d03b      	beq.n	800670e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a4:	f000 80f3 	beq.w	800688e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	09db      	lsrs	r3, r3, #7
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00f      	beq.n	80066d4 <HAL_I2C_EV_IRQHandler+0x11c>
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	0a9b      	lsrs	r3, r3, #10
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d009      	beq.n	80066d4 <HAL_I2C_EV_IRQHandler+0x11c>
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	089b      	lsrs	r3, r3, #2
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f942 	bl	8006956 <I2C_MasterTransmit_TXE>
 80066d2:	e04d      	b.n	8006770 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	089b      	lsrs	r3, r3, #2
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80d6 	beq.w	800688e <HAL_I2C_EV_IRQHandler+0x2d6>
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	0a5b      	lsrs	r3, r3, #9
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 80cf 	beq.w	800688e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	2b21      	cmp	r3, #33	; 0x21
 80066f4:	d103      	bne.n	80066fe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f9c9 	bl	8006a8e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066fc:	e0c7      	b.n	800688e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	f040 80c4 	bne.w	800688e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa37 	bl	8006b7a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800670c:	e0bf      	b.n	800688e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800671c:	f000 80b7 	beq.w	800688e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	099b      	lsrs	r3, r3, #6
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00f      	beq.n	800674c <HAL_I2C_EV_IRQHandler+0x194>
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	0a9b      	lsrs	r3, r3, #10
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d009      	beq.n	800674c <HAL_I2C_EV_IRQHandler+0x194>
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	089b      	lsrs	r3, r3, #2
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d103      	bne.n	800674c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fab0 	bl	8006caa <I2C_MasterReceive_RXNE>
 800674a:	e011      	b.n	8006770 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	089b      	lsrs	r3, r3, #2
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 809a 	beq.w	800688e <HAL_I2C_EV_IRQHandler+0x2d6>
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	0a5b      	lsrs	r3, r3, #9
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8093 	beq.w	800688e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fb59 	bl	8006e20 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800676e:	e08e      	b.n	800688e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006770:	e08d      	b.n	800688e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	2b00      	cmp	r3, #0
 8006778:	d004      	beq.n	8006784 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	61fb      	str	r3, [r7, #28]
 8006782:	e007      	b.n	8006794 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	085b      	lsrs	r3, r3, #1
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d012      	beq.n	80067c6 <HAL_I2C_EV_IRQHandler+0x20e>
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	0a5b      	lsrs	r3, r3, #9
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00c      	beq.n	80067c6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80067bc:	69b9      	ldr	r1, [r7, #24]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 ff12 	bl	80075e8 <I2C_Slave_ADDR>
 80067c4:	e066      	b.n	8006894 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	091b      	lsrs	r3, r3, #4
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d009      	beq.n	80067e6 <HAL_I2C_EV_IRQHandler+0x22e>
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	0a5b      	lsrs	r3, r3, #9
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 ff4c 	bl	800767c <I2C_Slave_STOPF>
 80067e4:	e056      	b.n	8006894 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80067e6:	7bbb      	ldrb	r3, [r7, #14]
 80067e8:	2b21      	cmp	r3, #33	; 0x21
 80067ea:	d002      	beq.n	80067f2 <HAL_I2C_EV_IRQHandler+0x23a>
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
 80067ee:	2b29      	cmp	r3, #41	; 0x29
 80067f0:	d125      	bne.n	800683e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	09db      	lsrs	r3, r3, #7
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00f      	beq.n	800681e <HAL_I2C_EV_IRQHandler+0x266>
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	0a9b      	lsrs	r3, r3, #10
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d009      	beq.n	800681e <HAL_I2C_EV_IRQHandler+0x266>
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	089b      	lsrs	r3, r3, #2
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d103      	bne.n	800681e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fe2a 	bl	8007470 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800681c:	e039      	b.n	8006892 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	089b      	lsrs	r3, r3, #2
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d033      	beq.n	8006892 <HAL_I2C_EV_IRQHandler+0x2da>
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	0a5b      	lsrs	r3, r3, #9
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d02d      	beq.n	8006892 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fe57 	bl	80074ea <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800683c:	e029      	b.n	8006892 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	099b      	lsrs	r3, r3, #6
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00f      	beq.n	800686a <HAL_I2C_EV_IRQHandler+0x2b2>
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	0a9b      	lsrs	r3, r3, #10
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d009      	beq.n	800686a <HAL_I2C_EV_IRQHandler+0x2b2>
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	089b      	lsrs	r3, r3, #2
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d103      	bne.n	800686a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fe61 	bl	800752a <I2C_SlaveReceive_RXNE>
 8006868:	e014      	b.n	8006894 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	089b      	lsrs	r3, r3, #2
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00e      	beq.n	8006894 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	0a5b      	lsrs	r3, r3, #9
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d008      	beq.n	8006894 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fe8f 	bl	80075a6 <I2C_SlaveReceive_BTF>
 8006888:	e004      	b.n	8006894 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800688a:	bf00      	nop
 800688c:	e002      	b.n	8006894 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800688e:	bf00      	nop
 8006890:	e000      	b.n	8006894 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006892:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006894:	3720      	adds	r7, #32
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bc80      	pop	{r7}
 80068aa:	4770      	bx	lr

080068ac <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bc80      	pop	{r7}
 80068bc:	4770      	bx	lr

080068be <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr

080068d0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr

080068e2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	460b      	mov	r3, r1
 80068ec:	70fb      	strb	r3, [r7, #3]
 80068ee:	4613      	mov	r3, r2
 80068f0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr

080068fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr

0800690e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr

08006920 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	bc80      	pop	{r7}
 8006942:	4770      	bx	lr

08006944 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	bc80      	pop	{r7}
 8006954:	4770      	bx	lr

08006956 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b084      	sub	sp, #16
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006964:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800696c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006972:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006978:	2b00      	cmp	r3, #0
 800697a:	d150      	bne.n	8006a1e <I2C_MasterTransmit_TXE+0xc8>
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b21      	cmp	r3, #33	; 0x21
 8006980:	d14d      	bne.n	8006a1e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b08      	cmp	r3, #8
 8006986:	d01d      	beq.n	80069c4 <I2C_MasterTransmit_TXE+0x6e>
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b20      	cmp	r3, #32
 800698c:	d01a      	beq.n	80069c4 <I2C_MasterTransmit_TXE+0x6e>
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006994:	d016      	beq.n	80069c4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069a4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2211      	movs	r2, #17
 80069aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff ff6c 	bl	800689a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069c2:	e060      	b.n	8006a86 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069d2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	d107      	bne.n	8006a0e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff ff81 	bl	800690e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a0c:	e03b      	b.n	8006a86 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff ff3f 	bl	800689a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a1c:	e033      	b.n	8006a86 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	2b21      	cmp	r3, #33	; 0x21
 8006a22:	d005      	beq.n	8006a30 <I2C_MasterTransmit_TXE+0xda>
 8006a24:	7bbb      	ldrb	r3, [r7, #14]
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	d12d      	bne.n	8006a86 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	2b22      	cmp	r3, #34	; 0x22
 8006a2e:	d12a      	bne.n	8006a86 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d108      	bne.n	8006a4c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a48:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006a4a:	e01c      	b.n	8006a86 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b40      	cmp	r3, #64	; 0x40
 8006a56:	d103      	bne.n	8006a60 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f88e 	bl	8006b7a <I2C_MemoryTransmit_TXE_BTF>
}
 8006a5e:	e012      	b.n	8006a86 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	781a      	ldrb	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a84:	e7ff      	b.n	8006a86 <I2C_MasterTransmit_TXE+0x130>
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b21      	cmp	r3, #33	; 0x21
 8006aa6:	d164      	bne.n	8006b72 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d012      	beq.n	8006ad8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	781a      	ldrb	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006ad6:	e04c      	b.n	8006b72 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d01d      	beq.n	8006b1a <I2C_MasterTransmit_BTF+0x8c>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	d01a      	beq.n	8006b1a <I2C_MasterTransmit_BTF+0x8c>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006aea:	d016      	beq.n	8006b1a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006afa:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2211      	movs	r2, #17
 8006b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7ff fec1 	bl	800689a <HAL_I2C_MasterTxCpltCallback>
}
 8006b18:	e02b      	b.n	8006b72 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b28:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b38:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b40      	cmp	r3, #64	; 0x40
 8006b52:	d107      	bne.n	8006b64 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7ff fed6 	bl	800690e <HAL_I2C_MemTxCpltCallback>
}
 8006b62:	e006      	b.n	8006b72 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff fe94 	bl	800689a <HAL_I2C_MasterTxCpltCallback>
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b88:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d11d      	bne.n	8006bce <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d10b      	bne.n	8006bb2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006baa:	1c9a      	adds	r2, r3, #2
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006bb0:	e077      	b.n	8006ca2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	121b      	asrs	r3, r3, #8
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006bcc:	e069      	b.n	8006ca2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d10b      	bne.n	8006bee <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006bec:	e059      	b.n	8006ca2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d152      	bne.n	8006c9c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b22      	cmp	r3, #34	; 0x22
 8006bfa:	d10d      	bne.n	8006c18 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c0a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c16:	e044      	b.n	8006ca2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d015      	beq.n	8006c4e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	2b21      	cmp	r3, #33	; 0x21
 8006c26:	d112      	bne.n	8006c4e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	781a      	ldrb	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c4c:	e029      	b.n	8006ca2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d124      	bne.n	8006ca2 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	2b21      	cmp	r3, #33	; 0x21
 8006c5c:	d121      	bne.n	8006ca2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c6c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c7c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff fe3a 	bl	800690e <HAL_I2C_MemTxCpltCallback>
}
 8006c9a:	e002      	b.n	8006ca2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7fe fcf8 	bl	8005692 <I2C_Flush_DR>
}
 8006ca2:	bf00      	nop
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b22      	cmp	r3, #34	; 0x22
 8006cbc:	f040 80ac 	bne.w	8006e18 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d921      	bls.n	8006d12 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	f040 808c 	bne.w	8006e18 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d0e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006d10:	e082      	b.n	8006e18 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d075      	beq.n	8006e06 <I2C_MasterReceive_RXNE+0x15c>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d002      	beq.n	8006d26 <I2C_MasterReceive_RXNE+0x7c>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d16f      	bne.n	8006e06 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 fc2a 	bl	8008580 <I2C_WaitOnSTOPRequestThroughIT>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d142      	bne.n	8006db8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d40:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d50:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	d10a      	bne.n	8006da2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff fdc0 	bl	8006920 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006da0:	e03a      	b.n	8006e18 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2212      	movs	r2, #18
 8006dae:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff fd7b 	bl	80068ac <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006db6:	e02f      	b.n	8006e18 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006dc6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691a      	ldr	r2, [r3, #16]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff fd97 	bl	8006932 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e04:	e008      	b.n	8006e18 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e14:	605a      	str	r2, [r3, #4]
}
 8006e16:	e7ff      	b.n	8006e18 <I2C_MasterReceive_RXNE+0x16e>
 8006e18:	bf00      	nop
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d11b      	bne.n	8006e70 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e46:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006e6e:	e0bd      	b.n	8006fec <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d129      	bne.n	8006ece <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e88:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d00a      	beq.n	8006ea6 <I2C_MasterReceive_BTF+0x86>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d007      	beq.n	8006ea6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006ecc:	e08e      	b.n	8006fec <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d176      	bne.n	8006fc6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d002      	beq.n	8006ee4 <I2C_MasterReceive_BTF+0xc4>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b10      	cmp	r3, #16
 8006ee2:	d108      	bne.n	8006ef6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	e019      	b.n	8006f2a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d002      	beq.n	8006f02 <I2C_MasterReceive_BTF+0xe2>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d108      	bne.n	8006f14 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	e00a      	b.n	8006f2a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b10      	cmp	r3, #16
 8006f18:	d007      	beq.n	8006f2a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f28:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691a      	ldr	r2, [r3, #16]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691a      	ldr	r2, [r3, #16]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006f84:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	d10a      	bne.n	8006fb0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff fcb9 	bl	8006920 <HAL_I2C_MemRxCpltCallback>
}
 8006fae:	e01d      	b.n	8006fec <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2212      	movs	r2, #18
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff fc74 	bl	80068ac <HAL_I2C_MasterRxCpltCallback>
}
 8006fc4:	e012      	b.n	8006fec <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b40      	cmp	r3, #64	; 0x40
 8007006:	d117      	bne.n	8007038 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700c:	2b00      	cmp	r3, #0
 800700e:	d109      	bne.n	8007024 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007014:	b2db      	uxtb	r3, r3
 8007016:	461a      	mov	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007020:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007022:	e067      	b.n	80070f4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007028:	b2db      	uxtb	r3, r3
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	b2da      	uxtb	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	611a      	str	r2, [r3, #16]
}
 8007036:	e05d      	b.n	80070f4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007040:	d133      	bne.n	80070aa <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b21      	cmp	r3, #33	; 0x21
 800704c:	d109      	bne.n	8007062 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007052:	b2db      	uxtb	r3, r3
 8007054:	461a      	mov	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800705e:	611a      	str	r2, [r3, #16]
 8007060:	e008      	b.n	8007074 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007066:	b2db      	uxtb	r3, r3
 8007068:	f043 0301 	orr.w	r3, r3, #1
 800706c:	b2da      	uxtb	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <I2C_Master_SB+0x92>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007082:	2b00      	cmp	r3, #0
 8007084:	d108      	bne.n	8007098 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	2b00      	cmp	r3, #0
 800708c:	d032      	beq.n	80070f4 <I2C_Master_SB+0x100>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007094:	2b00      	cmp	r3, #0
 8007096:	d02d      	beq.n	80070f4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070a6:	605a      	str	r2, [r3, #4]
}
 80070a8:	e024      	b.n	80070f4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10e      	bne.n	80070d0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	11db      	asrs	r3, r3, #7
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 0306 	and.w	r3, r3, #6
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	f063 030f 	orn	r3, r3, #15
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	611a      	str	r2, [r3, #16]
}
 80070ce:	e011      	b.n	80070f4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d10d      	bne.n	80070f4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070dc:	b29b      	uxth	r3, r3
 80070de:	11db      	asrs	r3, r3, #7
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	f003 0306 	and.w	r3, r3, #6
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f063 030e 	orn	r3, r3, #14
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	611a      	str	r2, [r3, #16]
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bc80      	pop	{r7}
 80070fc:	4770      	bx	lr

080070fe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710a:	b2da      	uxtb	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007116:	2b00      	cmp	r3, #0
 8007118:	d004      	beq.n	8007124 <I2C_Master_ADD10+0x26>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	2b00      	cmp	r3, #0
 8007122:	d108      	bne.n	8007136 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00c      	beq.n	8007146 <I2C_Master_ADD10+0x48>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007132:	2b00      	cmp	r3, #0
 8007134:	d007      	beq.n	8007146 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007144:	605a      	str	r2, [r3, #4]
  }
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	bc80      	pop	{r7}
 800714e:	4770      	bx	lr

08007150 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007150:	b480      	push	{r7}
 8007152:	b091      	sub	sp, #68	; 0x44
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800715e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b22      	cmp	r3, #34	; 0x22
 8007178:	f040 8169 	bne.w	800744e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10f      	bne.n	80071a4 <I2C_Master_ADDR+0x54>
 8007184:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007188:	2b40      	cmp	r3, #64	; 0x40
 800718a:	d10b      	bne.n	80071a4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800718c:	2300      	movs	r3, #0
 800718e:	633b      	str	r3, [r7, #48]	; 0x30
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	633b      	str	r3, [r7, #48]	; 0x30
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	633b      	str	r3, [r7, #48]	; 0x30
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	e160      	b.n	8007466 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d11d      	bne.n	80071e8 <I2C_Master_ADDR+0x98>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80071b4:	d118      	bne.n	80071e8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071b6:	2300      	movs	r3, #0
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071da:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	651a      	str	r2, [r3, #80]	; 0x50
 80071e6:	e13e      	b.n	8007466 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d113      	bne.n	800721a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f2:	2300      	movs	r3, #0
 80071f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	62bb      	str	r3, [r7, #40]	; 0x28
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	e115      	b.n	8007446 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b01      	cmp	r3, #1
 8007222:	f040 808a 	bne.w	800733a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800722c:	d137      	bne.n	800729e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800723c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800724c:	d113      	bne.n	8007276 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800725c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800725e:	2300      	movs	r3, #0
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	627b      	str	r3, [r7, #36]	; 0x24
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	e0e7      	b.n	8007446 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007276:	2300      	movs	r3, #0
 8007278:	623b      	str	r3, [r7, #32]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	623b      	str	r3, [r7, #32]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	623b      	str	r3, [r7, #32]
 800728a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	e0d3      	b.n	8007446 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800729e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d02e      	beq.n	8007302 <I2C_Master_ADDR+0x1b2>
 80072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a6:	2b20      	cmp	r3, #32
 80072a8:	d02b      	beq.n	8007302 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80072aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ac:	2b12      	cmp	r3, #18
 80072ae:	d102      	bne.n	80072b6 <I2C_Master_ADDR+0x166>
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d125      	bne.n	8007302 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	d00e      	beq.n	80072da <I2C_Master_ADDR+0x18a>
 80072bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d00b      	beq.n	80072da <I2C_Master_ADDR+0x18a>
 80072c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c4:	2b10      	cmp	r3, #16
 80072c6:	d008      	beq.n	80072da <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	e007      	b.n	80072ea <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ea:	2300      	movs	r3, #0
 80072ec:	61fb      	str	r3, [r7, #28]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	61fb      	str	r3, [r7, #28]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	61fb      	str	r3, [r7, #28]
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	e0a1      	b.n	8007446 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007310:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007312:	2300      	movs	r3, #0
 8007314:	61bb      	str	r3, [r7, #24]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	61bb      	str	r3, [r7, #24]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	e085      	b.n	8007446 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733e:	b29b      	uxth	r3, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d14d      	bne.n	80073e0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007346:	2b04      	cmp	r3, #4
 8007348:	d016      	beq.n	8007378 <I2C_Master_ADDR+0x228>
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	2b02      	cmp	r3, #2
 800734e:	d013      	beq.n	8007378 <I2C_Master_ADDR+0x228>
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	2b10      	cmp	r3, #16
 8007354:	d010      	beq.n	8007378 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007364:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	e007      	b.n	8007388 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007386:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007396:	d117      	bne.n	80073c8 <I2C_Master_ADDR+0x278>
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800739e:	d00b      	beq.n	80073b8 <I2C_Master_ADDR+0x268>
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d008      	beq.n	80073b8 <I2C_Master_ADDR+0x268>
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d005      	beq.n	80073b8 <I2C_Master_ADDR+0x268>
 80073ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ae:	2b10      	cmp	r3, #16
 80073b0:	d002      	beq.n	80073b8 <I2C_Master_ADDR+0x268>
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	2b20      	cmp	r3, #32
 80073b6:	d107      	bne.n	80073c8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073c6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073c8:	2300      	movs	r3, #0
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	e032      	b.n	8007446 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073ee:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073fe:	d117      	bne.n	8007430 <I2C_Master_ADDR+0x2e0>
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007406:	d00b      	beq.n	8007420 <I2C_Master_ADDR+0x2d0>
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	2b01      	cmp	r3, #1
 800740c:	d008      	beq.n	8007420 <I2C_Master_ADDR+0x2d0>
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	2b08      	cmp	r3, #8
 8007412:	d005      	beq.n	8007420 <I2C_Master_ADDR+0x2d0>
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	2b10      	cmp	r3, #16
 8007418:	d002      	beq.n	8007420 <I2C_Master_ADDR+0x2d0>
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	2b20      	cmp	r3, #32
 800741e:	d107      	bne.n	8007430 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800742e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007430:	2300      	movs	r3, #0
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	613b      	str	r3, [r7, #16]
 8007444:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800744c:	e00b      	b.n	8007466 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	68fb      	ldr	r3, [r7, #12]
}
 8007464:	e7ff      	b.n	8007466 <I2C_Master_ADDR+0x316>
 8007466:	bf00      	nop
 8007468:	3744      	adds	r7, #68	; 0x44
 800746a:	46bd      	mov	sp, r7
 800746c:	bc80      	pop	{r7}
 800746e:	4770      	bx	lr

08007470 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800747e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007484:	b29b      	uxth	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d02b      	beq.n	80074e2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	781a      	ldrb	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	3b01      	subs	r3, #1
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d114      	bne.n	80074e2 <I2C_SlaveTransmit_TXE+0x72>
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	2b29      	cmp	r3, #41	; 0x29
 80074bc:	d111      	bne.n	80074e2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2221      	movs	r2, #33	; 0x21
 80074d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2228      	movs	r2, #40	; 0x28
 80074d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff f9ee 	bl	80068be <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80074e2:	bf00      	nop
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d011      	beq.n	8007520 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	781a      	ldrb	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007516:	b29b      	uxth	r3, r3
 8007518:	3b01      	subs	r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	bc80      	pop	{r7}
 8007528:	4770      	bx	lr

0800752a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007538:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800753e:	b29b      	uxth	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d02c      	beq.n	800759e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691a      	ldr	r2, [r3, #16]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	b2d2      	uxtb	r2, r2
 8007550:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007560:	b29b      	uxth	r3, r3
 8007562:	3b01      	subs	r3, #1
 8007564:	b29a      	uxth	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756e:	b29b      	uxth	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d114      	bne.n	800759e <I2C_SlaveReceive_RXNE+0x74>
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	2b2a      	cmp	r3, #42	; 0x2a
 8007578:	d111      	bne.n	800759e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007588:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2222      	movs	r2, #34	; 0x22
 800758e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2228      	movs	r2, #40	; 0x28
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7ff f999 	bl	80068d0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800759e:	bf00      	nop
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d012      	beq.n	80075de <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691a      	ldr	r2, [r3, #16]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	3b01      	subs	r3, #1
 80075d8:	b29a      	uxth	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr

080075e8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007602:	2b28      	cmp	r3, #40	; 0x28
 8007604:	d127      	bne.n	8007656 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007614:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	089b      	lsrs	r3, r3, #2
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007622:	2301      	movs	r3, #1
 8007624:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	09db      	lsrs	r3, r3, #7
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d103      	bne.n	800763a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	81bb      	strh	r3, [r7, #12]
 8007638:	e002      	b.n	8007640 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007648:	89ba      	ldrh	r2, [r7, #12]
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff f947 	bl	80068e2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007654:	e00e      	b.n	8007674 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007656:	2300      	movs	r3, #0
 8007658:	60bb      	str	r3, [r7, #8]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	60bb      	str	r3, [r7, #8]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	60bb      	str	r3, [r7, #8]
 800766a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007674:	bf00      	nop
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800769a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800769c:	2300      	movs	r3, #0
 800769e:	60bb      	str	r3, [r7, #8]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	60bb      	str	r3, [r7, #8]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0201 	orr.w	r2, r2, #1
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076d8:	d172      	bne.n	80077c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	2b22      	cmp	r3, #34	; 0x22
 80076de:	d002      	beq.n	80076e6 <I2C_Slave_STOPF+0x6a>
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	2b2a      	cmp	r3, #42	; 0x2a
 80076e4:	d135      	bne.n	8007752 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d005      	beq.n	800770a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	f043 0204 	orr.w	r2, r3, #4
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007718:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	4618      	mov	r0, r3
 8007720:	f7fd fb76 	bl	8004e10 <HAL_DMA_GetState>
 8007724:	4603      	mov	r3, r0
 8007726:	2b01      	cmp	r3, #1
 8007728:	d049      	beq.n	80077be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772e:	4a69      	ldr	r2, [pc, #420]	; (80078d4 <I2C_Slave_STOPF+0x258>)
 8007730:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	4618      	mov	r0, r3
 8007738:	f7fd fb29 	bl	8004d8e <HAL_DMA_Abort_IT>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d03d      	beq.n	80077be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007750:	e035      	b.n	80077be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	b29a      	uxth	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d005      	beq.n	8007776 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	f043 0204 	orr.w	r2, r3, #4
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007784:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778a:	4618      	mov	r0, r3
 800778c:	f7fd fb40 	bl	8004e10 <HAL_DMA_GetState>
 8007790:	4603      	mov	r3, r0
 8007792:	2b01      	cmp	r3, #1
 8007794:	d014      	beq.n	80077c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779a:	4a4e      	ldr	r2, [pc, #312]	; (80078d4 <I2C_Slave_STOPF+0x258>)
 800779c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fd faf3 	bl	8004d8e <HAL_DMA_Abort_IT>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d008      	beq.n	80077c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80077b8:	4610      	mov	r0, r2
 80077ba:	4798      	blx	r3
 80077bc:	e000      	b.n	80077c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d03e      	beq.n	8007848 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	f003 0304 	and.w	r3, r3, #4
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d112      	bne.n	80077fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	691a      	ldr	r2, [r3, #16]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007808:	2b40      	cmp	r3, #64	; 0x40
 800780a:	d112      	bne.n	8007832 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691a      	ldr	r2, [r3, #16]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	b2d2      	uxtb	r2, r2
 8007818:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007836:	b29b      	uxth	r3, r3
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007840:	f043 0204 	orr.w	r2, r3, #4
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f843 	bl	80078dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007856:	e039      	b.n	80078cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	2b2a      	cmp	r3, #42	; 0x2a
 800785c:	d109      	bne.n	8007872 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2228      	movs	r2, #40	; 0x28
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff f82f 	bl	80068d0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b28      	cmp	r3, #40	; 0x28
 800787c:	d111      	bne.n	80078a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a15      	ldr	r2, [pc, #84]	; (80078d8 <I2C_Slave_STOPF+0x25c>)
 8007882:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2220      	movs	r2, #32
 800788e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff f82e 	bl	80068fc <HAL_I2C_ListenCpltCallback>
}
 80078a0:	e014      	b.n	80078cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a6:	2b22      	cmp	r3, #34	; 0x22
 80078a8:	d002      	beq.n	80078b0 <I2C_Slave_STOPF+0x234>
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	2b22      	cmp	r3, #34	; 0x22
 80078ae:	d10d      	bne.n	80078cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7ff f802 	bl	80068d0 <HAL_I2C_SlaveRxCpltCallback>
}
 80078cc:	bf00      	nop
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	080080dd 	.word	0x080080dd
 80078d8:	ffff0000 	.word	0xffff0000

080078dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d002      	beq.n	8007900 <I2C_ITError+0x24>
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b40      	cmp	r3, #64	; 0x40
 80078fe:	d10a      	bne.n	8007916 <I2C_ITError+0x3a>
 8007900:	7bfb      	ldrb	r3, [r7, #15]
 8007902:	2b22      	cmp	r3, #34	; 0x22
 8007904:	d107      	bne.n	8007916 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007914:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800791c:	2b28      	cmp	r3, #40	; 0x28
 800791e:	d107      	bne.n	8007930 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2228      	movs	r2, #40	; 0x28
 800792a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800792e:	e015      	b.n	800795c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800793a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800793e:	d00a      	beq.n	8007956 <I2C_ITError+0x7a>
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	2b60      	cmp	r3, #96	; 0x60
 8007944:	d007      	beq.n	8007956 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2220      	movs	r2, #32
 800794a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800796a:	d162      	bne.n	8007a32 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800797a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007980:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b01      	cmp	r3, #1
 8007988:	d020      	beq.n	80079cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798e:	4a6a      	ldr	r2, [pc, #424]	; (8007b38 <I2C_ITError+0x25c>)
 8007990:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007996:	4618      	mov	r0, r3
 8007998:	f7fd f9f9 	bl	8004d8e <HAL_DMA_Abort_IT>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 8089 	beq.w	8007ab6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 0201 	bic.w	r2, r2, #1
 80079b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2220      	movs	r2, #32
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80079c6:	4610      	mov	r0, r2
 80079c8:	4798      	blx	r3
 80079ca:	e074      	b.n	8007ab6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	4a59      	ldr	r2, [pc, #356]	; (8007b38 <I2C_ITError+0x25c>)
 80079d2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fd f9d8 	bl	8004d8e <HAL_DMA_Abort_IT>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d068      	beq.n	8007ab6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b40      	cmp	r3, #64	; 0x40
 80079f0:	d10b      	bne.n	8007a0a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	691a      	ldr	r2, [r3, #16]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	b2d2      	uxtb	r2, r2
 80079fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0201 	bic.w	r2, r2, #1
 8007a18:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4798      	blx	r3
 8007a30:	e041      	b.n	8007ab6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b60      	cmp	r3, #96	; 0x60
 8007a3c:	d125      	bne.n	8007a8a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a56:	2b40      	cmp	r3, #64	; 0x40
 8007a58:	d10b      	bne.n	8007a72 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	b2d2      	uxtb	r2, r2
 8007a66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0201 	bic.w	r2, r2, #1
 8007a80:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7fe ff5e 	bl	8006944 <HAL_I2C_AbortCpltCallback>
 8007a88:	e015      	b.n	8007ab6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a94:	2b40      	cmp	r3, #64	; 0x40
 8007a96:	d10b      	bne.n	8007ab0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691a      	ldr	r2, [r3, #16]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7fe ff3e 	bl	8006932 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10e      	bne.n	8007ae4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d109      	bne.n	8007ae4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d104      	bne.n	8007ae4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d007      	beq.n	8007af4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007af2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d113      	bne.n	8007b30 <I2C_ITError+0x254>
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	2b28      	cmp	r3, #40	; 0x28
 8007b0c:	d110      	bne.n	8007b30 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a0a      	ldr	r2, [pc, #40]	; (8007b3c <I2C_ITError+0x260>)
 8007b12:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7fe fee6 	bl	80068fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b30:	bf00      	nop
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	080080dd 	.word	0x080080dd
 8007b3c:	ffff0000 	.word	0xffff0000

08007b40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b088      	sub	sp, #32
 8007b44:	af02      	add	r7, sp, #8
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	607a      	str	r2, [r7, #4]
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d006      	beq.n	8007b6a <I2C_MasterRequestWrite+0x2a>
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d003      	beq.n	8007b6a <I2C_MasterRequestWrite+0x2a>
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b68:	d108      	bne.n	8007b7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	e00b      	b.n	8007b94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b80:	2b12      	cmp	r3, #18
 8007b82:	d107      	bne.n	8007b94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 fb43 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00d      	beq.n	8007bc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bba:	d103      	bne.n	8007bc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e035      	b.n	8007c34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bd0:	d108      	bne.n	8007be4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007bd2:	897b      	ldrh	r3, [r7, #10]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007be0:	611a      	str	r2, [r3, #16]
 8007be2:	e01b      	b.n	8007c1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007be4:	897b      	ldrh	r3, [r7, #10]
 8007be6:	11db      	asrs	r3, r3, #7
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	f003 0306 	and.w	r3, r3, #6
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f063 030f 	orn	r3, r3, #15
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	490e      	ldr	r1, [pc, #56]	; (8007c3c <I2C_MasterRequestWrite+0xfc>)
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 fb8c 	bl	8008320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e010      	b.n	8007c34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007c12:	897b      	ldrh	r3, [r7, #10]
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	4907      	ldr	r1, [pc, #28]	; (8007c40 <I2C_MasterRequestWrite+0x100>)
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 fb7c 	bl	8008320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e000      	b.n	8007c34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	00010008 	.word	0x00010008
 8007c40:	00010002 	.word	0x00010002

08007c44 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	607a      	str	r2, [r7, #4]
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	460b      	mov	r3, r1
 8007c52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c68:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d006      	beq.n	8007c7e <I2C_MasterRequestRead+0x3a>
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d003      	beq.n	8007c7e <I2C_MasterRequestRead+0x3a>
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c7c:	d108      	bne.n	8007c90 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e00b      	b.n	8007ca8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c94:	2b11      	cmp	r3, #17
 8007c96:	d107      	bne.n	8007ca8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ca6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 fab9 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00d      	beq.n	8007cdc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cce:	d103      	bne.n	8007cd8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e079      	b.n	8007dd0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ce4:	d108      	bne.n	8007cf8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ce6:	897b      	ldrh	r3, [r7, #10]
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	f043 0301 	orr.w	r3, r3, #1
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	611a      	str	r2, [r3, #16]
 8007cf6:	e05f      	b.n	8007db8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007cf8:	897b      	ldrh	r3, [r7, #10]
 8007cfa:	11db      	asrs	r3, r3, #7
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	f003 0306 	and.w	r3, r3, #6
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	f063 030f 	orn	r3, r3, #15
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	4930      	ldr	r1, [pc, #192]	; (8007dd8 <I2C_MasterRequestRead+0x194>)
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f000 fb02 	bl	8008320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e054      	b.n	8007dd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d26:	897b      	ldrh	r3, [r7, #10]
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	4929      	ldr	r1, [pc, #164]	; (8007ddc <I2C_MasterRequestRead+0x198>)
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 faf2 	bl	8008320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e044      	b.n	8007dd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d46:	2300      	movs	r3, #0
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	613b      	str	r3, [r7, #16]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	613b      	str	r3, [r7, #16]
 8007d5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 fa57 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00d      	beq.n	8007da0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d92:	d103      	bne.n	8007d9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e017      	b.n	8007dd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007da0:	897b      	ldrh	r3, [r7, #10]
 8007da2:	11db      	asrs	r3, r3, #7
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	f003 0306 	and.w	r3, r3, #6
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	f063 030e 	orn	r3, r3, #14
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	4907      	ldr	r1, [pc, #28]	; (8007ddc <I2C_MasterRequestRead+0x198>)
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f000 faae 	bl	8008320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3718      	adds	r7, #24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	00010008 	.word	0x00010008
 8007ddc:	00010002 	.word	0x00010002

08007de0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	4608      	mov	r0, r1
 8007dea:	4611      	mov	r1, r2
 8007dec:	461a      	mov	r2, r3
 8007dee:	4603      	mov	r3, r0
 8007df0:	817b      	strh	r3, [r7, #10]
 8007df2:	460b      	mov	r3, r1
 8007df4:	813b      	strh	r3, [r7, #8]
 8007df6:	4613      	mov	r3, r2
 8007df8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 fa08 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00d      	beq.n	8007e3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e30:	d103      	bne.n	8007e3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e05f      	b.n	8007efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e3e:	897b      	ldrh	r3, [r7, #10]
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	461a      	mov	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	6a3a      	ldr	r2, [r7, #32]
 8007e52:	492d      	ldr	r1, [pc, #180]	; (8007f08 <I2C_RequestMemoryWrite+0x128>)
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 fa63 	bl	8008320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e04c      	b.n	8007efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e64:	2300      	movs	r3, #0
 8007e66:	617b      	str	r3, [r7, #20]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	617b      	str	r3, [r7, #20]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	617b      	str	r3, [r7, #20]
 8007e78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7c:	6a39      	ldr	r1, [r7, #32]
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 faee 	bl	8008460 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00d      	beq.n	8007ea6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	d107      	bne.n	8007ea2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ea0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e02b      	b.n	8007efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ea6:	88fb      	ldrh	r3, [r7, #6]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d105      	bne.n	8007eb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007eac:	893b      	ldrh	r3, [r7, #8]
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	611a      	str	r2, [r3, #16]
 8007eb6:	e021      	b.n	8007efc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007eb8:	893b      	ldrh	r3, [r7, #8]
 8007eba:	0a1b      	lsrs	r3, r3, #8
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec8:	6a39      	ldr	r1, [r7, #32]
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 fac8 	bl	8008460 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00d      	beq.n	8007ef2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d107      	bne.n	8007eee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e005      	b.n	8007efe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ef2:	893b      	ldrh	r3, [r7, #8]
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	00010002 	.word	0x00010002

08007f0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	4608      	mov	r0, r1
 8007f16:	4611      	mov	r1, r2
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	817b      	strh	r3, [r7, #10]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	813b      	strh	r3, [r7, #8]
 8007f22:	4613      	mov	r3, r2
 8007f24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 f96a 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00d      	beq.n	8007f7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6c:	d103      	bne.n	8007f76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e0aa      	b.n	80080d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f7a:	897b      	ldrh	r3, [r7, #10]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	461a      	mov	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	6a3a      	ldr	r2, [r7, #32]
 8007f8e:	4952      	ldr	r1, [pc, #328]	; (80080d8 <I2C_RequestMemoryRead+0x1cc>)
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f9c5 	bl	8008320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e097      	b.n	80080d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	617b      	str	r3, [r7, #20]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	617b      	str	r3, [r7, #20]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	617b      	str	r3, [r7, #20]
 8007fb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb8:	6a39      	ldr	r1, [r7, #32]
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 fa50 	bl	8008460 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00d      	beq.n	8007fe2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d107      	bne.n	8007fde <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e076      	b.n	80080d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fe2:	88fb      	ldrh	r3, [r7, #6]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d105      	bne.n	8007ff4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fe8:	893b      	ldrh	r3, [r7, #8]
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	611a      	str	r2, [r3, #16]
 8007ff2:	e021      	b.n	8008038 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ff4:	893b      	ldrh	r3, [r7, #8]
 8007ff6:	0a1b      	lsrs	r3, r3, #8
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008004:	6a39      	ldr	r1, [r7, #32]
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 fa2a 	bl	8008460 <I2C_WaitOnTXEFlagUntilTimeout>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00d      	beq.n	800802e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	2b04      	cmp	r3, #4
 8008018:	d107      	bne.n	800802a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008028:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e050      	b.n	80080d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800802e:	893b      	ldrh	r3, [r7, #8]
 8008030:	b2da      	uxtb	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800803a:	6a39      	ldr	r1, [r7, #32]
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f000 fa0f 	bl	8008460 <I2C_WaitOnTXEFlagUntilTimeout>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00d      	beq.n	8008064 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804c:	2b04      	cmp	r3, #4
 800804e:	d107      	bne.n	8008060 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800805e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e035      	b.n	80080d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008072:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	2200      	movs	r2, #0
 800807c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f8d3 	bl	800822c <I2C_WaitOnFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00d      	beq.n	80080a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800809a:	d103      	bne.n	80080a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e013      	b.n	80080d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80080a8:	897b      	ldrh	r3, [r7, #10]
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	f043 0301 	orr.w	r3, r3, #1
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	6a3a      	ldr	r2, [r7, #32]
 80080bc:	4906      	ldr	r1, [pc, #24]	; (80080d8 <I2C_RequestMemoryRead+0x1cc>)
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 f92e 	bl	8008320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e000      	b.n	80080d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	00010002 	.word	0x00010002

080080dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80080f6:	4b4b      	ldr	r3, [pc, #300]	; (8008224 <I2C_DMAAbort+0x148>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	08db      	lsrs	r3, r3, #3
 80080fc:	4a4a      	ldr	r2, [pc, #296]	; (8008228 <I2C_DMAAbort+0x14c>)
 80080fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008102:	0a1a      	lsrs	r2, r3, #8
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	00da      	lsls	r2, r3, #3
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d106      	bne.n	8008124 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	f043 0220 	orr.w	r2, r3, #32
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008122:	e00a      	b.n	800813a <I2C_DMAAbort+0x5e>
    }
    count--;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3b01      	subs	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008138:	d0ea      	beq.n	8008110 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008146:	2200      	movs	r2, #0
 8008148:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008156:	2200      	movs	r2, #0
 8008158:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008168:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2200      	movs	r2, #0
 800816e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817c:	2200      	movs	r2, #0
 800817e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818c:	2200      	movs	r2, #0
 800818e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0201 	bic.w	r2, r2, #1
 800819e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b60      	cmp	r3, #96	; 0x60
 80081aa:	d10e      	bne.n	80081ca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2200      	movs	r2, #0
 80081c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80081c2:	6978      	ldr	r0, [r7, #20]
 80081c4:	f7fe fbbe 	bl	8006944 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80081c8:	e027      	b.n	800821a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80081ca:	7cfb      	ldrb	r3, [r7, #19]
 80081cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081d0:	2b28      	cmp	r3, #40	; 0x28
 80081d2:	d117      	bne.n	8008204 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f042 0201 	orr.w	r2, r2, #1
 80081e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	2200      	movs	r2, #0
 80081f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2228      	movs	r2, #40	; 0x28
 80081fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008202:	e007      	b.n	8008214 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	2220      	movs	r2, #32
 8008208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008214:	6978      	ldr	r0, [r7, #20]
 8008216:	f7fe fb8c 	bl	8006932 <HAL_I2C_ErrorCallback>
}
 800821a:	bf00      	nop
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	20000000 	.word	0x20000000
 8008228:	14f8b589 	.word	0x14f8b589

0800822c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	603b      	str	r3, [r7, #0]
 8008238:	4613      	mov	r3, r2
 800823a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800823c:	e048      	b.n	80082d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008244:	d044      	beq.n	80082d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008246:	f7fc fc37 	bl	8004ab8 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	429a      	cmp	r2, r3
 8008254:	d302      	bcc.n	800825c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d139      	bne.n	80082d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	0c1b      	lsrs	r3, r3, #16
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b01      	cmp	r3, #1
 8008264:	d10d      	bne.n	8008282 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	43da      	mvns	r2, r3
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	4013      	ands	r3, r2
 8008272:	b29b      	uxth	r3, r3
 8008274:	2b00      	cmp	r3, #0
 8008276:	bf0c      	ite	eq
 8008278:	2301      	moveq	r3, #1
 800827a:	2300      	movne	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	461a      	mov	r2, r3
 8008280:	e00c      	b.n	800829c <I2C_WaitOnFlagUntilTimeout+0x70>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	43da      	mvns	r2, r3
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	4013      	ands	r3, r2
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	bf0c      	ite	eq
 8008294:	2301      	moveq	r3, #1
 8008296:	2300      	movne	r3, #0
 8008298:	b2db      	uxtb	r3, r3
 800829a:	461a      	mov	r2, r3
 800829c:	79fb      	ldrb	r3, [r7, #7]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d116      	bne.n	80082d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2220      	movs	r2, #32
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082bc:	f043 0220 	orr.w	r2, r3, #32
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e023      	b.n	8008318 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	0c1b      	lsrs	r3, r3, #16
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d10d      	bne.n	80082f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	43da      	mvns	r2, r3
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	4013      	ands	r3, r2
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	bf0c      	ite	eq
 80082ec:	2301      	moveq	r3, #1
 80082ee:	2300      	movne	r3, #0
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	461a      	mov	r2, r3
 80082f4:	e00c      	b.n	8008310 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	43da      	mvns	r2, r3
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	4013      	ands	r3, r2
 8008302:	b29b      	uxth	r3, r3
 8008304:	2b00      	cmp	r3, #0
 8008306:	bf0c      	ite	eq
 8008308:	2301      	moveq	r3, #1
 800830a:	2300      	movne	r3, #0
 800830c:	b2db      	uxtb	r3, r3
 800830e:	461a      	mov	r2, r3
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	429a      	cmp	r2, r3
 8008314:	d093      	beq.n	800823e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800832e:	e071      	b.n	8008414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800833a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800833e:	d123      	bne.n	8008388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800834e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008358:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2220      	movs	r2, #32
 8008364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008374:	f043 0204 	orr.w	r2, r3, #4
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e067      	b.n	8008458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838e:	d041      	beq.n	8008414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008390:	f7fc fb92 	bl	8004ab8 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	429a      	cmp	r2, r3
 800839e:	d302      	bcc.n	80083a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d136      	bne.n	8008414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	0c1b      	lsrs	r3, r3, #16
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d10c      	bne.n	80083ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	43da      	mvns	r2, r3
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	4013      	ands	r3, r2
 80083bc:	b29b      	uxth	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	bf14      	ite	ne
 80083c2:	2301      	movne	r3, #1
 80083c4:	2300      	moveq	r3, #0
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	e00b      	b.n	80083e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	43da      	mvns	r2, r3
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	4013      	ands	r3, r2
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	2b00      	cmp	r3, #0
 80083da:	bf14      	ite	ne
 80083dc:	2301      	movne	r3, #1
 80083de:	2300      	moveq	r3, #0
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d016      	beq.n	8008414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2220      	movs	r2, #32
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008400:	f043 0220 	orr.w	r2, r3, #32
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e021      	b.n	8008458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	0c1b      	lsrs	r3, r3, #16
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b01      	cmp	r3, #1
 800841c:	d10c      	bne.n	8008438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	43da      	mvns	r2, r3
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	4013      	ands	r3, r2
 800842a:	b29b      	uxth	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	bf14      	ite	ne
 8008430:	2301      	movne	r3, #1
 8008432:	2300      	moveq	r3, #0
 8008434:	b2db      	uxtb	r3, r3
 8008436:	e00b      	b.n	8008450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	43da      	mvns	r2, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	4013      	ands	r3, r2
 8008444:	b29b      	uxth	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	bf14      	ite	ne
 800844a:	2301      	movne	r3, #1
 800844c:	2300      	moveq	r3, #0
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b00      	cmp	r3, #0
 8008452:	f47f af6d 	bne.w	8008330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800846c:	e034      	b.n	80084d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 f915 	bl	800869e <I2C_IsAcknowledgeFailed>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e034      	b.n	80084e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008484:	d028      	beq.n	80084d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008486:	f7fc fb17 	bl	8004ab8 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	429a      	cmp	r2, r3
 8008494:	d302      	bcc.n	800849c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d11d      	bne.n	80084d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a6:	2b80      	cmp	r3, #128	; 0x80
 80084a8:	d016      	beq.n	80084d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c4:	f043 0220 	orr.w	r2, r3, #32
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e007      	b.n	80084e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e2:	2b80      	cmp	r3, #128	; 0x80
 80084e4:	d1c3      	bne.n	800846e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084fc:	e034      	b.n	8008568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f000 f8cd 	bl	800869e <I2C_IsAcknowledgeFailed>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e034      	b.n	8008578 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008514:	d028      	beq.n	8008568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008516:	f7fc facf 	bl	8004ab8 <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	429a      	cmp	r2, r3
 8008524:	d302      	bcc.n	800852c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d11d      	bne.n	8008568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	f003 0304 	and.w	r3, r3, #4
 8008536:	2b04      	cmp	r3, #4
 8008538:	d016      	beq.n	8008568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2220      	movs	r2, #32
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008554:	f043 0220 	orr.w	r2, r3, #32
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e007      	b.n	8008578 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	f003 0304 	and.w	r3, r3, #4
 8008572:	2b04      	cmp	r3, #4
 8008574:	d1c3      	bne.n	80084fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800858c:	4b13      	ldr	r3, [pc, #76]	; (80085dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	08db      	lsrs	r3, r3, #3
 8008592:	4a13      	ldr	r2, [pc, #76]	; (80085e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008594:	fba2 2303 	umull	r2, r3, r2, r3
 8008598:	0a1a      	lsrs	r2, r3, #8
 800859a:	4613      	mov	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d107      	bne.n	80085be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	f043 0220 	orr.w	r2, r3, #32
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e008      	b.n	80085d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085cc:	d0e9      	beq.n	80085a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bc80      	pop	{r7}
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	20000000 	.word	0x20000000
 80085e0:	14f8b589 	.word	0x14f8b589

080085e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085f0:	e049      	b.n	8008686 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b10      	cmp	r3, #16
 80085fe:	d119      	bne.n	8008634 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0210 	mvn.w	r2, #16
 8008608:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2220      	movs	r2, #32
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e030      	b.n	8008696 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008634:	f7fc fa40 	bl	8004ab8 <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	429a      	cmp	r2, r3
 8008642:	d302      	bcc.n	800864a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d11d      	bne.n	8008686 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008654:	2b40      	cmp	r3, #64	; 0x40
 8008656:	d016      	beq.n	8008686 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2220      	movs	r2, #32
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	f043 0220 	orr.w	r2, r3, #32
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e007      	b.n	8008696 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008690:	2b40      	cmp	r3, #64	; 0x40
 8008692:	d1ae      	bne.n	80085f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086b4:	d11b      	bne.n	80086ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80086be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2220      	movs	r2, #32
 80086ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	f043 0204 	orr.w	r2, r3, #4
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e000      	b.n	80086f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr

080086fa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008706:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800870a:	d103      	bne.n	8008714 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008712:	e007      	b.n	8008724 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008718:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800871c:	d102      	bne.n	8008724 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2208      	movs	r2, #8
 8008722:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	bc80      	pop	{r7}
 800872c:	4770      	bx	lr
	...

08008730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b088      	sub	sp, #32
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e31d      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008742:	4b94      	ldr	r3, [pc, #592]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f003 030c 	and.w	r3, r3, #12
 800874a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800874c:	4b91      	ldr	r3, [pc, #580]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008754:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d07b      	beq.n	800885a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	2b08      	cmp	r3, #8
 8008766:	d006      	beq.n	8008776 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	2b0c      	cmp	r3, #12
 800876c:	d10f      	bne.n	800878e <HAL_RCC_OscConfig+0x5e>
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008774:	d10b      	bne.n	800878e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008776:	4b87      	ldr	r3, [pc, #540]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d06a      	beq.n	8008858 <HAL_RCC_OscConfig+0x128>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d166      	bne.n	8008858 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e2f7      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d106      	bne.n	80087a4 <HAL_RCC_OscConfig+0x74>
 8008796:	4b7f      	ldr	r3, [pc, #508]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a7e      	ldr	r2, [pc, #504]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 800879c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	e02d      	b.n	8008800 <HAL_RCC_OscConfig+0xd0>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10c      	bne.n	80087c6 <HAL_RCC_OscConfig+0x96>
 80087ac:	4b79      	ldr	r3, [pc, #484]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a78      	ldr	r2, [pc, #480]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80087b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	4b76      	ldr	r3, [pc, #472]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a75      	ldr	r2, [pc, #468]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80087be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087c2:	6013      	str	r3, [r2, #0]
 80087c4:	e01c      	b.n	8008800 <HAL_RCC_OscConfig+0xd0>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	2b05      	cmp	r3, #5
 80087cc:	d10c      	bne.n	80087e8 <HAL_RCC_OscConfig+0xb8>
 80087ce:	4b71      	ldr	r3, [pc, #452]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a70      	ldr	r2, [pc, #448]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80087d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	4b6e      	ldr	r3, [pc, #440]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a6d      	ldr	r2, [pc, #436]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80087e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087e4:	6013      	str	r3, [r2, #0]
 80087e6:	e00b      	b.n	8008800 <HAL_RCC_OscConfig+0xd0>
 80087e8:	4b6a      	ldr	r3, [pc, #424]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a69      	ldr	r2, [pc, #420]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80087ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	4b67      	ldr	r3, [pc, #412]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a66      	ldr	r2, [pc, #408]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80087fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d013      	beq.n	8008830 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008808:	f7fc f956 	bl	8004ab8 <HAL_GetTick>
 800880c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800880e:	e008      	b.n	8008822 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008810:	f7fc f952 	bl	8004ab8 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	2b64      	cmp	r3, #100	; 0x64
 800881c:	d901      	bls.n	8008822 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e2ad      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008822:	4b5c      	ldr	r3, [pc, #368]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0f0      	beq.n	8008810 <HAL_RCC_OscConfig+0xe0>
 800882e:	e014      	b.n	800885a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008830:	f7fc f942 	bl	8004ab8 <HAL_GetTick>
 8008834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008836:	e008      	b.n	800884a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008838:	f7fc f93e 	bl	8004ab8 <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b64      	cmp	r3, #100	; 0x64
 8008844:	d901      	bls.n	800884a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e299      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800884a:	4b52      	ldr	r3, [pc, #328]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1f0      	bne.n	8008838 <HAL_RCC_OscConfig+0x108>
 8008856:	e000      	b.n	800885a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	2b00      	cmp	r3, #0
 8008864:	d05a      	beq.n	800891c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	2b04      	cmp	r3, #4
 800886a:	d005      	beq.n	8008878 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	2b0c      	cmp	r3, #12
 8008870:	d119      	bne.n	80088a6 <HAL_RCC_OscConfig+0x176>
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d116      	bne.n	80088a6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008878:	4b46      	ldr	r3, [pc, #280]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0302 	and.w	r3, r3, #2
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <HAL_RCC_OscConfig+0x160>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d001      	beq.n	8008890 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e276      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008890:	4b40      	ldr	r3, [pc, #256]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	021b      	lsls	r3, r3, #8
 800889e:	493d      	ldr	r1, [pc, #244]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80088a0:	4313      	orrs	r3, r2
 80088a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088a4:	e03a      	b.n	800891c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d020      	beq.n	80088f0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088ae:	4b3a      	ldr	r3, [pc, #232]	; (8008998 <HAL_RCC_OscConfig+0x268>)
 80088b0:	2201      	movs	r2, #1
 80088b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b4:	f7fc f900 	bl	8004ab8 <HAL_GetTick>
 80088b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088ba:	e008      	b.n	80088ce <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088bc:	f7fc f8fc 	bl	8004ab8 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e257      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088ce:	4b31      	ldr	r3, [pc, #196]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0302 	and.w	r3, r3, #2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0f0      	beq.n	80088bc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088da:	4b2e      	ldr	r3, [pc, #184]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	021b      	lsls	r3, r3, #8
 80088e8:	492a      	ldr	r1, [pc, #168]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	604b      	str	r3, [r1, #4]
 80088ee:	e015      	b.n	800891c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088f0:	4b29      	ldr	r3, [pc, #164]	; (8008998 <HAL_RCC_OscConfig+0x268>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088f6:	f7fc f8df 	bl	8004ab8 <HAL_GetTick>
 80088fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80088fc:	e008      	b.n	8008910 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088fe:	f7fc f8db 	bl	8004ab8 <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	2b02      	cmp	r3, #2
 800890a:	d901      	bls.n	8008910 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e236      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008910:	4b20      	ldr	r3, [pc, #128]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0302 	and.w	r3, r3, #2
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1f0      	bne.n	80088fe <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0310 	and.w	r3, r3, #16
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 80b8 	beq.w	8008a9a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d170      	bne.n	8008a12 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008930:	4b18      	ldr	r3, [pc, #96]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008938:	2b00      	cmp	r3, #0
 800893a:	d005      	beq.n	8008948 <HAL_RCC_OscConfig+0x218>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e21a      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a1a      	ldr	r2, [r3, #32]
 800894c:	4b11      	ldr	r3, [pc, #68]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008954:	429a      	cmp	r2, r3
 8008956:	d921      	bls.n	800899c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a1b      	ldr	r3, [r3, #32]
 800895c:	4618      	mov	r0, r3
 800895e:	f000 fc23 	bl	80091a8 <RCC_SetFlashLatencyFromMSIRange>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e208      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800896c:	4b09      	ldr	r3, [pc, #36]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	4906      	ldr	r1, [pc, #24]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 800897a:	4313      	orrs	r3, r2
 800897c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800897e:	4b05      	ldr	r3, [pc, #20]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	061b      	lsls	r3, r3, #24
 800898c:	4901      	ldr	r1, [pc, #4]	; (8008994 <HAL_RCC_OscConfig+0x264>)
 800898e:	4313      	orrs	r3, r2
 8008990:	604b      	str	r3, [r1, #4]
 8008992:	e020      	b.n	80089d6 <HAL_RCC_OscConfig+0x2a6>
 8008994:	40023800 	.word	0x40023800
 8008998:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800899c:	4ba4      	ldr	r3, [pc, #656]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	49a1      	ldr	r1, [pc, #644]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80089ae:	4ba0      	ldr	r3, [pc, #640]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	061b      	lsls	r3, r3, #24
 80089bc:	499c      	ldr	r1, [pc, #624]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 fbee 	bl	80091a8 <RCC_SetFlashLatencyFromMSIRange>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e1d3      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	0b5b      	lsrs	r3, r3, #13
 80089dc:	3301      	adds	r3, #1
 80089de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80089e2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80089e6:	4a92      	ldr	r2, [pc, #584]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 80089e8:	6892      	ldr	r2, [r2, #8]
 80089ea:	0912      	lsrs	r2, r2, #4
 80089ec:	f002 020f 	and.w	r2, r2, #15
 80089f0:	4990      	ldr	r1, [pc, #576]	; (8008c34 <HAL_RCC_OscConfig+0x504>)
 80089f2:	5c8a      	ldrb	r2, [r1, r2]
 80089f4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80089f6:	4a90      	ldr	r2, [pc, #576]	; (8008c38 <HAL_RCC_OscConfig+0x508>)
 80089f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80089fa:	4b90      	ldr	r3, [pc, #576]	; (8008c3c <HAL_RCC_OscConfig+0x50c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fc f80e 	bl	8004a20 <HAL_InitTick>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d045      	beq.n	8008a9a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	e1b5      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d029      	beq.n	8008a6e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008a1a:	4b89      	ldr	r3, [pc, #548]	; (8008c40 <HAL_RCC_OscConfig+0x510>)
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a20:	f7fc f84a 	bl	8004ab8 <HAL_GetTick>
 8008a24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008a26:	e008      	b.n	8008a3a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008a28:	f7fc f846 	bl	8004ab8 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d901      	bls.n	8008a3a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e1a1      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008a3a:	4b7d      	ldr	r3, [pc, #500]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0f0      	beq.n	8008a28 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008a46:	4b7a      	ldr	r3, [pc, #488]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	4977      	ldr	r1, [pc, #476]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008a58:	4b75      	ldr	r3, [pc, #468]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	69db      	ldr	r3, [r3, #28]
 8008a64:	061b      	lsls	r3, r3, #24
 8008a66:	4972      	ldr	r1, [pc, #456]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	604b      	str	r3, [r1, #4]
 8008a6c:	e015      	b.n	8008a9a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008a6e:	4b74      	ldr	r3, [pc, #464]	; (8008c40 <HAL_RCC_OscConfig+0x510>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a74:	f7fc f820 	bl	8004ab8 <HAL_GetTick>
 8008a78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008a7a:	e008      	b.n	8008a8e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008a7c:	f7fc f81c 	bl	8004ab8 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d901      	bls.n	8008a8e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e177      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008a8e:	4b68      	ldr	r3, [pc, #416]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1f0      	bne.n	8008a7c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0308 	and.w	r3, r3, #8
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d030      	beq.n	8008b08 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d016      	beq.n	8008adc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008aae:	4b65      	ldr	r3, [pc, #404]	; (8008c44 <HAL_RCC_OscConfig+0x514>)
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ab4:	f7fc f800 	bl	8004ab8 <HAL_GetTick>
 8008ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008aba:	e008      	b.n	8008ace <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008abc:	f7fb fffc 	bl	8004ab8 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d901      	bls.n	8008ace <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e157      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ace:	4b58      	ldr	r3, [pc, #352]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0f0      	beq.n	8008abc <HAL_RCC_OscConfig+0x38c>
 8008ada:	e015      	b.n	8008b08 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008adc:	4b59      	ldr	r3, [pc, #356]	; (8008c44 <HAL_RCC_OscConfig+0x514>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ae2:	f7fb ffe9 	bl	8004ab8 <HAL_GetTick>
 8008ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ae8:	e008      	b.n	8008afc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008aea:	f7fb ffe5 	bl	8004ab8 <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d901      	bls.n	8008afc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	e140      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008afc:	4b4c      	ldr	r3, [pc, #304]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b00:	f003 0302 	and.w	r3, r3, #2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1f0      	bne.n	8008aea <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 80b5 	beq.w	8008c80 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b16:	2300      	movs	r3, #0
 8008b18:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b1a:	4b45      	ldr	r3, [pc, #276]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10d      	bne.n	8008b42 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b26:	4b42      	ldr	r3, [pc, #264]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2a:	4a41      	ldr	r2, [pc, #260]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b30:	6253      	str	r3, [r2, #36]	; 0x24
 8008b32:	4b3f      	ldr	r3, [pc, #252]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b3a:	60bb      	str	r3, [r7, #8]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b42:	4b41      	ldr	r3, [pc, #260]	; (8008c48 <HAL_RCC_OscConfig+0x518>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d118      	bne.n	8008b80 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b4e:	4b3e      	ldr	r3, [pc, #248]	; (8008c48 <HAL_RCC_OscConfig+0x518>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a3d      	ldr	r2, [pc, #244]	; (8008c48 <HAL_RCC_OscConfig+0x518>)
 8008b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b5a:	f7fb ffad 	bl	8004ab8 <HAL_GetTick>
 8008b5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b60:	e008      	b.n	8008b74 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b62:	f7fb ffa9 	bl	8004ab8 <HAL_GetTick>
 8008b66:	4602      	mov	r2, r0
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	2b64      	cmp	r3, #100	; 0x64
 8008b6e:	d901      	bls.n	8008b74 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e104      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b74:	4b34      	ldr	r3, [pc, #208]	; (8008c48 <HAL_RCC_OscConfig+0x518>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d0f0      	beq.n	8008b62 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d106      	bne.n	8008b96 <HAL_RCC_OscConfig+0x466>
 8008b88:	4b29      	ldr	r3, [pc, #164]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b8c:	4a28      	ldr	r2, [pc, #160]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b92:	6353      	str	r3, [r2, #52]	; 0x34
 8008b94:	e02d      	b.n	8008bf2 <HAL_RCC_OscConfig+0x4c2>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10c      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x488>
 8008b9e:	4b24      	ldr	r3, [pc, #144]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba2:	4a23      	ldr	r2, [pc, #140]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ba8:	6353      	str	r3, [r2, #52]	; 0x34
 8008baa:	4b21      	ldr	r3, [pc, #132]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bae:	4a20      	ldr	r2, [pc, #128]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008bb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bb4:	6353      	str	r3, [r2, #52]	; 0x34
 8008bb6:	e01c      	b.n	8008bf2 <HAL_RCC_OscConfig+0x4c2>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	2b05      	cmp	r3, #5
 8008bbe:	d10c      	bne.n	8008bda <HAL_RCC_OscConfig+0x4aa>
 8008bc0:	4b1b      	ldr	r3, [pc, #108]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc4:	4a1a      	ldr	r2, [pc, #104]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008bca:	6353      	str	r3, [r2, #52]	; 0x34
 8008bcc:	4b18      	ldr	r3, [pc, #96]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd0:	4a17      	ldr	r2, [pc, #92]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bd6:	6353      	str	r3, [r2, #52]	; 0x34
 8008bd8:	e00b      	b.n	8008bf2 <HAL_RCC_OscConfig+0x4c2>
 8008bda:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bde:	4a14      	ldr	r2, [pc, #80]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008be4:	6353      	str	r3, [r2, #52]	; 0x34
 8008be6:	4b12      	ldr	r3, [pc, #72]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bea:	4a11      	ldr	r2, [pc, #68]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008bec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bf0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d015      	beq.n	8008c26 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008bfa:	f7fb ff5d 	bl	8004ab8 <HAL_GetTick>
 8008bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c00:	e00a      	b.n	8008c18 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c02:	f7fb ff59 	bl	8004ab8 <HAL_GetTick>
 8008c06:	4602      	mov	r2, r0
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d901      	bls.n	8008c18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e0b2      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c18:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <HAL_RCC_OscConfig+0x500>)
 8008c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d0ee      	beq.n	8008c02 <HAL_RCC_OscConfig+0x4d2>
 8008c24:	e023      	b.n	8008c6e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c26:	f7fb ff47 	bl	8004ab8 <HAL_GetTick>
 8008c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c2c:	e019      	b.n	8008c62 <HAL_RCC_OscConfig+0x532>
 8008c2e:	bf00      	nop
 8008c30:	40023800 	.word	0x40023800
 8008c34:	0800cc28 	.word	0x0800cc28
 8008c38:	20000000 	.word	0x20000000
 8008c3c:	2000001c 	.word	0x2000001c
 8008c40:	42470020 	.word	0x42470020
 8008c44:	42470680 	.word	0x42470680
 8008c48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c4c:	f7fb ff34 	bl	8004ab8 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d901      	bls.n	8008c62 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e08d      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c62:	4b49      	ldr	r3, [pc, #292]	; (8008d88 <HAL_RCC_OscConfig+0x658>)
 8008c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1ee      	bne.n	8008c4c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008c6e:	7ffb      	ldrb	r3, [r7, #31]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d105      	bne.n	8008c80 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c74:	4b44      	ldr	r3, [pc, #272]	; (8008d88 <HAL_RCC_OscConfig+0x658>)
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	4a43      	ldr	r2, [pc, #268]	; (8008d88 <HAL_RCC_OscConfig+0x658>)
 8008c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c7e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d079      	beq.n	8008d7c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	2b0c      	cmp	r3, #12
 8008c8c:	d056      	beq.n	8008d3c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d13b      	bne.n	8008d0e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c96:	4b3d      	ldr	r3, [pc, #244]	; (8008d8c <HAL_RCC_OscConfig+0x65c>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c9c:	f7fb ff0c 	bl	8004ab8 <HAL_GetTick>
 8008ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ca2:	e008      	b.n	8008cb6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ca4:	f7fb ff08 	bl	8004ab8 <HAL_GetTick>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d901      	bls.n	8008cb6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e063      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cb6:	4b34      	ldr	r3, [pc, #208]	; (8008d88 <HAL_RCC_OscConfig+0x658>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1f0      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cc2:	4b31      	ldr	r3, [pc, #196]	; (8008d88 <HAL_RCC_OscConfig+0x658>)
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	4319      	orrs	r1, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd8:	430b      	orrs	r3, r1
 8008cda:	492b      	ldr	r1, [pc, #172]	; (8008d88 <HAL_RCC_OscConfig+0x658>)
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ce0:	4b2a      	ldr	r3, [pc, #168]	; (8008d8c <HAL_RCC_OscConfig+0x65c>)
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ce6:	f7fb fee7 	bl	8004ab8 <HAL_GetTick>
 8008cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008cec:	e008      	b.n	8008d00 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cee:	f7fb fee3 	bl	8004ab8 <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d901      	bls.n	8008d00 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e03e      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d00:	4b21      	ldr	r3, [pc, #132]	; (8008d88 <HAL_RCC_OscConfig+0x658>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d0f0      	beq.n	8008cee <HAL_RCC_OscConfig+0x5be>
 8008d0c:	e036      	b.n	8008d7c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d0e:	4b1f      	ldr	r3, [pc, #124]	; (8008d8c <HAL_RCC_OscConfig+0x65c>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d14:	f7fb fed0 	bl	8004ab8 <HAL_GetTick>
 8008d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d1a:	e008      	b.n	8008d2e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d1c:	f7fb fecc 	bl	8004ab8 <HAL_GetTick>
 8008d20:	4602      	mov	r2, r0
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d901      	bls.n	8008d2e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e027      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d2e:	4b16      	ldr	r3, [pc, #88]	; (8008d88 <HAL_RCC_OscConfig+0x658>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1f0      	bne.n	8008d1c <HAL_RCC_OscConfig+0x5ec>
 8008d3a:	e01f      	b.n	8008d7c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d101      	bne.n	8008d48 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e01a      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008d48:	4b0f      	ldr	r3, [pc, #60]	; (8008d88 <HAL_RCC_OscConfig+0x658>)
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d10d      	bne.n	8008d78 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d106      	bne.n	8008d78 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d001      	beq.n	8008d7c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e000      	b.n	8008d7e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	40023800 	.word	0x40023800
 8008d8c:	42470060 	.word	0x42470060

08008d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e11a      	b.n	8008fda <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008da4:	4b8f      	ldr	r3, [pc, #572]	; (8008fe4 <HAL_RCC_ClockConfig+0x254>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	683a      	ldr	r2, [r7, #0]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d919      	bls.n	8008de6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d105      	bne.n	8008dc4 <HAL_RCC_ClockConfig+0x34>
 8008db8:	4b8a      	ldr	r3, [pc, #552]	; (8008fe4 <HAL_RCC_ClockConfig+0x254>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a89      	ldr	r2, [pc, #548]	; (8008fe4 <HAL_RCC_ClockConfig+0x254>)
 8008dbe:	f043 0304 	orr.w	r3, r3, #4
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	4b87      	ldr	r3, [pc, #540]	; (8008fe4 <HAL_RCC_ClockConfig+0x254>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f023 0201 	bic.w	r2, r3, #1
 8008dcc:	4985      	ldr	r1, [pc, #532]	; (8008fe4 <HAL_RCC_ClockConfig+0x254>)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dd4:	4b83      	ldr	r3, [pc, #524]	; (8008fe4 <HAL_RCC_ClockConfig+0x254>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0301 	and.w	r3, r3, #1
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d001      	beq.n	8008de6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e0f9      	b.n	8008fda <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0302 	and.w	r3, r3, #2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d008      	beq.n	8008e04 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008df2:	4b7d      	ldr	r3, [pc, #500]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	497a      	ldr	r1, [pc, #488]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 808e 	beq.w	8008f2e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d107      	bne.n	8008e2a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e1a:	4b73      	ldr	r3, [pc, #460]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d121      	bne.n	8008e6a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e0d7      	b.n	8008fda <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d107      	bne.n	8008e42 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e32:	4b6d      	ldr	r3, [pc, #436]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d115      	bne.n	8008e6a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e0cb      	b.n	8008fda <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d107      	bne.n	8008e5a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e4a:	4b67      	ldr	r3, [pc, #412]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0302 	and.w	r3, r3, #2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d109      	bne.n	8008e6a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e0bf      	b.n	8008fda <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008e5a:	4b63      	ldr	r3, [pc, #396]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e0b7      	b.n	8008fda <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e6a:	4b5f      	ldr	r3, [pc, #380]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f023 0203 	bic.w	r2, r3, #3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	495c      	ldr	r1, [pc, #368]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e7c:	f7fb fe1c 	bl	8004ab8 <HAL_GetTick>
 8008e80:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d112      	bne.n	8008eb0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008e8a:	e00a      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e8c:	f7fb fe14 	bl	8004ab8 <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d901      	bls.n	8008ea2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e09b      	b.n	8008fda <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ea2:	4b51      	ldr	r3, [pc, #324]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f003 030c 	and.w	r3, r3, #12
 8008eaa:	2b08      	cmp	r3, #8
 8008eac:	d1ee      	bne.n	8008e8c <HAL_RCC_ClockConfig+0xfc>
 8008eae:	e03e      	b.n	8008f2e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d112      	bne.n	8008ede <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008eb8:	e00a      	b.n	8008ed0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008eba:	f7fb fdfd 	bl	8004ab8 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d901      	bls.n	8008ed0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e084      	b.n	8008fda <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ed0:	4b45      	ldr	r3, [pc, #276]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f003 030c 	and.w	r3, r3, #12
 8008ed8:	2b0c      	cmp	r3, #12
 8008eda:	d1ee      	bne.n	8008eba <HAL_RCC_ClockConfig+0x12a>
 8008edc:	e027      	b.n	8008f2e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d11d      	bne.n	8008f22 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ee6:	e00a      	b.n	8008efe <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ee8:	f7fb fde6 	bl	8004ab8 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e06d      	b.n	8008fda <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008efe:	4b3a      	ldr	r3, [pc, #232]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f003 030c 	and.w	r3, r3, #12
 8008f06:	2b04      	cmp	r3, #4
 8008f08:	d1ee      	bne.n	8008ee8 <HAL_RCC_ClockConfig+0x158>
 8008f0a:	e010      	b.n	8008f2e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f0c:	f7fb fdd4 	bl	8004ab8 <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d901      	bls.n	8008f22 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e05b      	b.n	8008fda <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008f22:	4b31      	ldr	r3, [pc, #196]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f003 030c 	and.w	r3, r3, #12
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1ee      	bne.n	8008f0c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f2e:	4b2d      	ldr	r3, [pc, #180]	; (8008fe4 <HAL_RCC_ClockConfig+0x254>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d219      	bcs.n	8008f70 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d105      	bne.n	8008f4e <HAL_RCC_ClockConfig+0x1be>
 8008f42:	4b28      	ldr	r3, [pc, #160]	; (8008fe4 <HAL_RCC_ClockConfig+0x254>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a27      	ldr	r2, [pc, #156]	; (8008fe4 <HAL_RCC_ClockConfig+0x254>)
 8008f48:	f043 0304 	orr.w	r3, r3, #4
 8008f4c:	6013      	str	r3, [r2, #0]
 8008f4e:	4b25      	ldr	r3, [pc, #148]	; (8008fe4 <HAL_RCC_ClockConfig+0x254>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f023 0201 	bic.w	r2, r3, #1
 8008f56:	4923      	ldr	r1, [pc, #140]	; (8008fe4 <HAL_RCC_ClockConfig+0x254>)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f5e:	4b21      	ldr	r3, [pc, #132]	; (8008fe4 <HAL_RCC_ClockConfig+0x254>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	683a      	ldr	r2, [r7, #0]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d001      	beq.n	8008f70 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e034      	b.n	8008fda <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0304 	and.w	r3, r3, #4
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d008      	beq.n	8008f8e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f7c:	4b1a      	ldr	r3, [pc, #104]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	4917      	ldr	r1, [pc, #92]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0308 	and.w	r3, r3, #8
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d009      	beq.n	8008fae <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f9a:	4b13      	ldr	r3, [pc, #76]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	00db      	lsls	r3, r3, #3
 8008fa8:	490f      	ldr	r1, [pc, #60]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008fae:	f000 f823 	bl	8008ff8 <HAL_RCC_GetSysClockFreq>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	4b0c      	ldr	r3, [pc, #48]	; (8008fe8 <HAL_RCC_ClockConfig+0x258>)
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	091b      	lsrs	r3, r3, #4
 8008fba:	f003 030f 	and.w	r3, r3, #15
 8008fbe:	490b      	ldr	r1, [pc, #44]	; (8008fec <HAL_RCC_ClockConfig+0x25c>)
 8008fc0:	5ccb      	ldrb	r3, [r1, r3]
 8008fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc6:	4a0a      	ldr	r2, [pc, #40]	; (8008ff0 <HAL_RCC_ClockConfig+0x260>)
 8008fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008fca:	4b0a      	ldr	r3, [pc, #40]	; (8008ff4 <HAL_RCC_ClockConfig+0x264>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fb fd26 	bl	8004a20 <HAL_InitTick>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	72fb      	strb	r3, [r7, #11]

  return status;
 8008fd8:	7afb      	ldrb	r3, [r7, #11]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	40023c00 	.word	0x40023c00
 8008fe8:	40023800 	.word	0x40023800
 8008fec:	0800cc28 	.word	0x0800cc28
 8008ff0:	20000000 	.word	0x20000000
 8008ff4:	2000001c 	.word	0x2000001c

08008ff8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ff8:	b5b0      	push	{r4, r5, r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8008ffe:	4b4d      	ldr	r3, [pc, #308]	; (8009134 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f003 030c 	and.w	r3, r3, #12
 800900a:	2b0c      	cmp	r3, #12
 800900c:	d00c      	beq.n	8009028 <HAL_RCC_GetSysClockFreq+0x30>
 800900e:	2b0c      	cmp	r3, #12
 8009010:	d87c      	bhi.n	800910c <HAL_RCC_GetSysClockFreq+0x114>
 8009012:	2b04      	cmp	r3, #4
 8009014:	d002      	beq.n	800901c <HAL_RCC_GetSysClockFreq+0x24>
 8009016:	2b08      	cmp	r3, #8
 8009018:	d003      	beq.n	8009022 <HAL_RCC_GetSysClockFreq+0x2a>
 800901a:	e077      	b.n	800910c <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800901c:	4b46      	ldr	r3, [pc, #280]	; (8009138 <HAL_RCC_GetSysClockFreq+0x140>)
 800901e:	613b      	str	r3, [r7, #16]
      break;
 8009020:	e082      	b.n	8009128 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009022:	4b46      	ldr	r3, [pc, #280]	; (800913c <HAL_RCC_GetSysClockFreq+0x144>)
 8009024:	613b      	str	r3, [r7, #16]
      break;
 8009026:	e07f      	b.n	8009128 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	0c9b      	lsrs	r3, r3, #18
 800902c:	f003 030f 	and.w	r3, r3, #15
 8009030:	4a43      	ldr	r2, [pc, #268]	; (8009140 <HAL_RCC_GetSysClockFreq+0x148>)
 8009032:	5cd3      	ldrb	r3, [r2, r3]
 8009034:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	0d9b      	lsrs	r3, r3, #22
 800903a:	f003 0303 	and.w	r3, r3, #3
 800903e:	3301      	adds	r3, #1
 8009040:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009042:	4b3c      	ldr	r3, [pc, #240]	; (8009134 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d01a      	beq.n	8009084 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	461a      	mov	r2, r3
 8009052:	f04f 0300 	mov.w	r3, #0
 8009056:	4939      	ldr	r1, [pc, #228]	; (800913c <HAL_RCC_GetSysClockFreq+0x144>)
 8009058:	fb01 f003 	mul.w	r0, r1, r3
 800905c:	2100      	movs	r1, #0
 800905e:	fb01 f102 	mul.w	r1, r1, r2
 8009062:	1844      	adds	r4, r0, r1
 8009064:	4935      	ldr	r1, [pc, #212]	; (800913c <HAL_RCC_GetSysClockFreq+0x144>)
 8009066:	fba2 0101 	umull	r0, r1, r2, r1
 800906a:	1863      	adds	r3, r4, r1
 800906c:	4619      	mov	r1, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	461a      	mov	r2, r3
 8009072:	f04f 0300 	mov.w	r3, #0
 8009076:	f7f8 f843 	bl	8001100 <__aeabi_uldivmod>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	4613      	mov	r3, r2
 8009080:	617b      	str	r3, [r7, #20]
 8009082:	e040      	b.n	8009106 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	461c      	mov	r4, r3
 8009088:	f04f 0500 	mov.w	r5, #0
 800908c:	4620      	mov	r0, r4
 800908e:	4629      	mov	r1, r5
 8009090:	f04f 0200 	mov.w	r2, #0
 8009094:	f04f 0300 	mov.w	r3, #0
 8009098:	014b      	lsls	r3, r1, #5
 800909a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800909e:	0142      	lsls	r2, r0, #5
 80090a0:	4610      	mov	r0, r2
 80090a2:	4619      	mov	r1, r3
 80090a4:	1b00      	subs	r0, r0, r4
 80090a6:	eb61 0105 	sbc.w	r1, r1, r5
 80090aa:	f04f 0200 	mov.w	r2, #0
 80090ae:	f04f 0300 	mov.w	r3, #0
 80090b2:	018b      	lsls	r3, r1, #6
 80090b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80090b8:	0182      	lsls	r2, r0, #6
 80090ba:	1a12      	subs	r2, r2, r0
 80090bc:	eb63 0301 	sbc.w	r3, r3, r1
 80090c0:	f04f 0000 	mov.w	r0, #0
 80090c4:	f04f 0100 	mov.w	r1, #0
 80090c8:	00d9      	lsls	r1, r3, #3
 80090ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090ce:	00d0      	lsls	r0, r2, #3
 80090d0:	4602      	mov	r2, r0
 80090d2:	460b      	mov	r3, r1
 80090d4:	1912      	adds	r2, r2, r4
 80090d6:	eb45 0303 	adc.w	r3, r5, r3
 80090da:	f04f 0000 	mov.w	r0, #0
 80090de:	f04f 0100 	mov.w	r1, #0
 80090e2:	0299      	lsls	r1, r3, #10
 80090e4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80090e8:	0290      	lsls	r0, r2, #10
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	4610      	mov	r0, r2
 80090f0:	4619      	mov	r1, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	461a      	mov	r2, r3
 80090f6:	f04f 0300 	mov.w	r3, #0
 80090fa:	f7f8 f801 	bl	8001100 <__aeabi_uldivmod>
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	4613      	mov	r3, r2
 8009104:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	613b      	str	r3, [r7, #16]
      break;
 800910a:	e00d      	b.n	8009128 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800910c:	4b09      	ldr	r3, [pc, #36]	; (8009134 <HAL_RCC_GetSysClockFreq+0x13c>)
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	0b5b      	lsrs	r3, r3, #13
 8009112:	f003 0307 	and.w	r3, r3, #7
 8009116:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	3301      	adds	r3, #1
 800911c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009120:	fa02 f303 	lsl.w	r3, r2, r3
 8009124:	613b      	str	r3, [r7, #16]
      break;
 8009126:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009128:	693b      	ldr	r3, [r7, #16]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bdb0      	pop	{r4, r5, r7, pc}
 8009132:	bf00      	nop
 8009134:	40023800 	.word	0x40023800
 8009138:	00f42400 	.word	0x00f42400
 800913c:	016e3600 	.word	0x016e3600
 8009140:	0800cc1c 	.word	0x0800cc1c

08009144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009144:	b480      	push	{r7}
 8009146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009148:	4b02      	ldr	r3, [pc, #8]	; (8009154 <HAL_RCC_GetHCLKFreq+0x10>)
 800914a:	681b      	ldr	r3, [r3, #0]
}
 800914c:	4618      	mov	r0, r3
 800914e:	46bd      	mov	sp, r7
 8009150:	bc80      	pop	{r7}
 8009152:	4770      	bx	lr
 8009154:	20000000 	.word	0x20000000

08009158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800915c:	f7ff fff2 	bl	8009144 <HAL_RCC_GetHCLKFreq>
 8009160:	4602      	mov	r2, r0
 8009162:	4b05      	ldr	r3, [pc, #20]	; (8009178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	0a1b      	lsrs	r3, r3, #8
 8009168:	f003 0307 	and.w	r3, r3, #7
 800916c:	4903      	ldr	r1, [pc, #12]	; (800917c <HAL_RCC_GetPCLK1Freq+0x24>)
 800916e:	5ccb      	ldrb	r3, [r1, r3]
 8009170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009174:	4618      	mov	r0, r3
 8009176:	bd80      	pop	{r7, pc}
 8009178:	40023800 	.word	0x40023800
 800917c:	0800cc38 	.word	0x0800cc38

08009180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009184:	f7ff ffde 	bl	8009144 <HAL_RCC_GetHCLKFreq>
 8009188:	4602      	mov	r2, r0
 800918a:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	0adb      	lsrs	r3, r3, #11
 8009190:	f003 0307 	and.w	r3, r3, #7
 8009194:	4903      	ldr	r1, [pc, #12]	; (80091a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009196:	5ccb      	ldrb	r3, [r1, r3]
 8009198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800919c:	4618      	mov	r0, r3
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	40023800 	.word	0x40023800
 80091a4:	0800cc38 	.word	0x0800cc38

080091a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80091b0:	2300      	movs	r3, #0
 80091b2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80091b4:	4b29      	ldr	r3, [pc, #164]	; (800925c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d12c      	bne.n	800921a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80091c0:	4b26      	ldr	r3, [pc, #152]	; (800925c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d005      	beq.n	80091d8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80091cc:	4b24      	ldr	r3, [pc, #144]	; (8009260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80091d4:	617b      	str	r3, [r7, #20]
 80091d6:	e016      	b.n	8009206 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091d8:	4b20      	ldr	r3, [pc, #128]	; (800925c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	4a1f      	ldr	r2, [pc, #124]	; (800925c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80091de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091e2:	6253      	str	r3, [r2, #36]	; 0x24
 80091e4:	4b1d      	ldr	r3, [pc, #116]	; (800925c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80091f0:	4b1b      	ldr	r3, [pc, #108]	; (8009260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80091f8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80091fa:	4b18      	ldr	r3, [pc, #96]	; (800925c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	4a17      	ldr	r2, [pc, #92]	; (800925c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009204:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800920c:	d105      	bne.n	800921a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009214:	d101      	bne.n	800921a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8009216:	2301      	movs	r3, #1
 8009218:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d105      	bne.n	800922c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8009220:	4b10      	ldr	r3, [pc, #64]	; (8009264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a0f      	ldr	r2, [pc, #60]	; (8009264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009226:	f043 0304 	orr.w	r3, r3, #4
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f023 0201 	bic.w	r2, r3, #1
 8009234:	490b      	ldr	r1, [pc, #44]	; (8009264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	4313      	orrs	r3, r2
 800923a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800923c:	4b09      	ldr	r3, [pc, #36]	; (8009264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	429a      	cmp	r2, r3
 8009248:	d001      	beq.n	800924e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	bc80      	pop	{r7}
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	40023800 	.word	0x40023800
 8009260:	40007000 	.word	0x40007000
 8009264:	40023c00 	.word	0x40023c00

08009268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e031      	b.n	80092de <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d106      	bne.n	8009294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7f9 fbf2 	bl	8002a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2202      	movs	r2, #2
 8009298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	3304      	adds	r3, #4
 80092a4:	4619      	mov	r1, r3
 80092a6:	4610      	mov	r0, r2
 80092a8:	f000 f8e4 	bl	8009474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d101      	bne.n	8009302 <HAL_TIM_ConfigClockSource+0x1c>
 80092fe:	2302      	movs	r3, #2
 8009300:	e0b4      	b.n	800946c <HAL_TIM_ConfigClockSource+0x186>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2202      	movs	r2, #2
 800930e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009320:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009328:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800933a:	d03e      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0xd4>
 800933c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009340:	f200 8087 	bhi.w	8009452 <HAL_TIM_ConfigClockSource+0x16c>
 8009344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009348:	f000 8086 	beq.w	8009458 <HAL_TIM_ConfigClockSource+0x172>
 800934c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009350:	d87f      	bhi.n	8009452 <HAL_TIM_ConfigClockSource+0x16c>
 8009352:	2b70      	cmp	r3, #112	; 0x70
 8009354:	d01a      	beq.n	800938c <HAL_TIM_ConfigClockSource+0xa6>
 8009356:	2b70      	cmp	r3, #112	; 0x70
 8009358:	d87b      	bhi.n	8009452 <HAL_TIM_ConfigClockSource+0x16c>
 800935a:	2b60      	cmp	r3, #96	; 0x60
 800935c:	d050      	beq.n	8009400 <HAL_TIM_ConfigClockSource+0x11a>
 800935e:	2b60      	cmp	r3, #96	; 0x60
 8009360:	d877      	bhi.n	8009452 <HAL_TIM_ConfigClockSource+0x16c>
 8009362:	2b50      	cmp	r3, #80	; 0x50
 8009364:	d03c      	beq.n	80093e0 <HAL_TIM_ConfigClockSource+0xfa>
 8009366:	2b50      	cmp	r3, #80	; 0x50
 8009368:	d873      	bhi.n	8009452 <HAL_TIM_ConfigClockSource+0x16c>
 800936a:	2b40      	cmp	r3, #64	; 0x40
 800936c:	d058      	beq.n	8009420 <HAL_TIM_ConfigClockSource+0x13a>
 800936e:	2b40      	cmp	r3, #64	; 0x40
 8009370:	d86f      	bhi.n	8009452 <HAL_TIM_ConfigClockSource+0x16c>
 8009372:	2b30      	cmp	r3, #48	; 0x30
 8009374:	d064      	beq.n	8009440 <HAL_TIM_ConfigClockSource+0x15a>
 8009376:	2b30      	cmp	r3, #48	; 0x30
 8009378:	d86b      	bhi.n	8009452 <HAL_TIM_ConfigClockSource+0x16c>
 800937a:	2b20      	cmp	r3, #32
 800937c:	d060      	beq.n	8009440 <HAL_TIM_ConfigClockSource+0x15a>
 800937e:	2b20      	cmp	r3, #32
 8009380:	d867      	bhi.n	8009452 <HAL_TIM_ConfigClockSource+0x16c>
 8009382:	2b00      	cmp	r3, #0
 8009384:	d05c      	beq.n	8009440 <HAL_TIM_ConfigClockSource+0x15a>
 8009386:	2b10      	cmp	r3, #16
 8009388:	d05a      	beq.n	8009440 <HAL_TIM_ConfigClockSource+0x15a>
 800938a:	e062      	b.n	8009452 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6818      	ldr	r0, [r3, #0]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	6899      	ldr	r1, [r3, #8]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	f000 f951 	bl	8009642 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	609a      	str	r2, [r3, #8]
      break;
 80093b8:	e04f      	b.n	800945a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6818      	ldr	r0, [r3, #0]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	6899      	ldr	r1, [r3, #8]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	f000 f93a 	bl	8009642 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689a      	ldr	r2, [r3, #8]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093dc:	609a      	str	r2, [r3, #8]
      break;
 80093de:	e03c      	b.n	800945a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6818      	ldr	r0, [r3, #0]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	6859      	ldr	r1, [r3, #4]
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	461a      	mov	r2, r3
 80093ee:	f000 f8b1 	bl	8009554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2150      	movs	r1, #80	; 0x50
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 f908 	bl	800960e <TIM_ITRx_SetConfig>
      break;
 80093fe:	e02c      	b.n	800945a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6818      	ldr	r0, [r3, #0]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	6859      	ldr	r1, [r3, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	461a      	mov	r2, r3
 800940e:	f000 f8cf 	bl	80095b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2160      	movs	r1, #96	; 0x60
 8009418:	4618      	mov	r0, r3
 800941a:	f000 f8f8 	bl	800960e <TIM_ITRx_SetConfig>
      break;
 800941e:	e01c      	b.n	800945a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6818      	ldr	r0, [r3, #0]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	6859      	ldr	r1, [r3, #4]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	461a      	mov	r2, r3
 800942e:	f000 f891 	bl	8009554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2140      	movs	r1, #64	; 0x40
 8009438:	4618      	mov	r0, r3
 800943a:	f000 f8e8 	bl	800960e <TIM_ITRx_SetConfig>
      break;
 800943e:	e00c      	b.n	800945a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4619      	mov	r1, r3
 800944a:	4610      	mov	r0, r2
 800944c:	f000 f8df 	bl	800960e <TIM_ITRx_SetConfig>
      break;
 8009450:	e003      	b.n	800945a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	73fb      	strb	r3, [r7, #15]
      break;
 8009456:	e000      	b.n	800945a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009458:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800946a:	7bfb      	ldrb	r3, [r7, #15]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800948a:	d00f      	beq.n	80094ac <TIM_Base_SetConfig+0x38>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a2b      	ldr	r2, [pc, #172]	; (800953c <TIM_Base_SetConfig+0xc8>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d00b      	beq.n	80094ac <TIM_Base_SetConfig+0x38>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a2a      	ldr	r2, [pc, #168]	; (8009540 <TIM_Base_SetConfig+0xcc>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d007      	beq.n	80094ac <TIM_Base_SetConfig+0x38>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a29      	ldr	r2, [pc, #164]	; (8009544 <TIM_Base_SetConfig+0xd0>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d003      	beq.n	80094ac <TIM_Base_SetConfig+0x38>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a28      	ldr	r2, [pc, #160]	; (8009548 <TIM_Base_SetConfig+0xd4>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d108      	bne.n	80094be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c4:	d017      	beq.n	80094f6 <TIM_Base_SetConfig+0x82>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a1c      	ldr	r2, [pc, #112]	; (800953c <TIM_Base_SetConfig+0xc8>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d013      	beq.n	80094f6 <TIM_Base_SetConfig+0x82>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a1b      	ldr	r2, [pc, #108]	; (8009540 <TIM_Base_SetConfig+0xcc>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d00f      	beq.n	80094f6 <TIM_Base_SetConfig+0x82>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a1a      	ldr	r2, [pc, #104]	; (8009544 <TIM_Base_SetConfig+0xd0>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d00b      	beq.n	80094f6 <TIM_Base_SetConfig+0x82>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a19      	ldr	r2, [pc, #100]	; (8009548 <TIM_Base_SetConfig+0xd4>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d007      	beq.n	80094f6 <TIM_Base_SetConfig+0x82>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a18      	ldr	r2, [pc, #96]	; (800954c <TIM_Base_SetConfig+0xd8>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d003      	beq.n	80094f6 <TIM_Base_SetConfig+0x82>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a17      	ldr	r2, [pc, #92]	; (8009550 <TIM_Base_SetConfig+0xdc>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d108      	bne.n	8009508 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	4313      	orrs	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	4313      	orrs	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	689a      	ldr	r2, [r3, #8]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	615a      	str	r2, [r3, #20]
}
 8009532:	bf00      	nop
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr
 800953c:	40000400 	.word	0x40000400
 8009540:	40000800 	.word	0x40000800
 8009544:	40000c00 	.word	0x40000c00
 8009548:	40010800 	.word	0x40010800
 800954c:	40010c00 	.word	0x40010c00
 8009550:	40011000 	.word	0x40011000

08009554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6a1b      	ldr	r3, [r3, #32]
 8009564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	f023 0201 	bic.w	r2, r3, #1
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800957e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	011b      	lsls	r3, r3, #4
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	4313      	orrs	r3, r2
 8009588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	f023 030a 	bic.w	r3, r3, #10
 8009590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	4313      	orrs	r3, r2
 8009598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	621a      	str	r2, [r3, #32]
}
 80095a6:	bf00      	nop
 80095a8:	371c      	adds	r7, #28
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bc80      	pop	{r7}
 80095ae:	4770      	bx	lr

080095b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6a1b      	ldr	r3, [r3, #32]
 80095c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	f023 0210 	bic.w	r2, r3, #16
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	031b      	lsls	r3, r3, #12
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80095ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	011b      	lsls	r3, r3, #4
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	621a      	str	r2, [r3, #32]
}
 8009604:	bf00      	nop
 8009606:	371c      	adds	r7, #28
 8009608:	46bd      	mov	sp, r7
 800960a:	bc80      	pop	{r7}
 800960c:	4770      	bx	lr

0800960e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800960e:	b480      	push	{r7}
 8009610:	b085      	sub	sp, #20
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009624:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	4313      	orrs	r3, r2
 800962c:	f043 0307 	orr.w	r3, r3, #7
 8009630:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	609a      	str	r2, [r3, #8]
}
 8009638:	bf00      	nop
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	bc80      	pop	{r7}
 8009640:	4770      	bx	lr

08009642 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009642:	b480      	push	{r7}
 8009644:	b087      	sub	sp, #28
 8009646:	af00      	add	r7, sp, #0
 8009648:	60f8      	str	r0, [r7, #12]
 800964a:	60b9      	str	r1, [r7, #8]
 800964c:	607a      	str	r2, [r7, #4]
 800964e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800965c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	021a      	lsls	r2, r3, #8
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	431a      	orrs	r2, r3
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	4313      	orrs	r3, r2
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	4313      	orrs	r3, r2
 800966e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	609a      	str	r2, [r3, #8]
}
 8009676:	bf00      	nop
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	bc80      	pop	{r7}
 800967e:	4770      	bx	lr

08009680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009690:	2b01      	cmp	r3, #1
 8009692:	d101      	bne.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009694:	2302      	movs	r3, #2
 8009696:	e046      	b.n	8009726 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2202      	movs	r2, #2
 80096a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096da:	d00e      	beq.n	80096fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a13      	ldr	r2, [pc, #76]	; (8009730 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d009      	beq.n	80096fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a12      	ldr	r2, [pc, #72]	; (8009734 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d004      	beq.n	80096fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a10      	ldr	r2, [pc, #64]	; (8009738 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d10c      	bne.n	8009714 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	4313      	orrs	r3, r2
 800970a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	bc80      	pop	{r7}
 800972e:	4770      	bx	lr
 8009730:	40000400 	.word	0x40000400
 8009734:	40000800 	.word	0x40000800
 8009738:	40010800 	.word	0x40010800

0800973c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e042      	b.n	80097d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d106      	bne.n	8009768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7f9 f9d0 	bl	8002b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2224      	movs	r2, #36	; 0x24
 800976c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68da      	ldr	r2, [r3, #12]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800977e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f91d 	bl	80099c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	691a      	ldr	r2, [r3, #16]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	695a      	ldr	r2, [r3, #20]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68da      	ldr	r2, [r3, #12]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2220      	movs	r2, #32
 80097c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08a      	sub	sp, #40	; 0x28
 80097e0:	af02      	add	r7, sp, #8
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	4613      	mov	r3, r2
 80097ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	d16d      	bne.n	80098d8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d002      	beq.n	8009808 <HAL_UART_Transmit+0x2c>
 8009802:	88fb      	ldrh	r3, [r7, #6]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e066      	b.n	80098da <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2221      	movs	r2, #33	; 0x21
 8009816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800981a:	f7fb f94d 	bl	8004ab8 <HAL_GetTick>
 800981e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	88fa      	ldrh	r2, [r7, #6]
 8009824:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009834:	d108      	bne.n	8009848 <HAL_UART_Transmit+0x6c>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d104      	bne.n	8009848 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	61bb      	str	r3, [r7, #24]
 8009846:	e003      	b.n	8009850 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800984c:	2300      	movs	r3, #0
 800984e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009850:	e02a      	b.n	80098a8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2200      	movs	r2, #0
 800985a:	2180      	movs	r1, #128	; 0x80
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 f840 	bl	80098e2 <UART_WaitOnFlagUntilTimeout>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	e036      	b.n	80098da <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10b      	bne.n	800988a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	881b      	ldrh	r3, [r3, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009880:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	3302      	adds	r3, #2
 8009886:	61bb      	str	r3, [r7, #24]
 8009888:	e007      	b.n	800989a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	781a      	ldrb	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	3301      	adds	r3, #1
 8009898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800989e:	b29b      	uxth	r3, r3
 80098a0:	3b01      	subs	r3, #1
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1cf      	bne.n	8009852 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	2200      	movs	r2, #0
 80098ba:	2140      	movs	r1, #64	; 0x40
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f000 f810 	bl	80098e2 <UART_WaitOnFlagUntilTimeout>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80098c8:	2303      	movs	r3, #3
 80098ca:	e006      	b.n	80098da <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	e000      	b.n	80098da <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80098d8:	2302      	movs	r3, #2
  }
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3720      	adds	r7, #32
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b090      	sub	sp, #64	; 0x40
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	60f8      	str	r0, [r7, #12]
 80098ea:	60b9      	str	r1, [r7, #8]
 80098ec:	603b      	str	r3, [r7, #0]
 80098ee:	4613      	mov	r3, r2
 80098f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098f2:	e050      	b.n	8009996 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fa:	d04c      	beq.n	8009996 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80098fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d007      	beq.n	8009912 <UART_WaitOnFlagUntilTimeout+0x30>
 8009902:	f7fb f8d9 	bl	8004ab8 <HAL_GetTick>
 8009906:	4602      	mov	r2, r0
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800990e:	429a      	cmp	r2, r3
 8009910:	d241      	bcs.n	8009996 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	330c      	adds	r3, #12
 8009918:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	e853 3f00 	ldrex	r3, [r3]
 8009920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	330c      	adds	r3, #12
 8009930:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009932:	637a      	str	r2, [r7, #52]	; 0x34
 8009934:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800993a:	e841 2300 	strex	r3, r2, [r1]
 800993e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1e5      	bne.n	8009912 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3314      	adds	r3, #20
 800994c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	613b      	str	r3, [r7, #16]
   return(result);
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	f023 0301 	bic.w	r3, r3, #1
 800995c:	63bb      	str	r3, [r7, #56]	; 0x38
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3314      	adds	r3, #20
 8009964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009966:	623a      	str	r2, [r7, #32]
 8009968:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996a:	69f9      	ldr	r1, [r7, #28]
 800996c:	6a3a      	ldr	r2, [r7, #32]
 800996e:	e841 2300 	strex	r3, r2, [r1]
 8009972:	61bb      	str	r3, [r7, #24]
   return(result);
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1e5      	bne.n	8009946 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2220      	movs	r2, #32
 800997e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2220      	movs	r2, #32
 8009986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e00f      	b.n	80099b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	4013      	ands	r3, r2
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	bf0c      	ite	eq
 80099a6:	2301      	moveq	r3, #1
 80099a8:	2300      	movne	r3, #0
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	461a      	mov	r2, r3
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d09f      	beq.n	80098f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3740      	adds	r7, #64	; 0x40
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
	...

080099c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68da      	ldr	r2, [r3, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	430a      	orrs	r2, r1
 80099dc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	689a      	ldr	r2, [r3, #8]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	431a      	orrs	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	431a      	orrs	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	69db      	ldr	r3, [r3, #28]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009a00:	f023 030c 	bic.w	r3, r3, #12
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	6812      	ldr	r2, [r2, #0]
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	430b      	orrs	r3, r1
 8009a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	699a      	ldr	r2, [r3, #24]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a55      	ldr	r2, [pc, #340]	; (8009b80 <UART_SetConfig+0x1c0>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d103      	bne.n	8009a36 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009a2e:	f7ff fba7 	bl	8009180 <HAL_RCC_GetPCLK2Freq>
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	e002      	b.n	8009a3c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009a36:	f7ff fb8f 	bl	8009158 <HAL_RCC_GetPCLK1Freq>
 8009a3a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a44:	d14c      	bne.n	8009ae0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	009a      	lsls	r2, r3, #2
 8009a50:	441a      	add	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	005b      	lsls	r3, r3, #1
 8009a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a5c:	4a49      	ldr	r2, [pc, #292]	; (8009b84 <UART_SetConfig+0x1c4>)
 8009a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a62:	095b      	lsrs	r3, r3, #5
 8009a64:	0119      	lsls	r1, r3, #4
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009a      	lsls	r2, r3, #2
 8009a70:	441a      	add	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a7c:	4b41      	ldr	r3, [pc, #260]	; (8009b84 <UART_SetConfig+0x1c4>)
 8009a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8009a82:	095b      	lsrs	r3, r3, #5
 8009a84:	2064      	movs	r0, #100	; 0x64
 8009a86:	fb00 f303 	mul.w	r3, r0, r3
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	00db      	lsls	r3, r3, #3
 8009a8e:	3332      	adds	r3, #50	; 0x32
 8009a90:	4a3c      	ldr	r2, [pc, #240]	; (8009b84 <UART_SetConfig+0x1c4>)
 8009a92:	fba2 2303 	umull	r2, r3, r2, r3
 8009a96:	095b      	lsrs	r3, r3, #5
 8009a98:	005b      	lsls	r3, r3, #1
 8009a9a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a9e:	4419      	add	r1, r3
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	009a      	lsls	r2, r3, #2
 8009aaa:	441a      	add	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	005b      	lsls	r3, r3, #1
 8009ab2:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ab6:	4b33      	ldr	r3, [pc, #204]	; (8009b84 <UART_SetConfig+0x1c4>)
 8009ab8:	fba3 0302 	umull	r0, r3, r3, r2
 8009abc:	095b      	lsrs	r3, r3, #5
 8009abe:	2064      	movs	r0, #100	; 0x64
 8009ac0:	fb00 f303 	mul.w	r3, r0, r3
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	00db      	lsls	r3, r3, #3
 8009ac8:	3332      	adds	r3, #50	; 0x32
 8009aca:	4a2e      	ldr	r2, [pc, #184]	; (8009b84 <UART_SetConfig+0x1c4>)
 8009acc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad0:	095b      	lsrs	r3, r3, #5
 8009ad2:	f003 0207 	and.w	r2, r3, #7
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	440a      	add	r2, r1
 8009adc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ade:	e04a      	b.n	8009b76 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	009a      	lsls	r2, r3, #2
 8009aea:	441a      	add	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af6:	4a23      	ldr	r2, [pc, #140]	; (8009b84 <UART_SetConfig+0x1c4>)
 8009af8:	fba2 2303 	umull	r2, r3, r2, r3
 8009afc:	095b      	lsrs	r3, r3, #5
 8009afe:	0119      	lsls	r1, r3, #4
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	4613      	mov	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	009a      	lsls	r2, r3, #2
 8009b0a:	441a      	add	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b16:	4b1b      	ldr	r3, [pc, #108]	; (8009b84 <UART_SetConfig+0x1c4>)
 8009b18:	fba3 0302 	umull	r0, r3, r3, r2
 8009b1c:	095b      	lsrs	r3, r3, #5
 8009b1e:	2064      	movs	r0, #100	; 0x64
 8009b20:	fb00 f303 	mul.w	r3, r0, r3
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	011b      	lsls	r3, r3, #4
 8009b28:	3332      	adds	r3, #50	; 0x32
 8009b2a:	4a16      	ldr	r2, [pc, #88]	; (8009b84 <UART_SetConfig+0x1c4>)
 8009b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b30:	095b      	lsrs	r3, r3, #5
 8009b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b36:	4419      	add	r1, r3
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	4413      	add	r3, r2
 8009b40:	009a      	lsls	r2, r3, #2
 8009b42:	441a      	add	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b4e:	4b0d      	ldr	r3, [pc, #52]	; (8009b84 <UART_SetConfig+0x1c4>)
 8009b50:	fba3 0302 	umull	r0, r3, r3, r2
 8009b54:	095b      	lsrs	r3, r3, #5
 8009b56:	2064      	movs	r0, #100	; 0x64
 8009b58:	fb00 f303 	mul.w	r3, r0, r3
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	011b      	lsls	r3, r3, #4
 8009b60:	3332      	adds	r3, #50	; 0x32
 8009b62:	4a08      	ldr	r2, [pc, #32]	; (8009b84 <UART_SetConfig+0x1c4>)
 8009b64:	fba2 2303 	umull	r2, r3, r2, r3
 8009b68:	095b      	lsrs	r3, r3, #5
 8009b6a:	f003 020f 	and.w	r2, r3, #15
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	440a      	add	r2, r1
 8009b74:	609a      	str	r2, [r3, #8]
}
 8009b76:	bf00      	nop
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	40013800 	.word	0x40013800
 8009b84:	51eb851f 	.word	0x51eb851f

08009b88 <__cxa_pure_virtual>:
 8009b88:	b508      	push	{r3, lr}
 8009b8a:	f000 f80d 	bl	8009ba8 <_ZSt9terminatev>

08009b8e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009b8e:	b508      	push	{r3, lr}
 8009b90:	4780      	blx	r0
 8009b92:	f000 f80e 	bl	8009bb2 <abort>
	...

08009b98 <_ZSt13get_terminatev>:
 8009b98:	4b02      	ldr	r3, [pc, #8]	; (8009ba4 <_ZSt13get_terminatev+0xc>)
 8009b9a:	6818      	ldr	r0, [r3, #0]
 8009b9c:	f3bf 8f5b 	dmb	ish
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	20000024 	.word	0x20000024

08009ba8 <_ZSt9terminatev>:
 8009ba8:	b508      	push	{r3, lr}
 8009baa:	f7ff fff5 	bl	8009b98 <_ZSt13get_terminatev>
 8009bae:	f7ff ffee 	bl	8009b8e <_ZN10__cxxabiv111__terminateEPFvvE>

08009bb2 <abort>:
 8009bb2:	2006      	movs	r0, #6
 8009bb4:	b508      	push	{r3, lr}
 8009bb6:	f000 fd73 	bl	800a6a0 <raise>
 8009bba:	2001      	movs	r0, #1
 8009bbc:	f7f8 fe65 	bl	800288a <_exit>

08009bc0 <__errno>:
 8009bc0:	4b01      	ldr	r3, [pc, #4]	; (8009bc8 <__errno+0x8>)
 8009bc2:	6818      	ldr	r0, [r3, #0]
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	20000028 	.word	0x20000028

08009bcc <__libc_init_array>:
 8009bcc:	b570      	push	{r4, r5, r6, lr}
 8009bce:	2600      	movs	r6, #0
 8009bd0:	4d0c      	ldr	r5, [pc, #48]	; (8009c04 <__libc_init_array+0x38>)
 8009bd2:	4c0d      	ldr	r4, [pc, #52]	; (8009c08 <__libc_init_array+0x3c>)
 8009bd4:	1b64      	subs	r4, r4, r5
 8009bd6:	10a4      	asrs	r4, r4, #2
 8009bd8:	42a6      	cmp	r6, r4
 8009bda:	d109      	bne.n	8009bf0 <__libc_init_array+0x24>
 8009bdc:	f002 ff44 	bl	800ca68 <_init>
 8009be0:	2600      	movs	r6, #0
 8009be2:	4d0a      	ldr	r5, [pc, #40]	; (8009c0c <__libc_init_array+0x40>)
 8009be4:	4c0a      	ldr	r4, [pc, #40]	; (8009c10 <__libc_init_array+0x44>)
 8009be6:	1b64      	subs	r4, r4, r5
 8009be8:	10a4      	asrs	r4, r4, #2
 8009bea:	42a6      	cmp	r6, r4
 8009bec:	d105      	bne.n	8009bfa <__libc_init_array+0x2e>
 8009bee:	bd70      	pop	{r4, r5, r6, pc}
 8009bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf4:	4798      	blx	r3
 8009bf6:	3601      	adds	r6, #1
 8009bf8:	e7ee      	b.n	8009bd8 <__libc_init_array+0xc>
 8009bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bfe:	4798      	blx	r3
 8009c00:	3601      	adds	r6, #1
 8009c02:	e7f2      	b.n	8009bea <__libc_init_array+0x1e>
 8009c04:	0800e0cc 	.word	0x0800e0cc
 8009c08:	0800e0cc 	.word	0x0800e0cc
 8009c0c:	0800e0cc 	.word	0x0800e0cc
 8009c10:	0800e0d8 	.word	0x0800e0d8

08009c14 <memcpy>:
 8009c14:	440a      	add	r2, r1
 8009c16:	4291      	cmp	r1, r2
 8009c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c1c:	d100      	bne.n	8009c20 <memcpy+0xc>
 8009c1e:	4770      	bx	lr
 8009c20:	b510      	push	{r4, lr}
 8009c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c26:	4291      	cmp	r1, r2
 8009c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c2c:	d1f9      	bne.n	8009c22 <memcpy+0xe>
 8009c2e:	bd10      	pop	{r4, pc}

08009c30 <memmove>:
 8009c30:	4288      	cmp	r0, r1
 8009c32:	b510      	push	{r4, lr}
 8009c34:	eb01 0402 	add.w	r4, r1, r2
 8009c38:	d902      	bls.n	8009c40 <memmove+0x10>
 8009c3a:	4284      	cmp	r4, r0
 8009c3c:	4623      	mov	r3, r4
 8009c3e:	d807      	bhi.n	8009c50 <memmove+0x20>
 8009c40:	1e43      	subs	r3, r0, #1
 8009c42:	42a1      	cmp	r1, r4
 8009c44:	d008      	beq.n	8009c58 <memmove+0x28>
 8009c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c4e:	e7f8      	b.n	8009c42 <memmove+0x12>
 8009c50:	4601      	mov	r1, r0
 8009c52:	4402      	add	r2, r0
 8009c54:	428a      	cmp	r2, r1
 8009c56:	d100      	bne.n	8009c5a <memmove+0x2a>
 8009c58:	bd10      	pop	{r4, pc}
 8009c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c62:	e7f7      	b.n	8009c54 <memmove+0x24>

08009c64 <memset>:
 8009c64:	4603      	mov	r3, r0
 8009c66:	4402      	add	r2, r0
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d100      	bne.n	8009c6e <memset+0xa>
 8009c6c:	4770      	bx	lr
 8009c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c72:	e7f9      	b.n	8009c68 <memset+0x4>

08009c74 <__cvt>:
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c7a:	461f      	mov	r7, r3
 8009c7c:	bfbb      	ittet	lt
 8009c7e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009c82:	461f      	movlt	r7, r3
 8009c84:	2300      	movge	r3, #0
 8009c86:	232d      	movlt	r3, #45	; 0x2d
 8009c88:	b088      	sub	sp, #32
 8009c8a:	4614      	mov	r4, r2
 8009c8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009c90:	7013      	strb	r3, [r2, #0]
 8009c92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c94:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009c98:	f023 0820 	bic.w	r8, r3, #32
 8009c9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ca0:	d005      	beq.n	8009cae <__cvt+0x3a>
 8009ca2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009ca6:	d100      	bne.n	8009caa <__cvt+0x36>
 8009ca8:	3501      	adds	r5, #1
 8009caa:	2302      	movs	r3, #2
 8009cac:	e000      	b.n	8009cb0 <__cvt+0x3c>
 8009cae:	2303      	movs	r3, #3
 8009cb0:	aa07      	add	r2, sp, #28
 8009cb2:	9204      	str	r2, [sp, #16]
 8009cb4:	aa06      	add	r2, sp, #24
 8009cb6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009cba:	e9cd 3500 	strd	r3, r5, [sp]
 8009cbe:	4622      	mov	r2, r4
 8009cc0:	463b      	mov	r3, r7
 8009cc2:	f000 fe79 	bl	800a9b8 <_dtoa_r>
 8009cc6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009cca:	4606      	mov	r6, r0
 8009ccc:	d102      	bne.n	8009cd4 <__cvt+0x60>
 8009cce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cd0:	07db      	lsls	r3, r3, #31
 8009cd2:	d522      	bpl.n	8009d1a <__cvt+0xa6>
 8009cd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009cd8:	eb06 0905 	add.w	r9, r6, r5
 8009cdc:	d110      	bne.n	8009d00 <__cvt+0x8c>
 8009cde:	7833      	ldrb	r3, [r6, #0]
 8009ce0:	2b30      	cmp	r3, #48	; 0x30
 8009ce2:	d10a      	bne.n	8009cfa <__cvt+0x86>
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	4620      	mov	r0, r4
 8009cea:	4639      	mov	r1, r7
 8009cec:	f7f6 fe74 	bl	80009d8 <__aeabi_dcmpeq>
 8009cf0:	b918      	cbnz	r0, 8009cfa <__cvt+0x86>
 8009cf2:	f1c5 0501 	rsb	r5, r5, #1
 8009cf6:	f8ca 5000 	str.w	r5, [sl]
 8009cfa:	f8da 3000 	ldr.w	r3, [sl]
 8009cfe:	4499      	add	r9, r3
 8009d00:	2200      	movs	r2, #0
 8009d02:	2300      	movs	r3, #0
 8009d04:	4620      	mov	r0, r4
 8009d06:	4639      	mov	r1, r7
 8009d08:	f7f6 fe66 	bl	80009d8 <__aeabi_dcmpeq>
 8009d0c:	b108      	cbz	r0, 8009d12 <__cvt+0x9e>
 8009d0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009d12:	2230      	movs	r2, #48	; 0x30
 8009d14:	9b07      	ldr	r3, [sp, #28]
 8009d16:	454b      	cmp	r3, r9
 8009d18:	d307      	bcc.n	8009d2a <__cvt+0xb6>
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	9b07      	ldr	r3, [sp, #28]
 8009d1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d20:	1b9b      	subs	r3, r3, r6
 8009d22:	6013      	str	r3, [r2, #0]
 8009d24:	b008      	add	sp, #32
 8009d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d2a:	1c59      	adds	r1, r3, #1
 8009d2c:	9107      	str	r1, [sp, #28]
 8009d2e:	701a      	strb	r2, [r3, #0]
 8009d30:	e7f0      	b.n	8009d14 <__cvt+0xa0>

08009d32 <__exponent>:
 8009d32:	4603      	mov	r3, r0
 8009d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d36:	2900      	cmp	r1, #0
 8009d38:	f803 2b02 	strb.w	r2, [r3], #2
 8009d3c:	bfb6      	itet	lt
 8009d3e:	222d      	movlt	r2, #45	; 0x2d
 8009d40:	222b      	movge	r2, #43	; 0x2b
 8009d42:	4249      	neglt	r1, r1
 8009d44:	2909      	cmp	r1, #9
 8009d46:	7042      	strb	r2, [r0, #1]
 8009d48:	dd2b      	ble.n	8009da2 <__exponent+0x70>
 8009d4a:	f10d 0407 	add.w	r4, sp, #7
 8009d4e:	46a4      	mov	ip, r4
 8009d50:	270a      	movs	r7, #10
 8009d52:	fb91 f6f7 	sdiv	r6, r1, r7
 8009d56:	460a      	mov	r2, r1
 8009d58:	46a6      	mov	lr, r4
 8009d5a:	fb07 1516 	mls	r5, r7, r6, r1
 8009d5e:	2a63      	cmp	r2, #99	; 0x63
 8009d60:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009d64:	4631      	mov	r1, r6
 8009d66:	f104 34ff 	add.w	r4, r4, #4294967295
 8009d6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009d6e:	dcf0      	bgt.n	8009d52 <__exponent+0x20>
 8009d70:	3130      	adds	r1, #48	; 0x30
 8009d72:	f1ae 0502 	sub.w	r5, lr, #2
 8009d76:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	1c44      	adds	r4, r0, #1
 8009d7e:	4561      	cmp	r1, ip
 8009d80:	d30a      	bcc.n	8009d98 <__exponent+0x66>
 8009d82:	f10d 0209 	add.w	r2, sp, #9
 8009d86:	eba2 020e 	sub.w	r2, r2, lr
 8009d8a:	4565      	cmp	r5, ip
 8009d8c:	bf88      	it	hi
 8009d8e:	2200      	movhi	r2, #0
 8009d90:	4413      	add	r3, r2
 8009d92:	1a18      	subs	r0, r3, r0
 8009d94:	b003      	add	sp, #12
 8009d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d9c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009da0:	e7ed      	b.n	8009d7e <__exponent+0x4c>
 8009da2:	2330      	movs	r3, #48	; 0x30
 8009da4:	3130      	adds	r1, #48	; 0x30
 8009da6:	7083      	strb	r3, [r0, #2]
 8009da8:	70c1      	strb	r1, [r0, #3]
 8009daa:	1d03      	adds	r3, r0, #4
 8009dac:	e7f1      	b.n	8009d92 <__exponent+0x60>
	...

08009db0 <_printf_float>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	b091      	sub	sp, #68	; 0x44
 8009db6:	460c      	mov	r4, r1
 8009db8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009dbc:	4616      	mov	r6, r2
 8009dbe:	461f      	mov	r7, r3
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	f001 fd9f 	bl	800b904 <_localeconv_r>
 8009dc6:	6803      	ldr	r3, [r0, #0]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	9309      	str	r3, [sp, #36]	; 0x24
 8009dcc:	f7f6 f9d8 	bl	8000180 <strlen>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	930e      	str	r3, [sp, #56]	; 0x38
 8009dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8009dd8:	900a      	str	r0, [sp, #40]	; 0x28
 8009dda:	3307      	adds	r3, #7
 8009ddc:	f023 0307 	bic.w	r3, r3, #7
 8009de0:	f103 0208 	add.w	r2, r3, #8
 8009de4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009de8:	f8d4 b000 	ldr.w	fp, [r4]
 8009dec:	f8c8 2000 	str.w	r2, [r8]
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009df8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009dfc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009e00:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e02:	f04f 32ff 	mov.w	r2, #4294967295
 8009e06:	4640      	mov	r0, r8
 8009e08:	4b9c      	ldr	r3, [pc, #624]	; (800a07c <_printf_float+0x2cc>)
 8009e0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e0c:	f7f6 fe16 	bl	8000a3c <__aeabi_dcmpun>
 8009e10:	bb70      	cbnz	r0, 8009e70 <_printf_float+0xc0>
 8009e12:	f04f 32ff 	mov.w	r2, #4294967295
 8009e16:	4640      	mov	r0, r8
 8009e18:	4b98      	ldr	r3, [pc, #608]	; (800a07c <_printf_float+0x2cc>)
 8009e1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e1c:	f7f6 fdf0 	bl	8000a00 <__aeabi_dcmple>
 8009e20:	bb30      	cbnz	r0, 8009e70 <_printf_float+0xc0>
 8009e22:	2200      	movs	r2, #0
 8009e24:	2300      	movs	r3, #0
 8009e26:	4640      	mov	r0, r8
 8009e28:	4651      	mov	r1, sl
 8009e2a:	f7f6 fddf 	bl	80009ec <__aeabi_dcmplt>
 8009e2e:	b110      	cbz	r0, 8009e36 <_printf_float+0x86>
 8009e30:	232d      	movs	r3, #45	; 0x2d
 8009e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e36:	4b92      	ldr	r3, [pc, #584]	; (800a080 <_printf_float+0x2d0>)
 8009e38:	4892      	ldr	r0, [pc, #584]	; (800a084 <_printf_float+0x2d4>)
 8009e3a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009e3e:	bf94      	ite	ls
 8009e40:	4698      	movls	r8, r3
 8009e42:	4680      	movhi	r8, r0
 8009e44:	2303      	movs	r3, #3
 8009e46:	f04f 0a00 	mov.w	sl, #0
 8009e4a:	6123      	str	r3, [r4, #16]
 8009e4c:	f02b 0304 	bic.w	r3, fp, #4
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	4633      	mov	r3, r6
 8009e54:	4621      	mov	r1, r4
 8009e56:	4628      	mov	r0, r5
 8009e58:	9700      	str	r7, [sp, #0]
 8009e5a:	aa0f      	add	r2, sp, #60	; 0x3c
 8009e5c:	f000 f9d4 	bl	800a208 <_printf_common>
 8009e60:	3001      	adds	r0, #1
 8009e62:	f040 8090 	bne.w	8009f86 <_printf_float+0x1d6>
 8009e66:	f04f 30ff 	mov.w	r0, #4294967295
 8009e6a:	b011      	add	sp, #68	; 0x44
 8009e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	4642      	mov	r2, r8
 8009e72:	4653      	mov	r3, sl
 8009e74:	4640      	mov	r0, r8
 8009e76:	4651      	mov	r1, sl
 8009e78:	f7f6 fde0 	bl	8000a3c <__aeabi_dcmpun>
 8009e7c:	b148      	cbz	r0, 8009e92 <_printf_float+0xe2>
 8009e7e:	f1ba 0f00 	cmp.w	sl, #0
 8009e82:	bfb8      	it	lt
 8009e84:	232d      	movlt	r3, #45	; 0x2d
 8009e86:	4880      	ldr	r0, [pc, #512]	; (800a088 <_printf_float+0x2d8>)
 8009e88:	bfb8      	it	lt
 8009e8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009e8e:	4b7f      	ldr	r3, [pc, #508]	; (800a08c <_printf_float+0x2dc>)
 8009e90:	e7d3      	b.n	8009e3a <_printf_float+0x8a>
 8009e92:	6863      	ldr	r3, [r4, #4]
 8009e94:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	d142      	bne.n	8009f22 <_printf_float+0x172>
 8009e9c:	2306      	movs	r3, #6
 8009e9e:	6063      	str	r3, [r4, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	9206      	str	r2, [sp, #24]
 8009ea4:	aa0e      	add	r2, sp, #56	; 0x38
 8009ea6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009eaa:	aa0d      	add	r2, sp, #52	; 0x34
 8009eac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009eb0:	9203      	str	r2, [sp, #12]
 8009eb2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009eb6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009eba:	6023      	str	r3, [r4, #0]
 8009ebc:	6863      	ldr	r3, [r4, #4]
 8009ebe:	4642      	mov	r2, r8
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	4653      	mov	r3, sl
 8009ec6:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ec8:	f7ff fed4 	bl	8009c74 <__cvt>
 8009ecc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ece:	4680      	mov	r8, r0
 8009ed0:	2947      	cmp	r1, #71	; 0x47
 8009ed2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009ed4:	d108      	bne.n	8009ee8 <_printf_float+0x138>
 8009ed6:	1cc8      	adds	r0, r1, #3
 8009ed8:	db02      	blt.n	8009ee0 <_printf_float+0x130>
 8009eda:	6863      	ldr	r3, [r4, #4]
 8009edc:	4299      	cmp	r1, r3
 8009ede:	dd40      	ble.n	8009f62 <_printf_float+0x1b2>
 8009ee0:	f1a9 0902 	sub.w	r9, r9, #2
 8009ee4:	fa5f f989 	uxtb.w	r9, r9
 8009ee8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009eec:	d81f      	bhi.n	8009f2e <_printf_float+0x17e>
 8009eee:	464a      	mov	r2, r9
 8009ef0:	3901      	subs	r1, #1
 8009ef2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009ef6:	910d      	str	r1, [sp, #52]	; 0x34
 8009ef8:	f7ff ff1b 	bl	8009d32 <__exponent>
 8009efc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009efe:	4682      	mov	sl, r0
 8009f00:	1813      	adds	r3, r2, r0
 8009f02:	2a01      	cmp	r2, #1
 8009f04:	6123      	str	r3, [r4, #16]
 8009f06:	dc02      	bgt.n	8009f0e <_printf_float+0x15e>
 8009f08:	6822      	ldr	r2, [r4, #0]
 8009f0a:	07d2      	lsls	r2, r2, #31
 8009f0c:	d501      	bpl.n	8009f12 <_printf_float+0x162>
 8009f0e:	3301      	adds	r3, #1
 8009f10:	6123      	str	r3, [r4, #16]
 8009f12:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d09b      	beq.n	8009e52 <_printf_float+0xa2>
 8009f1a:	232d      	movs	r3, #45	; 0x2d
 8009f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f20:	e797      	b.n	8009e52 <_printf_float+0xa2>
 8009f22:	2947      	cmp	r1, #71	; 0x47
 8009f24:	d1bc      	bne.n	8009ea0 <_printf_float+0xf0>
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1ba      	bne.n	8009ea0 <_printf_float+0xf0>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e7b7      	b.n	8009e9e <_printf_float+0xee>
 8009f2e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009f32:	d118      	bne.n	8009f66 <_printf_float+0x1b6>
 8009f34:	2900      	cmp	r1, #0
 8009f36:	6863      	ldr	r3, [r4, #4]
 8009f38:	dd0b      	ble.n	8009f52 <_printf_float+0x1a2>
 8009f3a:	6121      	str	r1, [r4, #16]
 8009f3c:	b913      	cbnz	r3, 8009f44 <_printf_float+0x194>
 8009f3e:	6822      	ldr	r2, [r4, #0]
 8009f40:	07d0      	lsls	r0, r2, #31
 8009f42:	d502      	bpl.n	8009f4a <_printf_float+0x19a>
 8009f44:	3301      	adds	r3, #1
 8009f46:	440b      	add	r3, r1
 8009f48:	6123      	str	r3, [r4, #16]
 8009f4a:	f04f 0a00 	mov.w	sl, #0
 8009f4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009f50:	e7df      	b.n	8009f12 <_printf_float+0x162>
 8009f52:	b913      	cbnz	r3, 8009f5a <_printf_float+0x1aa>
 8009f54:	6822      	ldr	r2, [r4, #0]
 8009f56:	07d2      	lsls	r2, r2, #31
 8009f58:	d501      	bpl.n	8009f5e <_printf_float+0x1ae>
 8009f5a:	3302      	adds	r3, #2
 8009f5c:	e7f4      	b.n	8009f48 <_printf_float+0x198>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e7f2      	b.n	8009f48 <_printf_float+0x198>
 8009f62:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f68:	4299      	cmp	r1, r3
 8009f6a:	db05      	blt.n	8009f78 <_printf_float+0x1c8>
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	6121      	str	r1, [r4, #16]
 8009f70:	07d8      	lsls	r0, r3, #31
 8009f72:	d5ea      	bpl.n	8009f4a <_printf_float+0x19a>
 8009f74:	1c4b      	adds	r3, r1, #1
 8009f76:	e7e7      	b.n	8009f48 <_printf_float+0x198>
 8009f78:	2900      	cmp	r1, #0
 8009f7a:	bfcc      	ite	gt
 8009f7c:	2201      	movgt	r2, #1
 8009f7e:	f1c1 0202 	rsble	r2, r1, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	e7e0      	b.n	8009f48 <_printf_float+0x198>
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	055a      	lsls	r2, r3, #21
 8009f8a:	d407      	bmi.n	8009f9c <_printf_float+0x1ec>
 8009f8c:	6923      	ldr	r3, [r4, #16]
 8009f8e:	4642      	mov	r2, r8
 8009f90:	4631      	mov	r1, r6
 8009f92:	4628      	mov	r0, r5
 8009f94:	47b8      	blx	r7
 8009f96:	3001      	adds	r0, #1
 8009f98:	d12b      	bne.n	8009ff2 <_printf_float+0x242>
 8009f9a:	e764      	b.n	8009e66 <_printf_float+0xb6>
 8009f9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009fa0:	f240 80dd 	bls.w	800a15e <_printf_float+0x3ae>
 8009fa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fa8:	2200      	movs	r2, #0
 8009faa:	2300      	movs	r3, #0
 8009fac:	f7f6 fd14 	bl	80009d8 <__aeabi_dcmpeq>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d033      	beq.n	800a01c <_printf_float+0x26c>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	4628      	mov	r0, r5
 8009fba:	4a35      	ldr	r2, [pc, #212]	; (800a090 <_printf_float+0x2e0>)
 8009fbc:	47b8      	blx	r7
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	f43f af51 	beq.w	8009e66 <_printf_float+0xb6>
 8009fc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	db02      	blt.n	8009fd2 <_printf_float+0x222>
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	07d8      	lsls	r0, r3, #31
 8009fd0:	d50f      	bpl.n	8009ff2 <_printf_float+0x242>
 8009fd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4628      	mov	r0, r5
 8009fda:	47b8      	blx	r7
 8009fdc:	3001      	adds	r0, #1
 8009fde:	f43f af42 	beq.w	8009e66 <_printf_float+0xb6>
 8009fe2:	f04f 0800 	mov.w	r8, #0
 8009fe6:	f104 091a 	add.w	r9, r4, #26
 8009fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fec:	3b01      	subs	r3, #1
 8009fee:	4543      	cmp	r3, r8
 8009ff0:	dc09      	bgt.n	800a006 <_printf_float+0x256>
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	079b      	lsls	r3, r3, #30
 8009ff6:	f100 8102 	bmi.w	800a1fe <_printf_float+0x44e>
 8009ffa:	68e0      	ldr	r0, [r4, #12]
 8009ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ffe:	4298      	cmp	r0, r3
 800a000:	bfb8      	it	lt
 800a002:	4618      	movlt	r0, r3
 800a004:	e731      	b.n	8009e6a <_printf_float+0xba>
 800a006:	2301      	movs	r3, #1
 800a008:	464a      	mov	r2, r9
 800a00a:	4631      	mov	r1, r6
 800a00c:	4628      	mov	r0, r5
 800a00e:	47b8      	blx	r7
 800a010:	3001      	adds	r0, #1
 800a012:	f43f af28 	beq.w	8009e66 <_printf_float+0xb6>
 800a016:	f108 0801 	add.w	r8, r8, #1
 800a01a:	e7e6      	b.n	8009fea <_printf_float+0x23a>
 800a01c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a01e:	2b00      	cmp	r3, #0
 800a020:	dc38      	bgt.n	800a094 <_printf_float+0x2e4>
 800a022:	2301      	movs	r3, #1
 800a024:	4631      	mov	r1, r6
 800a026:	4628      	mov	r0, r5
 800a028:	4a19      	ldr	r2, [pc, #100]	; (800a090 <_printf_float+0x2e0>)
 800a02a:	47b8      	blx	r7
 800a02c:	3001      	adds	r0, #1
 800a02e:	f43f af1a 	beq.w	8009e66 <_printf_float+0xb6>
 800a032:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a036:	4313      	orrs	r3, r2
 800a038:	d102      	bne.n	800a040 <_printf_float+0x290>
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	07d9      	lsls	r1, r3, #31
 800a03e:	d5d8      	bpl.n	8009ff2 <_printf_float+0x242>
 800a040:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a044:	4631      	mov	r1, r6
 800a046:	4628      	mov	r0, r5
 800a048:	47b8      	blx	r7
 800a04a:	3001      	adds	r0, #1
 800a04c:	f43f af0b 	beq.w	8009e66 <_printf_float+0xb6>
 800a050:	f04f 0900 	mov.w	r9, #0
 800a054:	f104 0a1a 	add.w	sl, r4, #26
 800a058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a05a:	425b      	negs	r3, r3
 800a05c:	454b      	cmp	r3, r9
 800a05e:	dc01      	bgt.n	800a064 <_printf_float+0x2b4>
 800a060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a062:	e794      	b.n	8009f8e <_printf_float+0x1de>
 800a064:	2301      	movs	r3, #1
 800a066:	4652      	mov	r2, sl
 800a068:	4631      	mov	r1, r6
 800a06a:	4628      	mov	r0, r5
 800a06c:	47b8      	blx	r7
 800a06e:	3001      	adds	r0, #1
 800a070:	f43f aef9 	beq.w	8009e66 <_printf_float+0xb6>
 800a074:	f109 0901 	add.w	r9, r9, #1
 800a078:	e7ee      	b.n	800a058 <_printf_float+0x2a8>
 800a07a:	bf00      	nop
 800a07c:	7fefffff 	.word	0x7fefffff
 800a080:	0800dce8 	.word	0x0800dce8
 800a084:	0800dcec 	.word	0x0800dcec
 800a088:	0800dcf4 	.word	0x0800dcf4
 800a08c:	0800dcf0 	.word	0x0800dcf0
 800a090:	0800dcf8 	.word	0x0800dcf8
 800a094:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a096:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a098:	429a      	cmp	r2, r3
 800a09a:	bfa8      	it	ge
 800a09c:	461a      	movge	r2, r3
 800a09e:	2a00      	cmp	r2, #0
 800a0a0:	4691      	mov	r9, r2
 800a0a2:	dc37      	bgt.n	800a114 <_printf_float+0x364>
 800a0a4:	f04f 0b00 	mov.w	fp, #0
 800a0a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0ac:	f104 021a 	add.w	r2, r4, #26
 800a0b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a0b4:	ebaa 0309 	sub.w	r3, sl, r9
 800a0b8:	455b      	cmp	r3, fp
 800a0ba:	dc33      	bgt.n	800a124 <_printf_float+0x374>
 800a0bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	db3b      	blt.n	800a13c <_printf_float+0x38c>
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	07da      	lsls	r2, r3, #31
 800a0c8:	d438      	bmi.n	800a13c <_printf_float+0x38c>
 800a0ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a0ce:	eba2 030a 	sub.w	r3, r2, sl
 800a0d2:	eba2 0901 	sub.w	r9, r2, r1
 800a0d6:	4599      	cmp	r9, r3
 800a0d8:	bfa8      	it	ge
 800a0da:	4699      	movge	r9, r3
 800a0dc:	f1b9 0f00 	cmp.w	r9, #0
 800a0e0:	dc34      	bgt.n	800a14c <_printf_float+0x39c>
 800a0e2:	f04f 0800 	mov.w	r8, #0
 800a0e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0ea:	f104 0a1a 	add.w	sl, r4, #26
 800a0ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a0f2:	1a9b      	subs	r3, r3, r2
 800a0f4:	eba3 0309 	sub.w	r3, r3, r9
 800a0f8:	4543      	cmp	r3, r8
 800a0fa:	f77f af7a 	ble.w	8009ff2 <_printf_float+0x242>
 800a0fe:	2301      	movs	r3, #1
 800a100:	4652      	mov	r2, sl
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	f43f aeac 	beq.w	8009e66 <_printf_float+0xb6>
 800a10e:	f108 0801 	add.w	r8, r8, #1
 800a112:	e7ec      	b.n	800a0ee <_printf_float+0x33e>
 800a114:	4613      	mov	r3, r2
 800a116:	4631      	mov	r1, r6
 800a118:	4642      	mov	r2, r8
 800a11a:	4628      	mov	r0, r5
 800a11c:	47b8      	blx	r7
 800a11e:	3001      	adds	r0, #1
 800a120:	d1c0      	bne.n	800a0a4 <_printf_float+0x2f4>
 800a122:	e6a0      	b.n	8009e66 <_printf_float+0xb6>
 800a124:	2301      	movs	r3, #1
 800a126:	4631      	mov	r1, r6
 800a128:	4628      	mov	r0, r5
 800a12a:	920b      	str	r2, [sp, #44]	; 0x2c
 800a12c:	47b8      	blx	r7
 800a12e:	3001      	adds	r0, #1
 800a130:	f43f ae99 	beq.w	8009e66 <_printf_float+0xb6>
 800a134:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a136:	f10b 0b01 	add.w	fp, fp, #1
 800a13a:	e7b9      	b.n	800a0b0 <_printf_float+0x300>
 800a13c:	4631      	mov	r1, r6
 800a13e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a142:	4628      	mov	r0, r5
 800a144:	47b8      	blx	r7
 800a146:	3001      	adds	r0, #1
 800a148:	d1bf      	bne.n	800a0ca <_printf_float+0x31a>
 800a14a:	e68c      	b.n	8009e66 <_printf_float+0xb6>
 800a14c:	464b      	mov	r3, r9
 800a14e:	4631      	mov	r1, r6
 800a150:	4628      	mov	r0, r5
 800a152:	eb08 020a 	add.w	r2, r8, sl
 800a156:	47b8      	blx	r7
 800a158:	3001      	adds	r0, #1
 800a15a:	d1c2      	bne.n	800a0e2 <_printf_float+0x332>
 800a15c:	e683      	b.n	8009e66 <_printf_float+0xb6>
 800a15e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a160:	2a01      	cmp	r2, #1
 800a162:	dc01      	bgt.n	800a168 <_printf_float+0x3b8>
 800a164:	07db      	lsls	r3, r3, #31
 800a166:	d537      	bpl.n	800a1d8 <_printf_float+0x428>
 800a168:	2301      	movs	r3, #1
 800a16a:	4642      	mov	r2, r8
 800a16c:	4631      	mov	r1, r6
 800a16e:	4628      	mov	r0, r5
 800a170:	47b8      	blx	r7
 800a172:	3001      	adds	r0, #1
 800a174:	f43f ae77 	beq.w	8009e66 <_printf_float+0xb6>
 800a178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a17c:	4631      	mov	r1, r6
 800a17e:	4628      	mov	r0, r5
 800a180:	47b8      	blx	r7
 800a182:	3001      	adds	r0, #1
 800a184:	f43f ae6f 	beq.w	8009e66 <_printf_float+0xb6>
 800a188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a18c:	2200      	movs	r2, #0
 800a18e:	2300      	movs	r3, #0
 800a190:	f7f6 fc22 	bl	80009d8 <__aeabi_dcmpeq>
 800a194:	b9d8      	cbnz	r0, 800a1ce <_printf_float+0x41e>
 800a196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a198:	f108 0201 	add.w	r2, r8, #1
 800a19c:	3b01      	subs	r3, #1
 800a19e:	4631      	mov	r1, r6
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	47b8      	blx	r7
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d10e      	bne.n	800a1c6 <_printf_float+0x416>
 800a1a8:	e65d      	b.n	8009e66 <_printf_float+0xb6>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	464a      	mov	r2, r9
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	47b8      	blx	r7
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	f43f ae56 	beq.w	8009e66 <_printf_float+0xb6>
 800a1ba:	f108 0801 	add.w	r8, r8, #1
 800a1be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	4543      	cmp	r3, r8
 800a1c4:	dcf1      	bgt.n	800a1aa <_printf_float+0x3fa>
 800a1c6:	4653      	mov	r3, sl
 800a1c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a1cc:	e6e0      	b.n	8009f90 <_printf_float+0x1e0>
 800a1ce:	f04f 0800 	mov.w	r8, #0
 800a1d2:	f104 091a 	add.w	r9, r4, #26
 800a1d6:	e7f2      	b.n	800a1be <_printf_float+0x40e>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	4642      	mov	r2, r8
 800a1dc:	e7df      	b.n	800a19e <_printf_float+0x3ee>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	464a      	mov	r2, r9
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	47b8      	blx	r7
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	f43f ae3c 	beq.w	8009e66 <_printf_float+0xb6>
 800a1ee:	f108 0801 	add.w	r8, r8, #1
 800a1f2:	68e3      	ldr	r3, [r4, #12]
 800a1f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a1f6:	1a5b      	subs	r3, r3, r1
 800a1f8:	4543      	cmp	r3, r8
 800a1fa:	dcf0      	bgt.n	800a1de <_printf_float+0x42e>
 800a1fc:	e6fd      	b.n	8009ffa <_printf_float+0x24a>
 800a1fe:	f04f 0800 	mov.w	r8, #0
 800a202:	f104 0919 	add.w	r9, r4, #25
 800a206:	e7f4      	b.n	800a1f2 <_printf_float+0x442>

0800a208 <_printf_common>:
 800a208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a20c:	4616      	mov	r6, r2
 800a20e:	4699      	mov	r9, r3
 800a210:	688a      	ldr	r2, [r1, #8]
 800a212:	690b      	ldr	r3, [r1, #16]
 800a214:	4607      	mov	r7, r0
 800a216:	4293      	cmp	r3, r2
 800a218:	bfb8      	it	lt
 800a21a:	4613      	movlt	r3, r2
 800a21c:	6033      	str	r3, [r6, #0]
 800a21e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a222:	460c      	mov	r4, r1
 800a224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a228:	b10a      	cbz	r2, 800a22e <_printf_common+0x26>
 800a22a:	3301      	adds	r3, #1
 800a22c:	6033      	str	r3, [r6, #0]
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	0699      	lsls	r1, r3, #26
 800a232:	bf42      	ittt	mi
 800a234:	6833      	ldrmi	r3, [r6, #0]
 800a236:	3302      	addmi	r3, #2
 800a238:	6033      	strmi	r3, [r6, #0]
 800a23a:	6825      	ldr	r5, [r4, #0]
 800a23c:	f015 0506 	ands.w	r5, r5, #6
 800a240:	d106      	bne.n	800a250 <_printf_common+0x48>
 800a242:	f104 0a19 	add.w	sl, r4, #25
 800a246:	68e3      	ldr	r3, [r4, #12]
 800a248:	6832      	ldr	r2, [r6, #0]
 800a24a:	1a9b      	subs	r3, r3, r2
 800a24c:	42ab      	cmp	r3, r5
 800a24e:	dc28      	bgt.n	800a2a2 <_printf_common+0x9a>
 800a250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a254:	1e13      	subs	r3, r2, #0
 800a256:	6822      	ldr	r2, [r4, #0]
 800a258:	bf18      	it	ne
 800a25a:	2301      	movne	r3, #1
 800a25c:	0692      	lsls	r2, r2, #26
 800a25e:	d42d      	bmi.n	800a2bc <_printf_common+0xb4>
 800a260:	4649      	mov	r1, r9
 800a262:	4638      	mov	r0, r7
 800a264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a268:	47c0      	blx	r8
 800a26a:	3001      	adds	r0, #1
 800a26c:	d020      	beq.n	800a2b0 <_printf_common+0xa8>
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	68e5      	ldr	r5, [r4, #12]
 800a272:	f003 0306 	and.w	r3, r3, #6
 800a276:	2b04      	cmp	r3, #4
 800a278:	bf18      	it	ne
 800a27a:	2500      	movne	r5, #0
 800a27c:	6832      	ldr	r2, [r6, #0]
 800a27e:	f04f 0600 	mov.w	r6, #0
 800a282:	68a3      	ldr	r3, [r4, #8]
 800a284:	bf08      	it	eq
 800a286:	1aad      	subeq	r5, r5, r2
 800a288:	6922      	ldr	r2, [r4, #16]
 800a28a:	bf08      	it	eq
 800a28c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a290:	4293      	cmp	r3, r2
 800a292:	bfc4      	itt	gt
 800a294:	1a9b      	subgt	r3, r3, r2
 800a296:	18ed      	addgt	r5, r5, r3
 800a298:	341a      	adds	r4, #26
 800a29a:	42b5      	cmp	r5, r6
 800a29c:	d11a      	bne.n	800a2d4 <_printf_common+0xcc>
 800a29e:	2000      	movs	r0, #0
 800a2a0:	e008      	b.n	800a2b4 <_printf_common+0xac>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	4652      	mov	r2, sl
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	47c0      	blx	r8
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	d103      	bne.n	800a2b8 <_printf_common+0xb0>
 800a2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b8:	3501      	adds	r5, #1
 800a2ba:	e7c4      	b.n	800a246 <_printf_common+0x3e>
 800a2bc:	2030      	movs	r0, #48	; 0x30
 800a2be:	18e1      	adds	r1, r4, r3
 800a2c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2ca:	4422      	add	r2, r4
 800a2cc:	3302      	adds	r3, #2
 800a2ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2d2:	e7c5      	b.n	800a260 <_printf_common+0x58>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	4649      	mov	r1, r9
 800a2da:	4638      	mov	r0, r7
 800a2dc:	47c0      	blx	r8
 800a2de:	3001      	adds	r0, #1
 800a2e0:	d0e6      	beq.n	800a2b0 <_printf_common+0xa8>
 800a2e2:	3601      	adds	r6, #1
 800a2e4:	e7d9      	b.n	800a29a <_printf_common+0x92>
	...

0800a2e8 <_printf_i>:
 800a2e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	7e27      	ldrb	r7, [r4, #24]
 800a2f0:	4691      	mov	r9, r2
 800a2f2:	2f78      	cmp	r7, #120	; 0x78
 800a2f4:	4680      	mov	r8, r0
 800a2f6:	469a      	mov	sl, r3
 800a2f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a2fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2fe:	d807      	bhi.n	800a310 <_printf_i+0x28>
 800a300:	2f62      	cmp	r7, #98	; 0x62
 800a302:	d80a      	bhi.n	800a31a <_printf_i+0x32>
 800a304:	2f00      	cmp	r7, #0
 800a306:	f000 80d9 	beq.w	800a4bc <_printf_i+0x1d4>
 800a30a:	2f58      	cmp	r7, #88	; 0x58
 800a30c:	f000 80a4 	beq.w	800a458 <_printf_i+0x170>
 800a310:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a318:	e03a      	b.n	800a390 <_printf_i+0xa8>
 800a31a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a31e:	2b15      	cmp	r3, #21
 800a320:	d8f6      	bhi.n	800a310 <_printf_i+0x28>
 800a322:	a001      	add	r0, pc, #4	; (adr r0, 800a328 <_printf_i+0x40>)
 800a324:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a328:	0800a381 	.word	0x0800a381
 800a32c:	0800a395 	.word	0x0800a395
 800a330:	0800a311 	.word	0x0800a311
 800a334:	0800a311 	.word	0x0800a311
 800a338:	0800a311 	.word	0x0800a311
 800a33c:	0800a311 	.word	0x0800a311
 800a340:	0800a395 	.word	0x0800a395
 800a344:	0800a311 	.word	0x0800a311
 800a348:	0800a311 	.word	0x0800a311
 800a34c:	0800a311 	.word	0x0800a311
 800a350:	0800a311 	.word	0x0800a311
 800a354:	0800a4a3 	.word	0x0800a4a3
 800a358:	0800a3c5 	.word	0x0800a3c5
 800a35c:	0800a485 	.word	0x0800a485
 800a360:	0800a311 	.word	0x0800a311
 800a364:	0800a311 	.word	0x0800a311
 800a368:	0800a4c5 	.word	0x0800a4c5
 800a36c:	0800a311 	.word	0x0800a311
 800a370:	0800a3c5 	.word	0x0800a3c5
 800a374:	0800a311 	.word	0x0800a311
 800a378:	0800a311 	.word	0x0800a311
 800a37c:	0800a48d 	.word	0x0800a48d
 800a380:	680b      	ldr	r3, [r1, #0]
 800a382:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a386:	1d1a      	adds	r2, r3, #4
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	600a      	str	r2, [r1, #0]
 800a38c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a390:	2301      	movs	r3, #1
 800a392:	e0a4      	b.n	800a4de <_printf_i+0x1f6>
 800a394:	6825      	ldr	r5, [r4, #0]
 800a396:	6808      	ldr	r0, [r1, #0]
 800a398:	062e      	lsls	r6, r5, #24
 800a39a:	f100 0304 	add.w	r3, r0, #4
 800a39e:	d50a      	bpl.n	800a3b6 <_printf_i+0xce>
 800a3a0:	6805      	ldr	r5, [r0, #0]
 800a3a2:	600b      	str	r3, [r1, #0]
 800a3a4:	2d00      	cmp	r5, #0
 800a3a6:	da03      	bge.n	800a3b0 <_printf_i+0xc8>
 800a3a8:	232d      	movs	r3, #45	; 0x2d
 800a3aa:	426d      	negs	r5, r5
 800a3ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3b0:	230a      	movs	r3, #10
 800a3b2:	485e      	ldr	r0, [pc, #376]	; (800a52c <_printf_i+0x244>)
 800a3b4:	e019      	b.n	800a3ea <_printf_i+0x102>
 800a3b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a3ba:	6805      	ldr	r5, [r0, #0]
 800a3bc:	600b      	str	r3, [r1, #0]
 800a3be:	bf18      	it	ne
 800a3c0:	b22d      	sxthne	r5, r5
 800a3c2:	e7ef      	b.n	800a3a4 <_printf_i+0xbc>
 800a3c4:	680b      	ldr	r3, [r1, #0]
 800a3c6:	6825      	ldr	r5, [r4, #0]
 800a3c8:	1d18      	adds	r0, r3, #4
 800a3ca:	6008      	str	r0, [r1, #0]
 800a3cc:	0628      	lsls	r0, r5, #24
 800a3ce:	d501      	bpl.n	800a3d4 <_printf_i+0xec>
 800a3d0:	681d      	ldr	r5, [r3, #0]
 800a3d2:	e002      	b.n	800a3da <_printf_i+0xf2>
 800a3d4:	0669      	lsls	r1, r5, #25
 800a3d6:	d5fb      	bpl.n	800a3d0 <_printf_i+0xe8>
 800a3d8:	881d      	ldrh	r5, [r3, #0]
 800a3da:	2f6f      	cmp	r7, #111	; 0x6f
 800a3dc:	bf0c      	ite	eq
 800a3de:	2308      	moveq	r3, #8
 800a3e0:	230a      	movne	r3, #10
 800a3e2:	4852      	ldr	r0, [pc, #328]	; (800a52c <_printf_i+0x244>)
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3ea:	6866      	ldr	r6, [r4, #4]
 800a3ec:	2e00      	cmp	r6, #0
 800a3ee:	bfa8      	it	ge
 800a3f0:	6821      	ldrge	r1, [r4, #0]
 800a3f2:	60a6      	str	r6, [r4, #8]
 800a3f4:	bfa4      	itt	ge
 800a3f6:	f021 0104 	bicge.w	r1, r1, #4
 800a3fa:	6021      	strge	r1, [r4, #0]
 800a3fc:	b90d      	cbnz	r5, 800a402 <_printf_i+0x11a>
 800a3fe:	2e00      	cmp	r6, #0
 800a400:	d04d      	beq.n	800a49e <_printf_i+0x1b6>
 800a402:	4616      	mov	r6, r2
 800a404:	fbb5 f1f3 	udiv	r1, r5, r3
 800a408:	fb03 5711 	mls	r7, r3, r1, r5
 800a40c:	5dc7      	ldrb	r7, [r0, r7]
 800a40e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a412:	462f      	mov	r7, r5
 800a414:	42bb      	cmp	r3, r7
 800a416:	460d      	mov	r5, r1
 800a418:	d9f4      	bls.n	800a404 <_printf_i+0x11c>
 800a41a:	2b08      	cmp	r3, #8
 800a41c:	d10b      	bne.n	800a436 <_printf_i+0x14e>
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	07df      	lsls	r7, r3, #31
 800a422:	d508      	bpl.n	800a436 <_printf_i+0x14e>
 800a424:	6923      	ldr	r3, [r4, #16]
 800a426:	6861      	ldr	r1, [r4, #4]
 800a428:	4299      	cmp	r1, r3
 800a42a:	bfde      	ittt	le
 800a42c:	2330      	movle	r3, #48	; 0x30
 800a42e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a432:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a436:	1b92      	subs	r2, r2, r6
 800a438:	6122      	str	r2, [r4, #16]
 800a43a:	464b      	mov	r3, r9
 800a43c:	4621      	mov	r1, r4
 800a43e:	4640      	mov	r0, r8
 800a440:	f8cd a000 	str.w	sl, [sp]
 800a444:	aa03      	add	r2, sp, #12
 800a446:	f7ff fedf 	bl	800a208 <_printf_common>
 800a44a:	3001      	adds	r0, #1
 800a44c:	d14c      	bne.n	800a4e8 <_printf_i+0x200>
 800a44e:	f04f 30ff 	mov.w	r0, #4294967295
 800a452:	b004      	add	sp, #16
 800a454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a458:	4834      	ldr	r0, [pc, #208]	; (800a52c <_printf_i+0x244>)
 800a45a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a45e:	680e      	ldr	r6, [r1, #0]
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	f856 5b04 	ldr.w	r5, [r6], #4
 800a466:	061f      	lsls	r7, r3, #24
 800a468:	600e      	str	r6, [r1, #0]
 800a46a:	d514      	bpl.n	800a496 <_printf_i+0x1ae>
 800a46c:	07d9      	lsls	r1, r3, #31
 800a46e:	bf44      	itt	mi
 800a470:	f043 0320 	orrmi.w	r3, r3, #32
 800a474:	6023      	strmi	r3, [r4, #0]
 800a476:	b91d      	cbnz	r5, 800a480 <_printf_i+0x198>
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	f023 0320 	bic.w	r3, r3, #32
 800a47e:	6023      	str	r3, [r4, #0]
 800a480:	2310      	movs	r3, #16
 800a482:	e7af      	b.n	800a3e4 <_printf_i+0xfc>
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	f043 0320 	orr.w	r3, r3, #32
 800a48a:	6023      	str	r3, [r4, #0]
 800a48c:	2378      	movs	r3, #120	; 0x78
 800a48e:	4828      	ldr	r0, [pc, #160]	; (800a530 <_printf_i+0x248>)
 800a490:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a494:	e7e3      	b.n	800a45e <_printf_i+0x176>
 800a496:	065e      	lsls	r6, r3, #25
 800a498:	bf48      	it	mi
 800a49a:	b2ad      	uxthmi	r5, r5
 800a49c:	e7e6      	b.n	800a46c <_printf_i+0x184>
 800a49e:	4616      	mov	r6, r2
 800a4a0:	e7bb      	b.n	800a41a <_printf_i+0x132>
 800a4a2:	680b      	ldr	r3, [r1, #0]
 800a4a4:	6826      	ldr	r6, [r4, #0]
 800a4a6:	1d1d      	adds	r5, r3, #4
 800a4a8:	6960      	ldr	r0, [r4, #20]
 800a4aa:	600d      	str	r5, [r1, #0]
 800a4ac:	0635      	lsls	r5, r6, #24
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	d501      	bpl.n	800a4b6 <_printf_i+0x1ce>
 800a4b2:	6018      	str	r0, [r3, #0]
 800a4b4:	e002      	b.n	800a4bc <_printf_i+0x1d4>
 800a4b6:	0671      	lsls	r1, r6, #25
 800a4b8:	d5fb      	bpl.n	800a4b2 <_printf_i+0x1ca>
 800a4ba:	8018      	strh	r0, [r3, #0]
 800a4bc:	2300      	movs	r3, #0
 800a4be:	4616      	mov	r6, r2
 800a4c0:	6123      	str	r3, [r4, #16]
 800a4c2:	e7ba      	b.n	800a43a <_printf_i+0x152>
 800a4c4:	680b      	ldr	r3, [r1, #0]
 800a4c6:	1d1a      	adds	r2, r3, #4
 800a4c8:	600a      	str	r2, [r1, #0]
 800a4ca:	681e      	ldr	r6, [r3, #0]
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	6862      	ldr	r2, [r4, #4]
 800a4d2:	f001 fa8b 	bl	800b9ec <memchr>
 800a4d6:	b108      	cbz	r0, 800a4dc <_printf_i+0x1f4>
 800a4d8:	1b80      	subs	r0, r0, r6
 800a4da:	6060      	str	r0, [r4, #4]
 800a4dc:	6863      	ldr	r3, [r4, #4]
 800a4de:	6123      	str	r3, [r4, #16]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4e6:	e7a8      	b.n	800a43a <_printf_i+0x152>
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	4649      	mov	r1, r9
 800a4ec:	4640      	mov	r0, r8
 800a4ee:	6923      	ldr	r3, [r4, #16]
 800a4f0:	47d0      	blx	sl
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	d0ab      	beq.n	800a44e <_printf_i+0x166>
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	079b      	lsls	r3, r3, #30
 800a4fa:	d413      	bmi.n	800a524 <_printf_i+0x23c>
 800a4fc:	68e0      	ldr	r0, [r4, #12]
 800a4fe:	9b03      	ldr	r3, [sp, #12]
 800a500:	4298      	cmp	r0, r3
 800a502:	bfb8      	it	lt
 800a504:	4618      	movlt	r0, r3
 800a506:	e7a4      	b.n	800a452 <_printf_i+0x16a>
 800a508:	2301      	movs	r3, #1
 800a50a:	4632      	mov	r2, r6
 800a50c:	4649      	mov	r1, r9
 800a50e:	4640      	mov	r0, r8
 800a510:	47d0      	blx	sl
 800a512:	3001      	adds	r0, #1
 800a514:	d09b      	beq.n	800a44e <_printf_i+0x166>
 800a516:	3501      	adds	r5, #1
 800a518:	68e3      	ldr	r3, [r4, #12]
 800a51a:	9903      	ldr	r1, [sp, #12]
 800a51c:	1a5b      	subs	r3, r3, r1
 800a51e:	42ab      	cmp	r3, r5
 800a520:	dcf2      	bgt.n	800a508 <_printf_i+0x220>
 800a522:	e7eb      	b.n	800a4fc <_printf_i+0x214>
 800a524:	2500      	movs	r5, #0
 800a526:	f104 0619 	add.w	r6, r4, #25
 800a52a:	e7f5      	b.n	800a518 <_printf_i+0x230>
 800a52c:	0800dcfa 	.word	0x0800dcfa
 800a530:	0800dd0b 	.word	0x0800dd0b

0800a534 <iprintf>:
 800a534:	b40f      	push	{r0, r1, r2, r3}
 800a536:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <iprintf+0x2c>)
 800a538:	b513      	push	{r0, r1, r4, lr}
 800a53a:	681c      	ldr	r4, [r3, #0]
 800a53c:	b124      	cbz	r4, 800a548 <iprintf+0x14>
 800a53e:	69a3      	ldr	r3, [r4, #24]
 800a540:	b913      	cbnz	r3, 800a548 <iprintf+0x14>
 800a542:	4620      	mov	r0, r4
 800a544:	f001 f940 	bl	800b7c8 <__sinit>
 800a548:	ab05      	add	r3, sp, #20
 800a54a:	4620      	mov	r0, r4
 800a54c:	9a04      	ldr	r2, [sp, #16]
 800a54e:	68a1      	ldr	r1, [r4, #8]
 800a550:	9301      	str	r3, [sp, #4]
 800a552:	f002 f813 	bl	800c57c <_vfiprintf_r>
 800a556:	b002      	add	sp, #8
 800a558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a55c:	b004      	add	sp, #16
 800a55e:	4770      	bx	lr
 800a560:	20000028 	.word	0x20000028

0800a564 <_puts_r>:
 800a564:	b570      	push	{r4, r5, r6, lr}
 800a566:	460e      	mov	r6, r1
 800a568:	4605      	mov	r5, r0
 800a56a:	b118      	cbz	r0, 800a574 <_puts_r+0x10>
 800a56c:	6983      	ldr	r3, [r0, #24]
 800a56e:	b90b      	cbnz	r3, 800a574 <_puts_r+0x10>
 800a570:	f001 f92a 	bl	800b7c8 <__sinit>
 800a574:	69ab      	ldr	r3, [r5, #24]
 800a576:	68ac      	ldr	r4, [r5, #8]
 800a578:	b913      	cbnz	r3, 800a580 <_puts_r+0x1c>
 800a57a:	4628      	mov	r0, r5
 800a57c:	f001 f924 	bl	800b7c8 <__sinit>
 800a580:	4b2c      	ldr	r3, [pc, #176]	; (800a634 <_puts_r+0xd0>)
 800a582:	429c      	cmp	r4, r3
 800a584:	d120      	bne.n	800a5c8 <_puts_r+0x64>
 800a586:	686c      	ldr	r4, [r5, #4]
 800a588:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a58a:	07db      	lsls	r3, r3, #31
 800a58c:	d405      	bmi.n	800a59a <_puts_r+0x36>
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	0598      	lsls	r0, r3, #22
 800a592:	d402      	bmi.n	800a59a <_puts_r+0x36>
 800a594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a596:	f001 f9ba 	bl	800b90e <__retarget_lock_acquire_recursive>
 800a59a:	89a3      	ldrh	r3, [r4, #12]
 800a59c:	0719      	lsls	r1, r3, #28
 800a59e:	d51d      	bpl.n	800a5dc <_puts_r+0x78>
 800a5a0:	6923      	ldr	r3, [r4, #16]
 800a5a2:	b1db      	cbz	r3, 800a5dc <_puts_r+0x78>
 800a5a4:	3e01      	subs	r6, #1
 800a5a6:	68a3      	ldr	r3, [r4, #8]
 800a5a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	60a3      	str	r3, [r4, #8]
 800a5b0:	bb39      	cbnz	r1, 800a602 <_puts_r+0x9e>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	da38      	bge.n	800a628 <_puts_r+0xc4>
 800a5b6:	4622      	mov	r2, r4
 800a5b8:	210a      	movs	r1, #10
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f000 f8ac 	bl	800a718 <__swbuf_r>
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d011      	beq.n	800a5e8 <_puts_r+0x84>
 800a5c4:	250a      	movs	r5, #10
 800a5c6:	e011      	b.n	800a5ec <_puts_r+0x88>
 800a5c8:	4b1b      	ldr	r3, [pc, #108]	; (800a638 <_puts_r+0xd4>)
 800a5ca:	429c      	cmp	r4, r3
 800a5cc:	d101      	bne.n	800a5d2 <_puts_r+0x6e>
 800a5ce:	68ac      	ldr	r4, [r5, #8]
 800a5d0:	e7da      	b.n	800a588 <_puts_r+0x24>
 800a5d2:	4b1a      	ldr	r3, [pc, #104]	; (800a63c <_puts_r+0xd8>)
 800a5d4:	429c      	cmp	r4, r3
 800a5d6:	bf08      	it	eq
 800a5d8:	68ec      	ldreq	r4, [r5, #12]
 800a5da:	e7d5      	b.n	800a588 <_puts_r+0x24>
 800a5dc:	4621      	mov	r1, r4
 800a5de:	4628      	mov	r0, r5
 800a5e0:	f000 f8ec 	bl	800a7bc <__swsetup_r>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d0dd      	beq.n	800a5a4 <_puts_r+0x40>
 800a5e8:	f04f 35ff 	mov.w	r5, #4294967295
 800a5ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5ee:	07da      	lsls	r2, r3, #31
 800a5f0:	d405      	bmi.n	800a5fe <_puts_r+0x9a>
 800a5f2:	89a3      	ldrh	r3, [r4, #12]
 800a5f4:	059b      	lsls	r3, r3, #22
 800a5f6:	d402      	bmi.n	800a5fe <_puts_r+0x9a>
 800a5f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5fa:	f001 f989 	bl	800b910 <__retarget_lock_release_recursive>
 800a5fe:	4628      	mov	r0, r5
 800a600:	bd70      	pop	{r4, r5, r6, pc}
 800a602:	2b00      	cmp	r3, #0
 800a604:	da04      	bge.n	800a610 <_puts_r+0xac>
 800a606:	69a2      	ldr	r2, [r4, #24]
 800a608:	429a      	cmp	r2, r3
 800a60a:	dc06      	bgt.n	800a61a <_puts_r+0xb6>
 800a60c:	290a      	cmp	r1, #10
 800a60e:	d004      	beq.n	800a61a <_puts_r+0xb6>
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	6022      	str	r2, [r4, #0]
 800a616:	7019      	strb	r1, [r3, #0]
 800a618:	e7c5      	b.n	800a5a6 <_puts_r+0x42>
 800a61a:	4622      	mov	r2, r4
 800a61c:	4628      	mov	r0, r5
 800a61e:	f000 f87b 	bl	800a718 <__swbuf_r>
 800a622:	3001      	adds	r0, #1
 800a624:	d1bf      	bne.n	800a5a6 <_puts_r+0x42>
 800a626:	e7df      	b.n	800a5e8 <_puts_r+0x84>
 800a628:	250a      	movs	r5, #10
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	1c5a      	adds	r2, r3, #1
 800a62e:	6022      	str	r2, [r4, #0]
 800a630:	701d      	strb	r5, [r3, #0]
 800a632:	e7db      	b.n	800a5ec <_puts_r+0x88>
 800a634:	0800ddd0 	.word	0x0800ddd0
 800a638:	0800ddf0 	.word	0x0800ddf0
 800a63c:	0800ddb0 	.word	0x0800ddb0

0800a640 <puts>:
 800a640:	4b02      	ldr	r3, [pc, #8]	; (800a64c <puts+0xc>)
 800a642:	4601      	mov	r1, r0
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	f7ff bf8d 	b.w	800a564 <_puts_r>
 800a64a:	bf00      	nop
 800a64c:	20000028 	.word	0x20000028

0800a650 <_raise_r>:
 800a650:	291f      	cmp	r1, #31
 800a652:	b538      	push	{r3, r4, r5, lr}
 800a654:	4604      	mov	r4, r0
 800a656:	460d      	mov	r5, r1
 800a658:	d904      	bls.n	800a664 <_raise_r+0x14>
 800a65a:	2316      	movs	r3, #22
 800a65c:	6003      	str	r3, [r0, #0]
 800a65e:	f04f 30ff 	mov.w	r0, #4294967295
 800a662:	bd38      	pop	{r3, r4, r5, pc}
 800a664:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a666:	b112      	cbz	r2, 800a66e <_raise_r+0x1e>
 800a668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a66c:	b94b      	cbnz	r3, 800a682 <_raise_r+0x32>
 800a66e:	4620      	mov	r0, r4
 800a670:	f000 f830 	bl	800a6d4 <_getpid_r>
 800a674:	462a      	mov	r2, r5
 800a676:	4601      	mov	r1, r0
 800a678:	4620      	mov	r0, r4
 800a67a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a67e:	f000 b817 	b.w	800a6b0 <_kill_r>
 800a682:	2b01      	cmp	r3, #1
 800a684:	d00a      	beq.n	800a69c <_raise_r+0x4c>
 800a686:	1c59      	adds	r1, r3, #1
 800a688:	d103      	bne.n	800a692 <_raise_r+0x42>
 800a68a:	2316      	movs	r3, #22
 800a68c:	6003      	str	r3, [r0, #0]
 800a68e:	2001      	movs	r0, #1
 800a690:	e7e7      	b.n	800a662 <_raise_r+0x12>
 800a692:	2400      	movs	r4, #0
 800a694:	4628      	mov	r0, r5
 800a696:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a69a:	4798      	blx	r3
 800a69c:	2000      	movs	r0, #0
 800a69e:	e7e0      	b.n	800a662 <_raise_r+0x12>

0800a6a0 <raise>:
 800a6a0:	4b02      	ldr	r3, [pc, #8]	; (800a6ac <raise+0xc>)
 800a6a2:	4601      	mov	r1, r0
 800a6a4:	6818      	ldr	r0, [r3, #0]
 800a6a6:	f7ff bfd3 	b.w	800a650 <_raise_r>
 800a6aa:	bf00      	nop
 800a6ac:	20000028 	.word	0x20000028

0800a6b0 <_kill_r>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	4d06      	ldr	r5, [pc, #24]	; (800a6d0 <_kill_r+0x20>)
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	4608      	mov	r0, r1
 800a6ba:	4611      	mov	r1, r2
 800a6bc:	602b      	str	r3, [r5, #0]
 800a6be:	f7f8 f8d4 	bl	800286a <_kill>
 800a6c2:	1c43      	adds	r3, r0, #1
 800a6c4:	d102      	bne.n	800a6cc <_kill_r+0x1c>
 800a6c6:	682b      	ldr	r3, [r5, #0]
 800a6c8:	b103      	cbz	r3, 800a6cc <_kill_r+0x1c>
 800a6ca:	6023      	str	r3, [r4, #0]
 800a6cc:	bd38      	pop	{r3, r4, r5, pc}
 800a6ce:	bf00      	nop
 800a6d0:	200003f0 	.word	0x200003f0

0800a6d4 <_getpid_r>:
 800a6d4:	f7f8 b8c2 	b.w	800285c <_getpid>

0800a6d8 <siprintf>:
 800a6d8:	b40e      	push	{r1, r2, r3}
 800a6da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6de:	b500      	push	{lr}
 800a6e0:	b09c      	sub	sp, #112	; 0x70
 800a6e2:	ab1d      	add	r3, sp, #116	; 0x74
 800a6e4:	9002      	str	r0, [sp, #8]
 800a6e6:	9006      	str	r0, [sp, #24]
 800a6e8:	9107      	str	r1, [sp, #28]
 800a6ea:	9104      	str	r1, [sp, #16]
 800a6ec:	4808      	ldr	r0, [pc, #32]	; (800a710 <siprintf+0x38>)
 800a6ee:	4909      	ldr	r1, [pc, #36]	; (800a714 <siprintf+0x3c>)
 800a6f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6f4:	9105      	str	r1, [sp, #20]
 800a6f6:	6800      	ldr	r0, [r0, #0]
 800a6f8:	a902      	add	r1, sp, #8
 800a6fa:	9301      	str	r3, [sp, #4]
 800a6fc:	f001 fe16 	bl	800c32c <_svfiprintf_r>
 800a700:	2200      	movs	r2, #0
 800a702:	9b02      	ldr	r3, [sp, #8]
 800a704:	701a      	strb	r2, [r3, #0]
 800a706:	b01c      	add	sp, #112	; 0x70
 800a708:	f85d eb04 	ldr.w	lr, [sp], #4
 800a70c:	b003      	add	sp, #12
 800a70e:	4770      	bx	lr
 800a710:	20000028 	.word	0x20000028
 800a714:	ffff0208 	.word	0xffff0208

0800a718 <__swbuf_r>:
 800a718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71a:	460e      	mov	r6, r1
 800a71c:	4614      	mov	r4, r2
 800a71e:	4605      	mov	r5, r0
 800a720:	b118      	cbz	r0, 800a72a <__swbuf_r+0x12>
 800a722:	6983      	ldr	r3, [r0, #24]
 800a724:	b90b      	cbnz	r3, 800a72a <__swbuf_r+0x12>
 800a726:	f001 f84f 	bl	800b7c8 <__sinit>
 800a72a:	4b21      	ldr	r3, [pc, #132]	; (800a7b0 <__swbuf_r+0x98>)
 800a72c:	429c      	cmp	r4, r3
 800a72e:	d12b      	bne.n	800a788 <__swbuf_r+0x70>
 800a730:	686c      	ldr	r4, [r5, #4]
 800a732:	69a3      	ldr	r3, [r4, #24]
 800a734:	60a3      	str	r3, [r4, #8]
 800a736:	89a3      	ldrh	r3, [r4, #12]
 800a738:	071a      	lsls	r2, r3, #28
 800a73a:	d52f      	bpl.n	800a79c <__swbuf_r+0x84>
 800a73c:	6923      	ldr	r3, [r4, #16]
 800a73e:	b36b      	cbz	r3, 800a79c <__swbuf_r+0x84>
 800a740:	6923      	ldr	r3, [r4, #16]
 800a742:	6820      	ldr	r0, [r4, #0]
 800a744:	b2f6      	uxtb	r6, r6
 800a746:	1ac0      	subs	r0, r0, r3
 800a748:	6963      	ldr	r3, [r4, #20]
 800a74a:	4637      	mov	r7, r6
 800a74c:	4283      	cmp	r3, r0
 800a74e:	dc04      	bgt.n	800a75a <__swbuf_r+0x42>
 800a750:	4621      	mov	r1, r4
 800a752:	4628      	mov	r0, r5
 800a754:	f000 ffa4 	bl	800b6a0 <_fflush_r>
 800a758:	bb30      	cbnz	r0, 800a7a8 <__swbuf_r+0x90>
 800a75a:	68a3      	ldr	r3, [r4, #8]
 800a75c:	3001      	adds	r0, #1
 800a75e:	3b01      	subs	r3, #1
 800a760:	60a3      	str	r3, [r4, #8]
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	1c5a      	adds	r2, r3, #1
 800a766:	6022      	str	r2, [r4, #0]
 800a768:	701e      	strb	r6, [r3, #0]
 800a76a:	6963      	ldr	r3, [r4, #20]
 800a76c:	4283      	cmp	r3, r0
 800a76e:	d004      	beq.n	800a77a <__swbuf_r+0x62>
 800a770:	89a3      	ldrh	r3, [r4, #12]
 800a772:	07db      	lsls	r3, r3, #31
 800a774:	d506      	bpl.n	800a784 <__swbuf_r+0x6c>
 800a776:	2e0a      	cmp	r6, #10
 800a778:	d104      	bne.n	800a784 <__swbuf_r+0x6c>
 800a77a:	4621      	mov	r1, r4
 800a77c:	4628      	mov	r0, r5
 800a77e:	f000 ff8f 	bl	800b6a0 <_fflush_r>
 800a782:	b988      	cbnz	r0, 800a7a8 <__swbuf_r+0x90>
 800a784:	4638      	mov	r0, r7
 800a786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a788:	4b0a      	ldr	r3, [pc, #40]	; (800a7b4 <__swbuf_r+0x9c>)
 800a78a:	429c      	cmp	r4, r3
 800a78c:	d101      	bne.n	800a792 <__swbuf_r+0x7a>
 800a78e:	68ac      	ldr	r4, [r5, #8]
 800a790:	e7cf      	b.n	800a732 <__swbuf_r+0x1a>
 800a792:	4b09      	ldr	r3, [pc, #36]	; (800a7b8 <__swbuf_r+0xa0>)
 800a794:	429c      	cmp	r4, r3
 800a796:	bf08      	it	eq
 800a798:	68ec      	ldreq	r4, [r5, #12]
 800a79a:	e7ca      	b.n	800a732 <__swbuf_r+0x1a>
 800a79c:	4621      	mov	r1, r4
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f000 f80c 	bl	800a7bc <__swsetup_r>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d0cb      	beq.n	800a740 <__swbuf_r+0x28>
 800a7a8:	f04f 37ff 	mov.w	r7, #4294967295
 800a7ac:	e7ea      	b.n	800a784 <__swbuf_r+0x6c>
 800a7ae:	bf00      	nop
 800a7b0:	0800ddd0 	.word	0x0800ddd0
 800a7b4:	0800ddf0 	.word	0x0800ddf0
 800a7b8:	0800ddb0 	.word	0x0800ddb0

0800a7bc <__swsetup_r>:
 800a7bc:	4b32      	ldr	r3, [pc, #200]	; (800a888 <__swsetup_r+0xcc>)
 800a7be:	b570      	push	{r4, r5, r6, lr}
 800a7c0:	681d      	ldr	r5, [r3, #0]
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	b125      	cbz	r5, 800a7d2 <__swsetup_r+0x16>
 800a7c8:	69ab      	ldr	r3, [r5, #24]
 800a7ca:	b913      	cbnz	r3, 800a7d2 <__swsetup_r+0x16>
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f000 fffb 	bl	800b7c8 <__sinit>
 800a7d2:	4b2e      	ldr	r3, [pc, #184]	; (800a88c <__swsetup_r+0xd0>)
 800a7d4:	429c      	cmp	r4, r3
 800a7d6:	d10f      	bne.n	800a7f8 <__swsetup_r+0x3c>
 800a7d8:	686c      	ldr	r4, [r5, #4]
 800a7da:	89a3      	ldrh	r3, [r4, #12]
 800a7dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7e0:	0719      	lsls	r1, r3, #28
 800a7e2:	d42c      	bmi.n	800a83e <__swsetup_r+0x82>
 800a7e4:	06dd      	lsls	r5, r3, #27
 800a7e6:	d411      	bmi.n	800a80c <__swsetup_r+0x50>
 800a7e8:	2309      	movs	r3, #9
 800a7ea:	6033      	str	r3, [r6, #0]
 800a7ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f4:	81a3      	strh	r3, [r4, #12]
 800a7f6:	e03e      	b.n	800a876 <__swsetup_r+0xba>
 800a7f8:	4b25      	ldr	r3, [pc, #148]	; (800a890 <__swsetup_r+0xd4>)
 800a7fa:	429c      	cmp	r4, r3
 800a7fc:	d101      	bne.n	800a802 <__swsetup_r+0x46>
 800a7fe:	68ac      	ldr	r4, [r5, #8]
 800a800:	e7eb      	b.n	800a7da <__swsetup_r+0x1e>
 800a802:	4b24      	ldr	r3, [pc, #144]	; (800a894 <__swsetup_r+0xd8>)
 800a804:	429c      	cmp	r4, r3
 800a806:	bf08      	it	eq
 800a808:	68ec      	ldreq	r4, [r5, #12]
 800a80a:	e7e6      	b.n	800a7da <__swsetup_r+0x1e>
 800a80c:	0758      	lsls	r0, r3, #29
 800a80e:	d512      	bpl.n	800a836 <__swsetup_r+0x7a>
 800a810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a812:	b141      	cbz	r1, 800a826 <__swsetup_r+0x6a>
 800a814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a818:	4299      	cmp	r1, r3
 800a81a:	d002      	beq.n	800a822 <__swsetup_r+0x66>
 800a81c:	4630      	mov	r0, r6
 800a81e:	f001 fc83 	bl	800c128 <_free_r>
 800a822:	2300      	movs	r3, #0
 800a824:	6363      	str	r3, [r4, #52]	; 0x34
 800a826:	89a3      	ldrh	r3, [r4, #12]
 800a828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	2300      	movs	r3, #0
 800a830:	6063      	str	r3, [r4, #4]
 800a832:	6923      	ldr	r3, [r4, #16]
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	89a3      	ldrh	r3, [r4, #12]
 800a838:	f043 0308 	orr.w	r3, r3, #8
 800a83c:	81a3      	strh	r3, [r4, #12]
 800a83e:	6923      	ldr	r3, [r4, #16]
 800a840:	b94b      	cbnz	r3, 800a856 <__swsetup_r+0x9a>
 800a842:	89a3      	ldrh	r3, [r4, #12]
 800a844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a84c:	d003      	beq.n	800a856 <__swsetup_r+0x9a>
 800a84e:	4621      	mov	r1, r4
 800a850:	4630      	mov	r0, r6
 800a852:	f001 f883 	bl	800b95c <__smakebuf_r>
 800a856:	89a0      	ldrh	r0, [r4, #12]
 800a858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a85c:	f010 0301 	ands.w	r3, r0, #1
 800a860:	d00a      	beq.n	800a878 <__swsetup_r+0xbc>
 800a862:	2300      	movs	r3, #0
 800a864:	60a3      	str	r3, [r4, #8]
 800a866:	6963      	ldr	r3, [r4, #20]
 800a868:	425b      	negs	r3, r3
 800a86a:	61a3      	str	r3, [r4, #24]
 800a86c:	6923      	ldr	r3, [r4, #16]
 800a86e:	b943      	cbnz	r3, 800a882 <__swsetup_r+0xc6>
 800a870:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a874:	d1ba      	bne.n	800a7ec <__swsetup_r+0x30>
 800a876:	bd70      	pop	{r4, r5, r6, pc}
 800a878:	0781      	lsls	r1, r0, #30
 800a87a:	bf58      	it	pl
 800a87c:	6963      	ldrpl	r3, [r4, #20]
 800a87e:	60a3      	str	r3, [r4, #8]
 800a880:	e7f4      	b.n	800a86c <__swsetup_r+0xb0>
 800a882:	2000      	movs	r0, #0
 800a884:	e7f7      	b.n	800a876 <__swsetup_r+0xba>
 800a886:	bf00      	nop
 800a888:	20000028 	.word	0x20000028
 800a88c:	0800ddd0 	.word	0x0800ddd0
 800a890:	0800ddf0 	.word	0x0800ddf0
 800a894:	0800ddb0 	.word	0x0800ddb0

0800a898 <quorem>:
 800a898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	6903      	ldr	r3, [r0, #16]
 800a89e:	690c      	ldr	r4, [r1, #16]
 800a8a0:	4607      	mov	r7, r0
 800a8a2:	42a3      	cmp	r3, r4
 800a8a4:	f2c0 8083 	blt.w	800a9ae <quorem+0x116>
 800a8a8:	3c01      	subs	r4, #1
 800a8aa:	f100 0514 	add.w	r5, r0, #20
 800a8ae:	f101 0814 	add.w	r8, r1, #20
 800a8b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8b6:	9301      	str	r3, [sp, #4]
 800a8b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a8cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8d0:	d332      	bcc.n	800a938 <quorem+0xa0>
 800a8d2:	f04f 0e00 	mov.w	lr, #0
 800a8d6:	4640      	mov	r0, r8
 800a8d8:	46ac      	mov	ip, r5
 800a8da:	46f2      	mov	sl, lr
 800a8dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a8e0:	b293      	uxth	r3, r2
 800a8e2:	fb06 e303 	mla	r3, r6, r3, lr
 800a8e6:	0c12      	lsrs	r2, r2, #16
 800a8e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a8ec:	fb06 e202 	mla	r2, r6, r2, lr
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	ebaa 0303 	sub.w	r3, sl, r3
 800a8f6:	f8dc a000 	ldr.w	sl, [ip]
 800a8fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a8fe:	fa1f fa8a 	uxth.w	sl, sl
 800a902:	4453      	add	r3, sl
 800a904:	fa1f fa82 	uxth.w	sl, r2
 800a908:	f8dc 2000 	ldr.w	r2, [ip]
 800a90c:	4581      	cmp	r9, r0
 800a90e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a912:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a916:	b29b      	uxth	r3, r3
 800a918:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a91c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a920:	f84c 3b04 	str.w	r3, [ip], #4
 800a924:	d2da      	bcs.n	800a8dc <quorem+0x44>
 800a926:	f855 300b 	ldr.w	r3, [r5, fp]
 800a92a:	b92b      	cbnz	r3, 800a938 <quorem+0xa0>
 800a92c:	9b01      	ldr	r3, [sp, #4]
 800a92e:	3b04      	subs	r3, #4
 800a930:	429d      	cmp	r5, r3
 800a932:	461a      	mov	r2, r3
 800a934:	d32f      	bcc.n	800a996 <quorem+0xfe>
 800a936:	613c      	str	r4, [r7, #16]
 800a938:	4638      	mov	r0, r7
 800a93a:	f001 fadf 	bl	800befc <__mcmp>
 800a93e:	2800      	cmp	r0, #0
 800a940:	db25      	blt.n	800a98e <quorem+0xf6>
 800a942:	4628      	mov	r0, r5
 800a944:	f04f 0c00 	mov.w	ip, #0
 800a948:	3601      	adds	r6, #1
 800a94a:	f858 1b04 	ldr.w	r1, [r8], #4
 800a94e:	f8d0 e000 	ldr.w	lr, [r0]
 800a952:	b28b      	uxth	r3, r1
 800a954:	ebac 0303 	sub.w	r3, ip, r3
 800a958:	fa1f f28e 	uxth.w	r2, lr
 800a95c:	4413      	add	r3, r2
 800a95e:	0c0a      	lsrs	r2, r1, #16
 800a960:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a964:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a968:	b29b      	uxth	r3, r3
 800a96a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a96e:	45c1      	cmp	r9, r8
 800a970:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a974:	f840 3b04 	str.w	r3, [r0], #4
 800a978:	d2e7      	bcs.n	800a94a <quorem+0xb2>
 800a97a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a97e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a982:	b922      	cbnz	r2, 800a98e <quorem+0xf6>
 800a984:	3b04      	subs	r3, #4
 800a986:	429d      	cmp	r5, r3
 800a988:	461a      	mov	r2, r3
 800a98a:	d30a      	bcc.n	800a9a2 <quorem+0x10a>
 800a98c:	613c      	str	r4, [r7, #16]
 800a98e:	4630      	mov	r0, r6
 800a990:	b003      	add	sp, #12
 800a992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a996:	6812      	ldr	r2, [r2, #0]
 800a998:	3b04      	subs	r3, #4
 800a99a:	2a00      	cmp	r2, #0
 800a99c:	d1cb      	bne.n	800a936 <quorem+0x9e>
 800a99e:	3c01      	subs	r4, #1
 800a9a0:	e7c6      	b.n	800a930 <quorem+0x98>
 800a9a2:	6812      	ldr	r2, [r2, #0]
 800a9a4:	3b04      	subs	r3, #4
 800a9a6:	2a00      	cmp	r2, #0
 800a9a8:	d1f0      	bne.n	800a98c <quorem+0xf4>
 800a9aa:	3c01      	subs	r4, #1
 800a9ac:	e7eb      	b.n	800a986 <quorem+0xee>
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	e7ee      	b.n	800a990 <quorem+0xf8>
 800a9b2:	0000      	movs	r0, r0
 800a9b4:	0000      	movs	r0, r0
	...

0800a9b8 <_dtoa_r>:
 800a9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9bc:	4616      	mov	r6, r2
 800a9be:	461f      	mov	r7, r3
 800a9c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a9c2:	b099      	sub	sp, #100	; 0x64
 800a9c4:	4605      	mov	r5, r0
 800a9c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a9ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a9ce:	b974      	cbnz	r4, 800a9ee <_dtoa_r+0x36>
 800a9d0:	2010      	movs	r0, #16
 800a9d2:	f001 f803 	bl	800b9dc <malloc>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	6268      	str	r0, [r5, #36]	; 0x24
 800a9da:	b920      	cbnz	r0, 800a9e6 <_dtoa_r+0x2e>
 800a9dc:	21ea      	movs	r1, #234	; 0xea
 800a9de:	4bae      	ldr	r3, [pc, #696]	; (800ac98 <_dtoa_r+0x2e0>)
 800a9e0:	48ae      	ldr	r0, [pc, #696]	; (800ac9c <_dtoa_r+0x2e4>)
 800a9e2:	f001 ff61 	bl	800c8a8 <__assert_func>
 800a9e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9ea:	6004      	str	r4, [r0, #0]
 800a9ec:	60c4      	str	r4, [r0, #12]
 800a9ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9f0:	6819      	ldr	r1, [r3, #0]
 800a9f2:	b151      	cbz	r1, 800aa0a <_dtoa_r+0x52>
 800a9f4:	685a      	ldr	r2, [r3, #4]
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	4093      	lsls	r3, r2
 800a9fa:	604a      	str	r2, [r1, #4]
 800a9fc:	608b      	str	r3, [r1, #8]
 800a9fe:	4628      	mov	r0, r5
 800aa00:	f001 f842 	bl	800ba88 <_Bfree>
 800aa04:	2200      	movs	r2, #0
 800aa06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa08:	601a      	str	r2, [r3, #0]
 800aa0a:	1e3b      	subs	r3, r7, #0
 800aa0c:	bfaf      	iteee	ge
 800aa0e:	2300      	movge	r3, #0
 800aa10:	2201      	movlt	r2, #1
 800aa12:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa16:	9305      	strlt	r3, [sp, #20]
 800aa18:	bfa8      	it	ge
 800aa1a:	f8c8 3000 	strge.w	r3, [r8]
 800aa1e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800aa22:	4b9f      	ldr	r3, [pc, #636]	; (800aca0 <_dtoa_r+0x2e8>)
 800aa24:	bfb8      	it	lt
 800aa26:	f8c8 2000 	strlt.w	r2, [r8]
 800aa2a:	ea33 0309 	bics.w	r3, r3, r9
 800aa2e:	d119      	bne.n	800aa64 <_dtoa_r+0xac>
 800aa30:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa34:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa36:	6013      	str	r3, [r2, #0]
 800aa38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa3c:	4333      	orrs	r3, r6
 800aa3e:	f000 8580 	beq.w	800b542 <_dtoa_r+0xb8a>
 800aa42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa44:	b953      	cbnz	r3, 800aa5c <_dtoa_r+0xa4>
 800aa46:	4b97      	ldr	r3, [pc, #604]	; (800aca4 <_dtoa_r+0x2ec>)
 800aa48:	e022      	b.n	800aa90 <_dtoa_r+0xd8>
 800aa4a:	4b97      	ldr	r3, [pc, #604]	; (800aca8 <_dtoa_r+0x2f0>)
 800aa4c:	9308      	str	r3, [sp, #32]
 800aa4e:	3308      	adds	r3, #8
 800aa50:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa52:	6013      	str	r3, [r2, #0]
 800aa54:	9808      	ldr	r0, [sp, #32]
 800aa56:	b019      	add	sp, #100	; 0x64
 800aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5c:	4b91      	ldr	r3, [pc, #580]	; (800aca4 <_dtoa_r+0x2ec>)
 800aa5e:	9308      	str	r3, [sp, #32]
 800aa60:	3303      	adds	r3, #3
 800aa62:	e7f5      	b.n	800aa50 <_dtoa_r+0x98>
 800aa64:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aa68:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800aa6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa70:	2200      	movs	r2, #0
 800aa72:	2300      	movs	r3, #0
 800aa74:	f7f5 ffb0 	bl	80009d8 <__aeabi_dcmpeq>
 800aa78:	4680      	mov	r8, r0
 800aa7a:	b158      	cbz	r0, 800aa94 <_dtoa_r+0xdc>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa80:	6013      	str	r3, [r2, #0]
 800aa82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f000 8559 	beq.w	800b53c <_dtoa_r+0xb84>
 800aa8a:	4888      	ldr	r0, [pc, #544]	; (800acac <_dtoa_r+0x2f4>)
 800aa8c:	6018      	str	r0, [r3, #0]
 800aa8e:	1e43      	subs	r3, r0, #1
 800aa90:	9308      	str	r3, [sp, #32]
 800aa92:	e7df      	b.n	800aa54 <_dtoa_r+0x9c>
 800aa94:	ab16      	add	r3, sp, #88	; 0x58
 800aa96:	9301      	str	r3, [sp, #4]
 800aa98:	ab17      	add	r3, sp, #92	; 0x5c
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aaa2:	f001 fad7 	bl	800c054 <__d2b>
 800aaa6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aaaa:	4682      	mov	sl, r0
 800aaac:	2c00      	cmp	r4, #0
 800aaae:	d07e      	beq.n	800abae <_dtoa_r+0x1f6>
 800aab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aab6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800aaba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aabe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800aac2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aac6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800aaca:	2200      	movs	r2, #0
 800aacc:	4b78      	ldr	r3, [pc, #480]	; (800acb0 <_dtoa_r+0x2f8>)
 800aace:	f7f5 fb63 	bl	8000198 <__aeabi_dsub>
 800aad2:	a36b      	add	r3, pc, #428	; (adr r3, 800ac80 <_dtoa_r+0x2c8>)
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	f7f5 fd16 	bl	8000508 <__aeabi_dmul>
 800aadc:	a36a      	add	r3, pc, #424	; (adr r3, 800ac88 <_dtoa_r+0x2d0>)
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	f7f5 fb5b 	bl	800019c <__adddf3>
 800aae6:	4606      	mov	r6, r0
 800aae8:	4620      	mov	r0, r4
 800aaea:	460f      	mov	r7, r1
 800aaec:	f7f5 fca2 	bl	8000434 <__aeabi_i2d>
 800aaf0:	a367      	add	r3, pc, #412	; (adr r3, 800ac90 <_dtoa_r+0x2d8>)
 800aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf6:	f7f5 fd07 	bl	8000508 <__aeabi_dmul>
 800aafa:	4602      	mov	r2, r0
 800aafc:	460b      	mov	r3, r1
 800aafe:	4630      	mov	r0, r6
 800ab00:	4639      	mov	r1, r7
 800ab02:	f7f5 fb4b 	bl	800019c <__adddf3>
 800ab06:	4606      	mov	r6, r0
 800ab08:	460f      	mov	r7, r1
 800ab0a:	f7f5 ffad 	bl	8000a68 <__aeabi_d2iz>
 800ab0e:	2200      	movs	r2, #0
 800ab10:	4681      	mov	r9, r0
 800ab12:	2300      	movs	r3, #0
 800ab14:	4630      	mov	r0, r6
 800ab16:	4639      	mov	r1, r7
 800ab18:	f7f5 ff68 	bl	80009ec <__aeabi_dcmplt>
 800ab1c:	b148      	cbz	r0, 800ab32 <_dtoa_r+0x17a>
 800ab1e:	4648      	mov	r0, r9
 800ab20:	f7f5 fc88 	bl	8000434 <__aeabi_i2d>
 800ab24:	4632      	mov	r2, r6
 800ab26:	463b      	mov	r3, r7
 800ab28:	f7f5 ff56 	bl	80009d8 <__aeabi_dcmpeq>
 800ab2c:	b908      	cbnz	r0, 800ab32 <_dtoa_r+0x17a>
 800ab2e:	f109 39ff 	add.w	r9, r9, #4294967295
 800ab32:	f1b9 0f16 	cmp.w	r9, #22
 800ab36:	d857      	bhi.n	800abe8 <_dtoa_r+0x230>
 800ab38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab3c:	4b5d      	ldr	r3, [pc, #372]	; (800acb4 <_dtoa_r+0x2fc>)
 800ab3e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab46:	f7f5 ff51 	bl	80009ec <__aeabi_dcmplt>
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	d04e      	beq.n	800abec <_dtoa_r+0x234>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f109 39ff 	add.w	r9, r9, #4294967295
 800ab54:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab58:	1b1c      	subs	r4, r3, r4
 800ab5a:	1e63      	subs	r3, r4, #1
 800ab5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab5e:	bf49      	itett	mi
 800ab60:	f1c4 0301 	rsbmi	r3, r4, #1
 800ab64:	2300      	movpl	r3, #0
 800ab66:	9306      	strmi	r3, [sp, #24]
 800ab68:	2300      	movmi	r3, #0
 800ab6a:	bf54      	ite	pl
 800ab6c:	9306      	strpl	r3, [sp, #24]
 800ab6e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ab70:	f1b9 0f00 	cmp.w	r9, #0
 800ab74:	db3c      	blt.n	800abf0 <_dtoa_r+0x238>
 800ab76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab78:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ab7c:	444b      	add	r3, r9
 800ab7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab80:	2300      	movs	r3, #0
 800ab82:	930a      	str	r3, [sp, #40]	; 0x28
 800ab84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab86:	2b09      	cmp	r3, #9
 800ab88:	d86c      	bhi.n	800ac64 <_dtoa_r+0x2ac>
 800ab8a:	2b05      	cmp	r3, #5
 800ab8c:	bfc4      	itt	gt
 800ab8e:	3b04      	subgt	r3, #4
 800ab90:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ab92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab94:	bfc8      	it	gt
 800ab96:	2400      	movgt	r4, #0
 800ab98:	f1a3 0302 	sub.w	r3, r3, #2
 800ab9c:	bfd8      	it	le
 800ab9e:	2401      	movle	r4, #1
 800aba0:	2b03      	cmp	r3, #3
 800aba2:	f200 808b 	bhi.w	800acbc <_dtoa_r+0x304>
 800aba6:	e8df f003 	tbb	[pc, r3]
 800abaa:	4f2d      	.short	0x4f2d
 800abac:	5b4d      	.short	0x5b4d
 800abae:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800abb2:	441c      	add	r4, r3
 800abb4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800abb8:	2b20      	cmp	r3, #32
 800abba:	bfc3      	ittte	gt
 800abbc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800abc0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800abc4:	fa09 f303 	lslgt.w	r3, r9, r3
 800abc8:	f1c3 0320 	rsble	r3, r3, #32
 800abcc:	bfc6      	itte	gt
 800abce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800abd2:	4318      	orrgt	r0, r3
 800abd4:	fa06 f003 	lslle.w	r0, r6, r3
 800abd8:	f7f5 fc1c 	bl	8000414 <__aeabi_ui2d>
 800abdc:	2301      	movs	r3, #1
 800abde:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800abe2:	3c01      	subs	r4, #1
 800abe4:	9313      	str	r3, [sp, #76]	; 0x4c
 800abe6:	e770      	b.n	800aaca <_dtoa_r+0x112>
 800abe8:	2301      	movs	r3, #1
 800abea:	e7b3      	b.n	800ab54 <_dtoa_r+0x19c>
 800abec:	900f      	str	r0, [sp, #60]	; 0x3c
 800abee:	e7b2      	b.n	800ab56 <_dtoa_r+0x19e>
 800abf0:	9b06      	ldr	r3, [sp, #24]
 800abf2:	eba3 0309 	sub.w	r3, r3, r9
 800abf6:	9306      	str	r3, [sp, #24]
 800abf8:	f1c9 0300 	rsb	r3, r9, #0
 800abfc:	930a      	str	r3, [sp, #40]	; 0x28
 800abfe:	2300      	movs	r3, #0
 800ac00:	930e      	str	r3, [sp, #56]	; 0x38
 800ac02:	e7bf      	b.n	800ab84 <_dtoa_r+0x1cc>
 800ac04:	2300      	movs	r3, #0
 800ac06:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	dc59      	bgt.n	800acc2 <_dtoa_r+0x30a>
 800ac0e:	f04f 0b01 	mov.w	fp, #1
 800ac12:	465b      	mov	r3, fp
 800ac14:	f8cd b008 	str.w	fp, [sp, #8]
 800ac18:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ac20:	6042      	str	r2, [r0, #4]
 800ac22:	2204      	movs	r2, #4
 800ac24:	f102 0614 	add.w	r6, r2, #20
 800ac28:	429e      	cmp	r6, r3
 800ac2a:	6841      	ldr	r1, [r0, #4]
 800ac2c:	d94f      	bls.n	800acce <_dtoa_r+0x316>
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f000 feea 	bl	800ba08 <_Balloc>
 800ac34:	9008      	str	r0, [sp, #32]
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d14d      	bne.n	800acd6 <_dtoa_r+0x31e>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ac40:	4b1d      	ldr	r3, [pc, #116]	; (800acb8 <_dtoa_r+0x300>)
 800ac42:	e6cd      	b.n	800a9e0 <_dtoa_r+0x28>
 800ac44:	2301      	movs	r3, #1
 800ac46:	e7de      	b.n	800ac06 <_dtoa_r+0x24e>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac4e:	eb09 0b03 	add.w	fp, r9, r3
 800ac52:	f10b 0301 	add.w	r3, fp, #1
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	9302      	str	r3, [sp, #8]
 800ac5a:	bfb8      	it	lt
 800ac5c:	2301      	movlt	r3, #1
 800ac5e:	e7dd      	b.n	800ac1c <_dtoa_r+0x264>
 800ac60:	2301      	movs	r3, #1
 800ac62:	e7f2      	b.n	800ac4a <_dtoa_r+0x292>
 800ac64:	2401      	movs	r4, #1
 800ac66:	2300      	movs	r3, #0
 800ac68:	940b      	str	r4, [sp, #44]	; 0x2c
 800ac6a:	9322      	str	r3, [sp, #136]	; 0x88
 800ac6c:	f04f 3bff 	mov.w	fp, #4294967295
 800ac70:	2200      	movs	r2, #0
 800ac72:	2312      	movs	r3, #18
 800ac74:	f8cd b008 	str.w	fp, [sp, #8]
 800ac78:	9223      	str	r2, [sp, #140]	; 0x8c
 800ac7a:	e7cf      	b.n	800ac1c <_dtoa_r+0x264>
 800ac7c:	f3af 8000 	nop.w
 800ac80:	636f4361 	.word	0x636f4361
 800ac84:	3fd287a7 	.word	0x3fd287a7
 800ac88:	8b60c8b3 	.word	0x8b60c8b3
 800ac8c:	3fc68a28 	.word	0x3fc68a28
 800ac90:	509f79fb 	.word	0x509f79fb
 800ac94:	3fd34413 	.word	0x3fd34413
 800ac98:	0800dd29 	.word	0x0800dd29
 800ac9c:	0800dd40 	.word	0x0800dd40
 800aca0:	7ff00000 	.word	0x7ff00000
 800aca4:	0800dd25 	.word	0x0800dd25
 800aca8:	0800dd1c 	.word	0x0800dd1c
 800acac:	0800dcf9 	.word	0x0800dcf9
 800acb0:	3ff80000 	.word	0x3ff80000
 800acb4:	0800de98 	.word	0x0800de98
 800acb8:	0800dd9f 	.word	0x0800dd9f
 800acbc:	2301      	movs	r3, #1
 800acbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800acc0:	e7d4      	b.n	800ac6c <_dtoa_r+0x2b4>
 800acc2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800acc6:	465b      	mov	r3, fp
 800acc8:	f8cd b008 	str.w	fp, [sp, #8]
 800accc:	e7a6      	b.n	800ac1c <_dtoa_r+0x264>
 800acce:	3101      	adds	r1, #1
 800acd0:	6041      	str	r1, [r0, #4]
 800acd2:	0052      	lsls	r2, r2, #1
 800acd4:	e7a6      	b.n	800ac24 <_dtoa_r+0x26c>
 800acd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800acd8:	9a08      	ldr	r2, [sp, #32]
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	9b02      	ldr	r3, [sp, #8]
 800acde:	2b0e      	cmp	r3, #14
 800ace0:	f200 80a8 	bhi.w	800ae34 <_dtoa_r+0x47c>
 800ace4:	2c00      	cmp	r4, #0
 800ace6:	f000 80a5 	beq.w	800ae34 <_dtoa_r+0x47c>
 800acea:	f1b9 0f00 	cmp.w	r9, #0
 800acee:	dd34      	ble.n	800ad5a <_dtoa_r+0x3a2>
 800acf0:	4a9a      	ldr	r2, [pc, #616]	; (800af5c <_dtoa_r+0x5a4>)
 800acf2:	f009 030f 	and.w	r3, r9, #15
 800acf6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800acfa:	f419 7f80 	tst.w	r9, #256	; 0x100
 800acfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ad06:	ea4f 1429 	mov.w	r4, r9, asr #4
 800ad0a:	d016      	beq.n	800ad3a <_dtoa_r+0x382>
 800ad0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad10:	4b93      	ldr	r3, [pc, #588]	; (800af60 <_dtoa_r+0x5a8>)
 800ad12:	2703      	movs	r7, #3
 800ad14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad18:	f7f5 fd20 	bl	800075c <__aeabi_ddiv>
 800ad1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad20:	f004 040f 	and.w	r4, r4, #15
 800ad24:	4e8e      	ldr	r6, [pc, #568]	; (800af60 <_dtoa_r+0x5a8>)
 800ad26:	b954      	cbnz	r4, 800ad3e <_dtoa_r+0x386>
 800ad28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad30:	f7f5 fd14 	bl	800075c <__aeabi_ddiv>
 800ad34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad38:	e029      	b.n	800ad8e <_dtoa_r+0x3d6>
 800ad3a:	2702      	movs	r7, #2
 800ad3c:	e7f2      	b.n	800ad24 <_dtoa_r+0x36c>
 800ad3e:	07e1      	lsls	r1, r4, #31
 800ad40:	d508      	bpl.n	800ad54 <_dtoa_r+0x39c>
 800ad42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad46:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad4a:	f7f5 fbdd 	bl	8000508 <__aeabi_dmul>
 800ad4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ad52:	3701      	adds	r7, #1
 800ad54:	1064      	asrs	r4, r4, #1
 800ad56:	3608      	adds	r6, #8
 800ad58:	e7e5      	b.n	800ad26 <_dtoa_r+0x36e>
 800ad5a:	f000 80a5 	beq.w	800aea8 <_dtoa_r+0x4f0>
 800ad5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad62:	f1c9 0400 	rsb	r4, r9, #0
 800ad66:	4b7d      	ldr	r3, [pc, #500]	; (800af5c <_dtoa_r+0x5a4>)
 800ad68:	f004 020f 	and.w	r2, r4, #15
 800ad6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad74:	f7f5 fbc8 	bl	8000508 <__aeabi_dmul>
 800ad78:	2702      	movs	r7, #2
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad80:	4e77      	ldr	r6, [pc, #476]	; (800af60 <_dtoa_r+0x5a8>)
 800ad82:	1124      	asrs	r4, r4, #4
 800ad84:	2c00      	cmp	r4, #0
 800ad86:	f040 8084 	bne.w	800ae92 <_dtoa_r+0x4da>
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1d2      	bne.n	800ad34 <_dtoa_r+0x37c>
 800ad8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f000 808b 	beq.w	800aeac <_dtoa_r+0x4f4>
 800ad96:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ad9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ad9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ada2:	2200      	movs	r2, #0
 800ada4:	4b6f      	ldr	r3, [pc, #444]	; (800af64 <_dtoa_r+0x5ac>)
 800ada6:	f7f5 fe21 	bl	80009ec <__aeabi_dcmplt>
 800adaa:	2800      	cmp	r0, #0
 800adac:	d07e      	beq.n	800aeac <_dtoa_r+0x4f4>
 800adae:	9b02      	ldr	r3, [sp, #8]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d07b      	beq.n	800aeac <_dtoa_r+0x4f4>
 800adb4:	f1bb 0f00 	cmp.w	fp, #0
 800adb8:	dd38      	ble.n	800ae2c <_dtoa_r+0x474>
 800adba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800adbe:	2200      	movs	r2, #0
 800adc0:	4b69      	ldr	r3, [pc, #420]	; (800af68 <_dtoa_r+0x5b0>)
 800adc2:	f7f5 fba1 	bl	8000508 <__aeabi_dmul>
 800adc6:	465c      	mov	r4, fp
 800adc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adcc:	f109 38ff 	add.w	r8, r9, #4294967295
 800add0:	3701      	adds	r7, #1
 800add2:	4638      	mov	r0, r7
 800add4:	f7f5 fb2e 	bl	8000434 <__aeabi_i2d>
 800add8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800addc:	f7f5 fb94 	bl	8000508 <__aeabi_dmul>
 800ade0:	2200      	movs	r2, #0
 800ade2:	4b62      	ldr	r3, [pc, #392]	; (800af6c <_dtoa_r+0x5b4>)
 800ade4:	f7f5 f9da 	bl	800019c <__adddf3>
 800ade8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800adec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800adf0:	9611      	str	r6, [sp, #68]	; 0x44
 800adf2:	2c00      	cmp	r4, #0
 800adf4:	d15d      	bne.n	800aeb2 <_dtoa_r+0x4fa>
 800adf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adfa:	2200      	movs	r2, #0
 800adfc:	4b5c      	ldr	r3, [pc, #368]	; (800af70 <_dtoa_r+0x5b8>)
 800adfe:	f7f5 f9cb 	bl	8000198 <__aeabi_dsub>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae0a:	4633      	mov	r3, r6
 800ae0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae0e:	f7f5 fe0b 	bl	8000a28 <__aeabi_dcmpgt>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	f040 829e 	bne.w	800b354 <_dtoa_r+0x99c>
 800ae18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae1e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ae22:	f7f5 fde3 	bl	80009ec <__aeabi_dcmplt>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	f040 8292 	bne.w	800b350 <_dtoa_r+0x998>
 800ae2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ae30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f2c0 8153 	blt.w	800b0e2 <_dtoa_r+0x72a>
 800ae3c:	f1b9 0f0e 	cmp.w	r9, #14
 800ae40:	f300 814f 	bgt.w	800b0e2 <_dtoa_r+0x72a>
 800ae44:	4b45      	ldr	r3, [pc, #276]	; (800af5c <_dtoa_r+0x5a4>)
 800ae46:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ae4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ae52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f280 80db 	bge.w	800b010 <_dtoa_r+0x658>
 800ae5a:	9b02      	ldr	r3, [sp, #8]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f300 80d7 	bgt.w	800b010 <_dtoa_r+0x658>
 800ae62:	f040 8274 	bne.w	800b34e <_dtoa_r+0x996>
 800ae66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	4b40      	ldr	r3, [pc, #256]	; (800af70 <_dtoa_r+0x5b8>)
 800ae6e:	f7f5 fb4b 	bl	8000508 <__aeabi_dmul>
 800ae72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae76:	f7f5 fdcd 	bl	8000a14 <__aeabi_dcmpge>
 800ae7a:	9c02      	ldr	r4, [sp, #8]
 800ae7c:	4626      	mov	r6, r4
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	f040 824a 	bne.w	800b318 <_dtoa_r+0x960>
 800ae84:	2331      	movs	r3, #49	; 0x31
 800ae86:	9f08      	ldr	r7, [sp, #32]
 800ae88:	f109 0901 	add.w	r9, r9, #1
 800ae8c:	f807 3b01 	strb.w	r3, [r7], #1
 800ae90:	e246      	b.n	800b320 <_dtoa_r+0x968>
 800ae92:	07e2      	lsls	r2, r4, #31
 800ae94:	d505      	bpl.n	800aea2 <_dtoa_r+0x4ea>
 800ae96:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae9a:	f7f5 fb35 	bl	8000508 <__aeabi_dmul>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	3701      	adds	r7, #1
 800aea2:	1064      	asrs	r4, r4, #1
 800aea4:	3608      	adds	r6, #8
 800aea6:	e76d      	b.n	800ad84 <_dtoa_r+0x3cc>
 800aea8:	2702      	movs	r7, #2
 800aeaa:	e770      	b.n	800ad8e <_dtoa_r+0x3d6>
 800aeac:	46c8      	mov	r8, r9
 800aeae:	9c02      	ldr	r4, [sp, #8]
 800aeb0:	e78f      	b.n	800add2 <_dtoa_r+0x41a>
 800aeb2:	9908      	ldr	r1, [sp, #32]
 800aeb4:	4b29      	ldr	r3, [pc, #164]	; (800af5c <_dtoa_r+0x5a4>)
 800aeb6:	4421      	add	r1, r4
 800aeb8:	9112      	str	r1, [sp, #72]	; 0x48
 800aeba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aebc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aec0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800aec4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aec8:	2900      	cmp	r1, #0
 800aeca:	d055      	beq.n	800af78 <_dtoa_r+0x5c0>
 800aecc:	2000      	movs	r0, #0
 800aece:	4929      	ldr	r1, [pc, #164]	; (800af74 <_dtoa_r+0x5bc>)
 800aed0:	f7f5 fc44 	bl	800075c <__aeabi_ddiv>
 800aed4:	463b      	mov	r3, r7
 800aed6:	4632      	mov	r2, r6
 800aed8:	f7f5 f95e 	bl	8000198 <__aeabi_dsub>
 800aedc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aee0:	9f08      	ldr	r7, [sp, #32]
 800aee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aee6:	f7f5 fdbf 	bl	8000a68 <__aeabi_d2iz>
 800aeea:	4604      	mov	r4, r0
 800aeec:	f7f5 faa2 	bl	8000434 <__aeabi_i2d>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aef8:	f7f5 f94e 	bl	8000198 <__aeabi_dsub>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	3430      	adds	r4, #48	; 0x30
 800af02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af0a:	f807 4b01 	strb.w	r4, [r7], #1
 800af0e:	f7f5 fd6d 	bl	80009ec <__aeabi_dcmplt>
 800af12:	2800      	cmp	r0, #0
 800af14:	d174      	bne.n	800b000 <_dtoa_r+0x648>
 800af16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af1a:	2000      	movs	r0, #0
 800af1c:	4911      	ldr	r1, [pc, #68]	; (800af64 <_dtoa_r+0x5ac>)
 800af1e:	f7f5 f93b 	bl	8000198 <__aeabi_dsub>
 800af22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af26:	f7f5 fd61 	bl	80009ec <__aeabi_dcmplt>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	f040 80b6 	bne.w	800b09c <_dtoa_r+0x6e4>
 800af30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af32:	429f      	cmp	r7, r3
 800af34:	f43f af7a 	beq.w	800ae2c <_dtoa_r+0x474>
 800af38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af3c:	2200      	movs	r2, #0
 800af3e:	4b0a      	ldr	r3, [pc, #40]	; (800af68 <_dtoa_r+0x5b0>)
 800af40:	f7f5 fae2 	bl	8000508 <__aeabi_dmul>
 800af44:	2200      	movs	r2, #0
 800af46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af4e:	4b06      	ldr	r3, [pc, #24]	; (800af68 <_dtoa_r+0x5b0>)
 800af50:	f7f5 fada 	bl	8000508 <__aeabi_dmul>
 800af54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af58:	e7c3      	b.n	800aee2 <_dtoa_r+0x52a>
 800af5a:	bf00      	nop
 800af5c:	0800de98 	.word	0x0800de98
 800af60:	0800de70 	.word	0x0800de70
 800af64:	3ff00000 	.word	0x3ff00000
 800af68:	40240000 	.word	0x40240000
 800af6c:	401c0000 	.word	0x401c0000
 800af70:	40140000 	.word	0x40140000
 800af74:	3fe00000 	.word	0x3fe00000
 800af78:	4630      	mov	r0, r6
 800af7a:	4639      	mov	r1, r7
 800af7c:	f7f5 fac4 	bl	8000508 <__aeabi_dmul>
 800af80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af86:	9c08      	ldr	r4, [sp, #32]
 800af88:	9314      	str	r3, [sp, #80]	; 0x50
 800af8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af8e:	f7f5 fd6b 	bl	8000a68 <__aeabi_d2iz>
 800af92:	9015      	str	r0, [sp, #84]	; 0x54
 800af94:	f7f5 fa4e 	bl	8000434 <__aeabi_i2d>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afa0:	f7f5 f8fa 	bl	8000198 <__aeabi_dsub>
 800afa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afa6:	4606      	mov	r6, r0
 800afa8:	3330      	adds	r3, #48	; 0x30
 800afaa:	f804 3b01 	strb.w	r3, [r4], #1
 800afae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afb0:	460f      	mov	r7, r1
 800afb2:	429c      	cmp	r4, r3
 800afb4:	f04f 0200 	mov.w	r2, #0
 800afb8:	d124      	bne.n	800b004 <_dtoa_r+0x64c>
 800afba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800afbe:	4bb3      	ldr	r3, [pc, #716]	; (800b28c <_dtoa_r+0x8d4>)
 800afc0:	f7f5 f8ec 	bl	800019c <__adddf3>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4630      	mov	r0, r6
 800afca:	4639      	mov	r1, r7
 800afcc:	f7f5 fd2c 	bl	8000a28 <__aeabi_dcmpgt>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d162      	bne.n	800b09a <_dtoa_r+0x6e2>
 800afd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800afd8:	2000      	movs	r0, #0
 800afda:	49ac      	ldr	r1, [pc, #688]	; (800b28c <_dtoa_r+0x8d4>)
 800afdc:	f7f5 f8dc 	bl	8000198 <__aeabi_dsub>
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4630      	mov	r0, r6
 800afe6:	4639      	mov	r1, r7
 800afe8:	f7f5 fd00 	bl	80009ec <__aeabi_dcmplt>
 800afec:	2800      	cmp	r0, #0
 800afee:	f43f af1d 	beq.w	800ae2c <_dtoa_r+0x474>
 800aff2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aff4:	1e7b      	subs	r3, r7, #1
 800aff6:	9314      	str	r3, [sp, #80]	; 0x50
 800aff8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800affc:	2b30      	cmp	r3, #48	; 0x30
 800affe:	d0f8      	beq.n	800aff2 <_dtoa_r+0x63a>
 800b000:	46c1      	mov	r9, r8
 800b002:	e03a      	b.n	800b07a <_dtoa_r+0x6c2>
 800b004:	4ba2      	ldr	r3, [pc, #648]	; (800b290 <_dtoa_r+0x8d8>)
 800b006:	f7f5 fa7f 	bl	8000508 <__aeabi_dmul>
 800b00a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b00e:	e7bc      	b.n	800af8a <_dtoa_r+0x5d2>
 800b010:	9f08      	ldr	r7, [sp, #32]
 800b012:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b016:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b01a:	f7f5 fb9f 	bl	800075c <__aeabi_ddiv>
 800b01e:	f7f5 fd23 	bl	8000a68 <__aeabi_d2iz>
 800b022:	4604      	mov	r4, r0
 800b024:	f7f5 fa06 	bl	8000434 <__aeabi_i2d>
 800b028:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b02c:	f7f5 fa6c 	bl	8000508 <__aeabi_dmul>
 800b030:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b034:	460b      	mov	r3, r1
 800b036:	4602      	mov	r2, r0
 800b038:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b03c:	f7f5 f8ac 	bl	8000198 <__aeabi_dsub>
 800b040:	f807 6b01 	strb.w	r6, [r7], #1
 800b044:	9e08      	ldr	r6, [sp, #32]
 800b046:	9b02      	ldr	r3, [sp, #8]
 800b048:	1bbe      	subs	r6, r7, r6
 800b04a:	42b3      	cmp	r3, r6
 800b04c:	d13a      	bne.n	800b0c4 <_dtoa_r+0x70c>
 800b04e:	4602      	mov	r2, r0
 800b050:	460b      	mov	r3, r1
 800b052:	f7f5 f8a3 	bl	800019c <__adddf3>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b05e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b062:	f7f5 fce1 	bl	8000a28 <__aeabi_dcmpgt>
 800b066:	bb58      	cbnz	r0, 800b0c0 <_dtoa_r+0x708>
 800b068:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b06c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b070:	f7f5 fcb2 	bl	80009d8 <__aeabi_dcmpeq>
 800b074:	b108      	cbz	r0, 800b07a <_dtoa_r+0x6c2>
 800b076:	07e1      	lsls	r1, r4, #31
 800b078:	d422      	bmi.n	800b0c0 <_dtoa_r+0x708>
 800b07a:	4628      	mov	r0, r5
 800b07c:	4651      	mov	r1, sl
 800b07e:	f000 fd03 	bl	800ba88 <_Bfree>
 800b082:	2300      	movs	r3, #0
 800b084:	703b      	strb	r3, [r7, #0]
 800b086:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b088:	f109 0001 	add.w	r0, r9, #1
 800b08c:	6018      	str	r0, [r3, #0]
 800b08e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b090:	2b00      	cmp	r3, #0
 800b092:	f43f acdf 	beq.w	800aa54 <_dtoa_r+0x9c>
 800b096:	601f      	str	r7, [r3, #0]
 800b098:	e4dc      	b.n	800aa54 <_dtoa_r+0x9c>
 800b09a:	4627      	mov	r7, r4
 800b09c:	463b      	mov	r3, r7
 800b09e:	461f      	mov	r7, r3
 800b0a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0a4:	2a39      	cmp	r2, #57	; 0x39
 800b0a6:	d107      	bne.n	800b0b8 <_dtoa_r+0x700>
 800b0a8:	9a08      	ldr	r2, [sp, #32]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d1f7      	bne.n	800b09e <_dtoa_r+0x6e6>
 800b0ae:	2230      	movs	r2, #48	; 0x30
 800b0b0:	9908      	ldr	r1, [sp, #32]
 800b0b2:	f108 0801 	add.w	r8, r8, #1
 800b0b6:	700a      	strb	r2, [r1, #0]
 800b0b8:	781a      	ldrb	r2, [r3, #0]
 800b0ba:	3201      	adds	r2, #1
 800b0bc:	701a      	strb	r2, [r3, #0]
 800b0be:	e79f      	b.n	800b000 <_dtoa_r+0x648>
 800b0c0:	46c8      	mov	r8, r9
 800b0c2:	e7eb      	b.n	800b09c <_dtoa_r+0x6e4>
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	4b72      	ldr	r3, [pc, #456]	; (800b290 <_dtoa_r+0x8d8>)
 800b0c8:	f7f5 fa1e 	bl	8000508 <__aeabi_dmul>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f7f5 fc7e 	bl	80009d8 <__aeabi_dcmpeq>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	d098      	beq.n	800b012 <_dtoa_r+0x65a>
 800b0e0:	e7cb      	b.n	800b07a <_dtoa_r+0x6c2>
 800b0e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0e4:	2a00      	cmp	r2, #0
 800b0e6:	f000 80cd 	beq.w	800b284 <_dtoa_r+0x8cc>
 800b0ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b0ec:	2a01      	cmp	r2, #1
 800b0ee:	f300 80af 	bgt.w	800b250 <_dtoa_r+0x898>
 800b0f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b0f4:	2a00      	cmp	r2, #0
 800b0f6:	f000 80a7 	beq.w	800b248 <_dtoa_r+0x890>
 800b0fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b0fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b100:	9f06      	ldr	r7, [sp, #24]
 800b102:	9a06      	ldr	r2, [sp, #24]
 800b104:	2101      	movs	r1, #1
 800b106:	441a      	add	r2, r3
 800b108:	9206      	str	r2, [sp, #24]
 800b10a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b10c:	4628      	mov	r0, r5
 800b10e:	441a      	add	r2, r3
 800b110:	9209      	str	r2, [sp, #36]	; 0x24
 800b112:	f000 fd73 	bl	800bbfc <__i2b>
 800b116:	4606      	mov	r6, r0
 800b118:	2f00      	cmp	r7, #0
 800b11a:	dd0c      	ble.n	800b136 <_dtoa_r+0x77e>
 800b11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b11e:	2b00      	cmp	r3, #0
 800b120:	dd09      	ble.n	800b136 <_dtoa_r+0x77e>
 800b122:	42bb      	cmp	r3, r7
 800b124:	bfa8      	it	ge
 800b126:	463b      	movge	r3, r7
 800b128:	9a06      	ldr	r2, [sp, #24]
 800b12a:	1aff      	subs	r7, r7, r3
 800b12c:	1ad2      	subs	r2, r2, r3
 800b12e:	9206      	str	r2, [sp, #24]
 800b130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	9309      	str	r3, [sp, #36]	; 0x24
 800b136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b138:	b1f3      	cbz	r3, 800b178 <_dtoa_r+0x7c0>
 800b13a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 80a9 	beq.w	800b294 <_dtoa_r+0x8dc>
 800b142:	2c00      	cmp	r4, #0
 800b144:	dd10      	ble.n	800b168 <_dtoa_r+0x7b0>
 800b146:	4631      	mov	r1, r6
 800b148:	4622      	mov	r2, r4
 800b14a:	4628      	mov	r0, r5
 800b14c:	f000 fe10 	bl	800bd70 <__pow5mult>
 800b150:	4652      	mov	r2, sl
 800b152:	4601      	mov	r1, r0
 800b154:	4606      	mov	r6, r0
 800b156:	4628      	mov	r0, r5
 800b158:	f000 fd66 	bl	800bc28 <__multiply>
 800b15c:	4680      	mov	r8, r0
 800b15e:	4651      	mov	r1, sl
 800b160:	4628      	mov	r0, r5
 800b162:	f000 fc91 	bl	800ba88 <_Bfree>
 800b166:	46c2      	mov	sl, r8
 800b168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b16a:	1b1a      	subs	r2, r3, r4
 800b16c:	d004      	beq.n	800b178 <_dtoa_r+0x7c0>
 800b16e:	4651      	mov	r1, sl
 800b170:	4628      	mov	r0, r5
 800b172:	f000 fdfd 	bl	800bd70 <__pow5mult>
 800b176:	4682      	mov	sl, r0
 800b178:	2101      	movs	r1, #1
 800b17a:	4628      	mov	r0, r5
 800b17c:	f000 fd3e 	bl	800bbfc <__i2b>
 800b180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b182:	4604      	mov	r4, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	f340 8087 	ble.w	800b298 <_dtoa_r+0x8e0>
 800b18a:	461a      	mov	r2, r3
 800b18c:	4601      	mov	r1, r0
 800b18e:	4628      	mov	r0, r5
 800b190:	f000 fdee 	bl	800bd70 <__pow5mult>
 800b194:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b196:	4604      	mov	r4, r0
 800b198:	2b01      	cmp	r3, #1
 800b19a:	f340 8080 	ble.w	800b29e <_dtoa_r+0x8e6>
 800b19e:	f04f 0800 	mov.w	r8, #0
 800b1a2:	6923      	ldr	r3, [r4, #16]
 800b1a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1a8:	6918      	ldr	r0, [r3, #16]
 800b1aa:	f000 fcd9 	bl	800bb60 <__hi0bits>
 800b1ae:	f1c0 0020 	rsb	r0, r0, #32
 800b1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b4:	4418      	add	r0, r3
 800b1b6:	f010 001f 	ands.w	r0, r0, #31
 800b1ba:	f000 8092 	beq.w	800b2e2 <_dtoa_r+0x92a>
 800b1be:	f1c0 0320 	rsb	r3, r0, #32
 800b1c2:	2b04      	cmp	r3, #4
 800b1c4:	f340 808a 	ble.w	800b2dc <_dtoa_r+0x924>
 800b1c8:	f1c0 001c 	rsb	r0, r0, #28
 800b1cc:	9b06      	ldr	r3, [sp, #24]
 800b1ce:	4407      	add	r7, r0
 800b1d0:	4403      	add	r3, r0
 800b1d2:	9306      	str	r3, [sp, #24]
 800b1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d6:	4403      	add	r3, r0
 800b1d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b1da:	9b06      	ldr	r3, [sp, #24]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	dd05      	ble.n	800b1ec <_dtoa_r+0x834>
 800b1e0:	4651      	mov	r1, sl
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	f000 fe1d 	bl	800be24 <__lshift>
 800b1ea:	4682      	mov	sl, r0
 800b1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	dd05      	ble.n	800b1fe <_dtoa_r+0x846>
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	f000 fe14 	bl	800be24 <__lshift>
 800b1fc:	4604      	mov	r4, r0
 800b1fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b200:	2b00      	cmp	r3, #0
 800b202:	d070      	beq.n	800b2e6 <_dtoa_r+0x92e>
 800b204:	4621      	mov	r1, r4
 800b206:	4650      	mov	r0, sl
 800b208:	f000 fe78 	bl	800befc <__mcmp>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	da6a      	bge.n	800b2e6 <_dtoa_r+0x92e>
 800b210:	2300      	movs	r3, #0
 800b212:	4651      	mov	r1, sl
 800b214:	220a      	movs	r2, #10
 800b216:	4628      	mov	r0, r5
 800b218:	f000 fc58 	bl	800bacc <__multadd>
 800b21c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b21e:	4682      	mov	sl, r0
 800b220:	f109 39ff 	add.w	r9, r9, #4294967295
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 8193 	beq.w	800b550 <_dtoa_r+0xb98>
 800b22a:	4631      	mov	r1, r6
 800b22c:	2300      	movs	r3, #0
 800b22e:	220a      	movs	r2, #10
 800b230:	4628      	mov	r0, r5
 800b232:	f000 fc4b 	bl	800bacc <__multadd>
 800b236:	f1bb 0f00 	cmp.w	fp, #0
 800b23a:	4606      	mov	r6, r0
 800b23c:	f300 8093 	bgt.w	800b366 <_dtoa_r+0x9ae>
 800b240:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b242:	2b02      	cmp	r3, #2
 800b244:	dc57      	bgt.n	800b2f6 <_dtoa_r+0x93e>
 800b246:	e08e      	b.n	800b366 <_dtoa_r+0x9ae>
 800b248:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b24a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b24e:	e756      	b.n	800b0fe <_dtoa_r+0x746>
 800b250:	9b02      	ldr	r3, [sp, #8]
 800b252:	1e5c      	subs	r4, r3, #1
 800b254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b256:	42a3      	cmp	r3, r4
 800b258:	bfb7      	itett	lt
 800b25a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b25c:	1b1c      	subge	r4, r3, r4
 800b25e:	1ae2      	sublt	r2, r4, r3
 800b260:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b262:	bfbe      	ittt	lt
 800b264:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b266:	189b      	addlt	r3, r3, r2
 800b268:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b26a:	9b02      	ldr	r3, [sp, #8]
 800b26c:	bfb8      	it	lt
 800b26e:	2400      	movlt	r4, #0
 800b270:	2b00      	cmp	r3, #0
 800b272:	bfbb      	ittet	lt
 800b274:	9b06      	ldrlt	r3, [sp, #24]
 800b276:	9a02      	ldrlt	r2, [sp, #8]
 800b278:	9f06      	ldrge	r7, [sp, #24]
 800b27a:	1a9f      	sublt	r7, r3, r2
 800b27c:	bfac      	ite	ge
 800b27e:	9b02      	ldrge	r3, [sp, #8]
 800b280:	2300      	movlt	r3, #0
 800b282:	e73e      	b.n	800b102 <_dtoa_r+0x74a>
 800b284:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b286:	9f06      	ldr	r7, [sp, #24]
 800b288:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b28a:	e745      	b.n	800b118 <_dtoa_r+0x760>
 800b28c:	3fe00000 	.word	0x3fe00000
 800b290:	40240000 	.word	0x40240000
 800b294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b296:	e76a      	b.n	800b16e <_dtoa_r+0x7b6>
 800b298:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	dc19      	bgt.n	800b2d2 <_dtoa_r+0x91a>
 800b29e:	9b04      	ldr	r3, [sp, #16]
 800b2a0:	b9bb      	cbnz	r3, 800b2d2 <_dtoa_r+0x91a>
 800b2a2:	9b05      	ldr	r3, [sp, #20]
 800b2a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2a8:	b99b      	cbnz	r3, 800b2d2 <_dtoa_r+0x91a>
 800b2aa:	9b05      	ldr	r3, [sp, #20]
 800b2ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2b0:	0d1b      	lsrs	r3, r3, #20
 800b2b2:	051b      	lsls	r3, r3, #20
 800b2b4:	b183      	cbz	r3, 800b2d8 <_dtoa_r+0x920>
 800b2b6:	f04f 0801 	mov.w	r8, #1
 800b2ba:	9b06      	ldr	r3, [sp, #24]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	9306      	str	r3, [sp, #24]
 800b2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f47f af6a 	bne.w	800b1a2 <_dtoa_r+0x7ea>
 800b2ce:	2001      	movs	r0, #1
 800b2d0:	e76f      	b.n	800b1b2 <_dtoa_r+0x7fa>
 800b2d2:	f04f 0800 	mov.w	r8, #0
 800b2d6:	e7f6      	b.n	800b2c6 <_dtoa_r+0x90e>
 800b2d8:	4698      	mov	r8, r3
 800b2da:	e7f4      	b.n	800b2c6 <_dtoa_r+0x90e>
 800b2dc:	f43f af7d 	beq.w	800b1da <_dtoa_r+0x822>
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	301c      	adds	r0, #28
 800b2e4:	e772      	b.n	800b1cc <_dtoa_r+0x814>
 800b2e6:	9b02      	ldr	r3, [sp, #8]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	dc36      	bgt.n	800b35a <_dtoa_r+0x9a2>
 800b2ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	dd33      	ble.n	800b35a <_dtoa_r+0x9a2>
 800b2f2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b2f6:	f1bb 0f00 	cmp.w	fp, #0
 800b2fa:	d10d      	bne.n	800b318 <_dtoa_r+0x960>
 800b2fc:	4621      	mov	r1, r4
 800b2fe:	465b      	mov	r3, fp
 800b300:	2205      	movs	r2, #5
 800b302:	4628      	mov	r0, r5
 800b304:	f000 fbe2 	bl	800bacc <__multadd>
 800b308:	4601      	mov	r1, r0
 800b30a:	4604      	mov	r4, r0
 800b30c:	4650      	mov	r0, sl
 800b30e:	f000 fdf5 	bl	800befc <__mcmp>
 800b312:	2800      	cmp	r0, #0
 800b314:	f73f adb6 	bgt.w	800ae84 <_dtoa_r+0x4cc>
 800b318:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b31a:	9f08      	ldr	r7, [sp, #32]
 800b31c:	ea6f 0903 	mvn.w	r9, r3
 800b320:	f04f 0800 	mov.w	r8, #0
 800b324:	4621      	mov	r1, r4
 800b326:	4628      	mov	r0, r5
 800b328:	f000 fbae 	bl	800ba88 <_Bfree>
 800b32c:	2e00      	cmp	r6, #0
 800b32e:	f43f aea4 	beq.w	800b07a <_dtoa_r+0x6c2>
 800b332:	f1b8 0f00 	cmp.w	r8, #0
 800b336:	d005      	beq.n	800b344 <_dtoa_r+0x98c>
 800b338:	45b0      	cmp	r8, r6
 800b33a:	d003      	beq.n	800b344 <_dtoa_r+0x98c>
 800b33c:	4641      	mov	r1, r8
 800b33e:	4628      	mov	r0, r5
 800b340:	f000 fba2 	bl	800ba88 <_Bfree>
 800b344:	4631      	mov	r1, r6
 800b346:	4628      	mov	r0, r5
 800b348:	f000 fb9e 	bl	800ba88 <_Bfree>
 800b34c:	e695      	b.n	800b07a <_dtoa_r+0x6c2>
 800b34e:	2400      	movs	r4, #0
 800b350:	4626      	mov	r6, r4
 800b352:	e7e1      	b.n	800b318 <_dtoa_r+0x960>
 800b354:	46c1      	mov	r9, r8
 800b356:	4626      	mov	r6, r4
 800b358:	e594      	b.n	800ae84 <_dtoa_r+0x4cc>
 800b35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b35c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b360:	2b00      	cmp	r3, #0
 800b362:	f000 80fc 	beq.w	800b55e <_dtoa_r+0xba6>
 800b366:	2f00      	cmp	r7, #0
 800b368:	dd05      	ble.n	800b376 <_dtoa_r+0x9be>
 800b36a:	4631      	mov	r1, r6
 800b36c:	463a      	mov	r2, r7
 800b36e:	4628      	mov	r0, r5
 800b370:	f000 fd58 	bl	800be24 <__lshift>
 800b374:	4606      	mov	r6, r0
 800b376:	f1b8 0f00 	cmp.w	r8, #0
 800b37a:	d05c      	beq.n	800b436 <_dtoa_r+0xa7e>
 800b37c:	4628      	mov	r0, r5
 800b37e:	6871      	ldr	r1, [r6, #4]
 800b380:	f000 fb42 	bl	800ba08 <_Balloc>
 800b384:	4607      	mov	r7, r0
 800b386:	b928      	cbnz	r0, 800b394 <_dtoa_r+0x9dc>
 800b388:	4602      	mov	r2, r0
 800b38a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b38e:	4b7e      	ldr	r3, [pc, #504]	; (800b588 <_dtoa_r+0xbd0>)
 800b390:	f7ff bb26 	b.w	800a9e0 <_dtoa_r+0x28>
 800b394:	6932      	ldr	r2, [r6, #16]
 800b396:	f106 010c 	add.w	r1, r6, #12
 800b39a:	3202      	adds	r2, #2
 800b39c:	0092      	lsls	r2, r2, #2
 800b39e:	300c      	adds	r0, #12
 800b3a0:	f7fe fc38 	bl	8009c14 <memcpy>
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	4639      	mov	r1, r7
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	f000 fd3b 	bl	800be24 <__lshift>
 800b3ae:	46b0      	mov	r8, r6
 800b3b0:	4606      	mov	r6, r0
 800b3b2:	9b08      	ldr	r3, [sp, #32]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	9302      	str	r3, [sp, #8]
 800b3b8:	9b08      	ldr	r3, [sp, #32]
 800b3ba:	445b      	add	r3, fp
 800b3bc:	930a      	str	r3, [sp, #40]	; 0x28
 800b3be:	9b04      	ldr	r3, [sp, #16]
 800b3c0:	f003 0301 	and.w	r3, r3, #1
 800b3c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b3c6:	9b02      	ldr	r3, [sp, #8]
 800b3c8:	4621      	mov	r1, r4
 800b3ca:	4650      	mov	r0, sl
 800b3cc:	f103 3bff 	add.w	fp, r3, #4294967295
 800b3d0:	f7ff fa62 	bl	800a898 <quorem>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	4641      	mov	r1, r8
 800b3d8:	3330      	adds	r3, #48	; 0x30
 800b3da:	9004      	str	r0, [sp, #16]
 800b3dc:	4650      	mov	r0, sl
 800b3de:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3e0:	f000 fd8c 	bl	800befc <__mcmp>
 800b3e4:	4632      	mov	r2, r6
 800b3e6:	9006      	str	r0, [sp, #24]
 800b3e8:	4621      	mov	r1, r4
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	f000 fda2 	bl	800bf34 <__mdiff>
 800b3f0:	68c2      	ldr	r2, [r0, #12]
 800b3f2:	4607      	mov	r7, r0
 800b3f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3f6:	bb02      	cbnz	r2, 800b43a <_dtoa_r+0xa82>
 800b3f8:	4601      	mov	r1, r0
 800b3fa:	4650      	mov	r0, sl
 800b3fc:	f000 fd7e 	bl	800befc <__mcmp>
 800b400:	4602      	mov	r2, r0
 800b402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b404:	4639      	mov	r1, r7
 800b406:	4628      	mov	r0, r5
 800b408:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b40c:	f000 fb3c 	bl	800ba88 <_Bfree>
 800b410:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b414:	9f02      	ldr	r7, [sp, #8]
 800b416:	ea43 0102 	orr.w	r1, r3, r2
 800b41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b41c:	430b      	orrs	r3, r1
 800b41e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b420:	d10d      	bne.n	800b43e <_dtoa_r+0xa86>
 800b422:	2b39      	cmp	r3, #57	; 0x39
 800b424:	d027      	beq.n	800b476 <_dtoa_r+0xabe>
 800b426:	9a06      	ldr	r2, [sp, #24]
 800b428:	2a00      	cmp	r2, #0
 800b42a:	dd01      	ble.n	800b430 <_dtoa_r+0xa78>
 800b42c:	9b04      	ldr	r3, [sp, #16]
 800b42e:	3331      	adds	r3, #49	; 0x31
 800b430:	f88b 3000 	strb.w	r3, [fp]
 800b434:	e776      	b.n	800b324 <_dtoa_r+0x96c>
 800b436:	4630      	mov	r0, r6
 800b438:	e7b9      	b.n	800b3ae <_dtoa_r+0x9f6>
 800b43a:	2201      	movs	r2, #1
 800b43c:	e7e2      	b.n	800b404 <_dtoa_r+0xa4c>
 800b43e:	9906      	ldr	r1, [sp, #24]
 800b440:	2900      	cmp	r1, #0
 800b442:	db04      	blt.n	800b44e <_dtoa_r+0xa96>
 800b444:	9822      	ldr	r0, [sp, #136]	; 0x88
 800b446:	4301      	orrs	r1, r0
 800b448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b44a:	4301      	orrs	r1, r0
 800b44c:	d120      	bne.n	800b490 <_dtoa_r+0xad8>
 800b44e:	2a00      	cmp	r2, #0
 800b450:	ddee      	ble.n	800b430 <_dtoa_r+0xa78>
 800b452:	4651      	mov	r1, sl
 800b454:	2201      	movs	r2, #1
 800b456:	4628      	mov	r0, r5
 800b458:	9302      	str	r3, [sp, #8]
 800b45a:	f000 fce3 	bl	800be24 <__lshift>
 800b45e:	4621      	mov	r1, r4
 800b460:	4682      	mov	sl, r0
 800b462:	f000 fd4b 	bl	800befc <__mcmp>
 800b466:	2800      	cmp	r0, #0
 800b468:	9b02      	ldr	r3, [sp, #8]
 800b46a:	dc02      	bgt.n	800b472 <_dtoa_r+0xaba>
 800b46c:	d1e0      	bne.n	800b430 <_dtoa_r+0xa78>
 800b46e:	07da      	lsls	r2, r3, #31
 800b470:	d5de      	bpl.n	800b430 <_dtoa_r+0xa78>
 800b472:	2b39      	cmp	r3, #57	; 0x39
 800b474:	d1da      	bne.n	800b42c <_dtoa_r+0xa74>
 800b476:	2339      	movs	r3, #57	; 0x39
 800b478:	f88b 3000 	strb.w	r3, [fp]
 800b47c:	463b      	mov	r3, r7
 800b47e:	461f      	mov	r7, r3
 800b480:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b484:	3b01      	subs	r3, #1
 800b486:	2a39      	cmp	r2, #57	; 0x39
 800b488:	d050      	beq.n	800b52c <_dtoa_r+0xb74>
 800b48a:	3201      	adds	r2, #1
 800b48c:	701a      	strb	r2, [r3, #0]
 800b48e:	e749      	b.n	800b324 <_dtoa_r+0x96c>
 800b490:	2a00      	cmp	r2, #0
 800b492:	dd03      	ble.n	800b49c <_dtoa_r+0xae4>
 800b494:	2b39      	cmp	r3, #57	; 0x39
 800b496:	d0ee      	beq.n	800b476 <_dtoa_r+0xabe>
 800b498:	3301      	adds	r3, #1
 800b49a:	e7c9      	b.n	800b430 <_dtoa_r+0xa78>
 800b49c:	9a02      	ldr	r2, [sp, #8]
 800b49e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b4a4:	428a      	cmp	r2, r1
 800b4a6:	d02a      	beq.n	800b4fe <_dtoa_r+0xb46>
 800b4a8:	4651      	mov	r1, sl
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	220a      	movs	r2, #10
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	f000 fb0c 	bl	800bacc <__multadd>
 800b4b4:	45b0      	cmp	r8, r6
 800b4b6:	4682      	mov	sl, r0
 800b4b8:	f04f 0300 	mov.w	r3, #0
 800b4bc:	f04f 020a 	mov.w	r2, #10
 800b4c0:	4641      	mov	r1, r8
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	d107      	bne.n	800b4d6 <_dtoa_r+0xb1e>
 800b4c6:	f000 fb01 	bl	800bacc <__multadd>
 800b4ca:	4680      	mov	r8, r0
 800b4cc:	4606      	mov	r6, r0
 800b4ce:	9b02      	ldr	r3, [sp, #8]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	9302      	str	r3, [sp, #8]
 800b4d4:	e777      	b.n	800b3c6 <_dtoa_r+0xa0e>
 800b4d6:	f000 faf9 	bl	800bacc <__multadd>
 800b4da:	4631      	mov	r1, r6
 800b4dc:	4680      	mov	r8, r0
 800b4de:	2300      	movs	r3, #0
 800b4e0:	220a      	movs	r2, #10
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	f000 faf2 	bl	800bacc <__multadd>
 800b4e8:	4606      	mov	r6, r0
 800b4ea:	e7f0      	b.n	800b4ce <_dtoa_r+0xb16>
 800b4ec:	f1bb 0f00 	cmp.w	fp, #0
 800b4f0:	bfcc      	ite	gt
 800b4f2:	465f      	movgt	r7, fp
 800b4f4:	2701      	movle	r7, #1
 800b4f6:	f04f 0800 	mov.w	r8, #0
 800b4fa:	9a08      	ldr	r2, [sp, #32]
 800b4fc:	4417      	add	r7, r2
 800b4fe:	4651      	mov	r1, sl
 800b500:	2201      	movs	r2, #1
 800b502:	4628      	mov	r0, r5
 800b504:	9302      	str	r3, [sp, #8]
 800b506:	f000 fc8d 	bl	800be24 <__lshift>
 800b50a:	4621      	mov	r1, r4
 800b50c:	4682      	mov	sl, r0
 800b50e:	f000 fcf5 	bl	800befc <__mcmp>
 800b512:	2800      	cmp	r0, #0
 800b514:	dcb2      	bgt.n	800b47c <_dtoa_r+0xac4>
 800b516:	d102      	bne.n	800b51e <_dtoa_r+0xb66>
 800b518:	9b02      	ldr	r3, [sp, #8]
 800b51a:	07db      	lsls	r3, r3, #31
 800b51c:	d4ae      	bmi.n	800b47c <_dtoa_r+0xac4>
 800b51e:	463b      	mov	r3, r7
 800b520:	461f      	mov	r7, r3
 800b522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b526:	2a30      	cmp	r2, #48	; 0x30
 800b528:	d0fa      	beq.n	800b520 <_dtoa_r+0xb68>
 800b52a:	e6fb      	b.n	800b324 <_dtoa_r+0x96c>
 800b52c:	9a08      	ldr	r2, [sp, #32]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d1a5      	bne.n	800b47e <_dtoa_r+0xac6>
 800b532:	2331      	movs	r3, #49	; 0x31
 800b534:	f109 0901 	add.w	r9, r9, #1
 800b538:	7013      	strb	r3, [r2, #0]
 800b53a:	e6f3      	b.n	800b324 <_dtoa_r+0x96c>
 800b53c:	4b13      	ldr	r3, [pc, #76]	; (800b58c <_dtoa_r+0xbd4>)
 800b53e:	f7ff baa7 	b.w	800aa90 <_dtoa_r+0xd8>
 800b542:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b544:	2b00      	cmp	r3, #0
 800b546:	f47f aa80 	bne.w	800aa4a <_dtoa_r+0x92>
 800b54a:	4b11      	ldr	r3, [pc, #68]	; (800b590 <_dtoa_r+0xbd8>)
 800b54c:	f7ff baa0 	b.w	800aa90 <_dtoa_r+0xd8>
 800b550:	f1bb 0f00 	cmp.w	fp, #0
 800b554:	dc03      	bgt.n	800b55e <_dtoa_r+0xba6>
 800b556:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b558:	2b02      	cmp	r3, #2
 800b55a:	f73f aecc 	bgt.w	800b2f6 <_dtoa_r+0x93e>
 800b55e:	9f08      	ldr	r7, [sp, #32]
 800b560:	4621      	mov	r1, r4
 800b562:	4650      	mov	r0, sl
 800b564:	f7ff f998 	bl	800a898 <quorem>
 800b568:	9a08      	ldr	r2, [sp, #32]
 800b56a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b56e:	f807 3b01 	strb.w	r3, [r7], #1
 800b572:	1aba      	subs	r2, r7, r2
 800b574:	4593      	cmp	fp, r2
 800b576:	ddb9      	ble.n	800b4ec <_dtoa_r+0xb34>
 800b578:	4651      	mov	r1, sl
 800b57a:	2300      	movs	r3, #0
 800b57c:	220a      	movs	r2, #10
 800b57e:	4628      	mov	r0, r5
 800b580:	f000 faa4 	bl	800bacc <__multadd>
 800b584:	4682      	mov	sl, r0
 800b586:	e7eb      	b.n	800b560 <_dtoa_r+0xba8>
 800b588:	0800dd9f 	.word	0x0800dd9f
 800b58c:	0800dcf8 	.word	0x0800dcf8
 800b590:	0800dd1c 	.word	0x0800dd1c

0800b594 <__sflush_r>:
 800b594:	898a      	ldrh	r2, [r1, #12]
 800b596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b59a:	4605      	mov	r5, r0
 800b59c:	0710      	lsls	r0, r2, #28
 800b59e:	460c      	mov	r4, r1
 800b5a0:	d458      	bmi.n	800b654 <__sflush_r+0xc0>
 800b5a2:	684b      	ldr	r3, [r1, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	dc05      	bgt.n	800b5b4 <__sflush_r+0x20>
 800b5a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	dc02      	bgt.n	800b5b4 <__sflush_r+0x20>
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5b6:	2e00      	cmp	r6, #0
 800b5b8:	d0f9      	beq.n	800b5ae <__sflush_r+0x1a>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5c0:	682f      	ldr	r7, [r5, #0]
 800b5c2:	602b      	str	r3, [r5, #0]
 800b5c4:	d032      	beq.n	800b62c <__sflush_r+0x98>
 800b5c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	075a      	lsls	r2, r3, #29
 800b5cc:	d505      	bpl.n	800b5da <__sflush_r+0x46>
 800b5ce:	6863      	ldr	r3, [r4, #4]
 800b5d0:	1ac0      	subs	r0, r0, r3
 800b5d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5d4:	b10b      	cbz	r3, 800b5da <__sflush_r+0x46>
 800b5d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5d8:	1ac0      	subs	r0, r0, r3
 800b5da:	2300      	movs	r3, #0
 800b5dc:	4602      	mov	r2, r0
 800b5de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	6a21      	ldr	r1, [r4, #32]
 800b5e4:	47b0      	blx	r6
 800b5e6:	1c43      	adds	r3, r0, #1
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	d106      	bne.n	800b5fa <__sflush_r+0x66>
 800b5ec:	6829      	ldr	r1, [r5, #0]
 800b5ee:	291d      	cmp	r1, #29
 800b5f0:	d82c      	bhi.n	800b64c <__sflush_r+0xb8>
 800b5f2:	4a2a      	ldr	r2, [pc, #168]	; (800b69c <__sflush_r+0x108>)
 800b5f4:	40ca      	lsrs	r2, r1
 800b5f6:	07d6      	lsls	r6, r2, #31
 800b5f8:	d528      	bpl.n	800b64c <__sflush_r+0xb8>
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	6062      	str	r2, [r4, #4]
 800b5fe:	6922      	ldr	r2, [r4, #16]
 800b600:	04d9      	lsls	r1, r3, #19
 800b602:	6022      	str	r2, [r4, #0]
 800b604:	d504      	bpl.n	800b610 <__sflush_r+0x7c>
 800b606:	1c42      	adds	r2, r0, #1
 800b608:	d101      	bne.n	800b60e <__sflush_r+0x7a>
 800b60a:	682b      	ldr	r3, [r5, #0]
 800b60c:	b903      	cbnz	r3, 800b610 <__sflush_r+0x7c>
 800b60e:	6560      	str	r0, [r4, #84]	; 0x54
 800b610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b612:	602f      	str	r7, [r5, #0]
 800b614:	2900      	cmp	r1, #0
 800b616:	d0ca      	beq.n	800b5ae <__sflush_r+0x1a>
 800b618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b61c:	4299      	cmp	r1, r3
 800b61e:	d002      	beq.n	800b626 <__sflush_r+0x92>
 800b620:	4628      	mov	r0, r5
 800b622:	f000 fd81 	bl	800c128 <_free_r>
 800b626:	2000      	movs	r0, #0
 800b628:	6360      	str	r0, [r4, #52]	; 0x34
 800b62a:	e7c1      	b.n	800b5b0 <__sflush_r+0x1c>
 800b62c:	6a21      	ldr	r1, [r4, #32]
 800b62e:	2301      	movs	r3, #1
 800b630:	4628      	mov	r0, r5
 800b632:	47b0      	blx	r6
 800b634:	1c41      	adds	r1, r0, #1
 800b636:	d1c7      	bne.n	800b5c8 <__sflush_r+0x34>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d0c4      	beq.n	800b5c8 <__sflush_r+0x34>
 800b63e:	2b1d      	cmp	r3, #29
 800b640:	d001      	beq.n	800b646 <__sflush_r+0xb2>
 800b642:	2b16      	cmp	r3, #22
 800b644:	d101      	bne.n	800b64a <__sflush_r+0xb6>
 800b646:	602f      	str	r7, [r5, #0]
 800b648:	e7b1      	b.n	800b5ae <__sflush_r+0x1a>
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b650:	81a3      	strh	r3, [r4, #12]
 800b652:	e7ad      	b.n	800b5b0 <__sflush_r+0x1c>
 800b654:	690f      	ldr	r7, [r1, #16]
 800b656:	2f00      	cmp	r7, #0
 800b658:	d0a9      	beq.n	800b5ae <__sflush_r+0x1a>
 800b65a:	0793      	lsls	r3, r2, #30
 800b65c:	bf18      	it	ne
 800b65e:	2300      	movne	r3, #0
 800b660:	680e      	ldr	r6, [r1, #0]
 800b662:	bf08      	it	eq
 800b664:	694b      	ldreq	r3, [r1, #20]
 800b666:	eba6 0807 	sub.w	r8, r6, r7
 800b66a:	600f      	str	r7, [r1, #0]
 800b66c:	608b      	str	r3, [r1, #8]
 800b66e:	f1b8 0f00 	cmp.w	r8, #0
 800b672:	dd9c      	ble.n	800b5ae <__sflush_r+0x1a>
 800b674:	4643      	mov	r3, r8
 800b676:	463a      	mov	r2, r7
 800b678:	4628      	mov	r0, r5
 800b67a:	6a21      	ldr	r1, [r4, #32]
 800b67c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b67e:	47b0      	blx	r6
 800b680:	2800      	cmp	r0, #0
 800b682:	dc06      	bgt.n	800b692 <__sflush_r+0xfe>
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	f04f 30ff 	mov.w	r0, #4294967295
 800b68a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b68e:	81a3      	strh	r3, [r4, #12]
 800b690:	e78e      	b.n	800b5b0 <__sflush_r+0x1c>
 800b692:	4407      	add	r7, r0
 800b694:	eba8 0800 	sub.w	r8, r8, r0
 800b698:	e7e9      	b.n	800b66e <__sflush_r+0xda>
 800b69a:	bf00      	nop
 800b69c:	20400001 	.word	0x20400001

0800b6a0 <_fflush_r>:
 800b6a0:	b538      	push	{r3, r4, r5, lr}
 800b6a2:	690b      	ldr	r3, [r1, #16]
 800b6a4:	4605      	mov	r5, r0
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	b913      	cbnz	r3, 800b6b0 <_fflush_r+0x10>
 800b6aa:	2500      	movs	r5, #0
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	b118      	cbz	r0, 800b6ba <_fflush_r+0x1a>
 800b6b2:	6983      	ldr	r3, [r0, #24]
 800b6b4:	b90b      	cbnz	r3, 800b6ba <_fflush_r+0x1a>
 800b6b6:	f000 f887 	bl	800b7c8 <__sinit>
 800b6ba:	4b14      	ldr	r3, [pc, #80]	; (800b70c <_fflush_r+0x6c>)
 800b6bc:	429c      	cmp	r4, r3
 800b6be:	d11b      	bne.n	800b6f8 <_fflush_r+0x58>
 800b6c0:	686c      	ldr	r4, [r5, #4]
 800b6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d0ef      	beq.n	800b6aa <_fflush_r+0xa>
 800b6ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6cc:	07d0      	lsls	r0, r2, #31
 800b6ce:	d404      	bmi.n	800b6da <_fflush_r+0x3a>
 800b6d0:	0599      	lsls	r1, r3, #22
 800b6d2:	d402      	bmi.n	800b6da <_fflush_r+0x3a>
 800b6d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6d6:	f000 f91a 	bl	800b90e <__retarget_lock_acquire_recursive>
 800b6da:	4628      	mov	r0, r5
 800b6dc:	4621      	mov	r1, r4
 800b6de:	f7ff ff59 	bl	800b594 <__sflush_r>
 800b6e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	07da      	lsls	r2, r3, #31
 800b6e8:	d4e0      	bmi.n	800b6ac <_fflush_r+0xc>
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	059b      	lsls	r3, r3, #22
 800b6ee:	d4dd      	bmi.n	800b6ac <_fflush_r+0xc>
 800b6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6f2:	f000 f90d 	bl	800b910 <__retarget_lock_release_recursive>
 800b6f6:	e7d9      	b.n	800b6ac <_fflush_r+0xc>
 800b6f8:	4b05      	ldr	r3, [pc, #20]	; (800b710 <_fflush_r+0x70>)
 800b6fa:	429c      	cmp	r4, r3
 800b6fc:	d101      	bne.n	800b702 <_fflush_r+0x62>
 800b6fe:	68ac      	ldr	r4, [r5, #8]
 800b700:	e7df      	b.n	800b6c2 <_fflush_r+0x22>
 800b702:	4b04      	ldr	r3, [pc, #16]	; (800b714 <_fflush_r+0x74>)
 800b704:	429c      	cmp	r4, r3
 800b706:	bf08      	it	eq
 800b708:	68ec      	ldreq	r4, [r5, #12]
 800b70a:	e7da      	b.n	800b6c2 <_fflush_r+0x22>
 800b70c:	0800ddd0 	.word	0x0800ddd0
 800b710:	0800ddf0 	.word	0x0800ddf0
 800b714:	0800ddb0 	.word	0x0800ddb0

0800b718 <std>:
 800b718:	2300      	movs	r3, #0
 800b71a:	b510      	push	{r4, lr}
 800b71c:	4604      	mov	r4, r0
 800b71e:	e9c0 3300 	strd	r3, r3, [r0]
 800b722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b726:	6083      	str	r3, [r0, #8]
 800b728:	8181      	strh	r1, [r0, #12]
 800b72a:	6643      	str	r3, [r0, #100]	; 0x64
 800b72c:	81c2      	strh	r2, [r0, #14]
 800b72e:	6183      	str	r3, [r0, #24]
 800b730:	4619      	mov	r1, r3
 800b732:	2208      	movs	r2, #8
 800b734:	305c      	adds	r0, #92	; 0x5c
 800b736:	f7fe fa95 	bl	8009c64 <memset>
 800b73a:	4b05      	ldr	r3, [pc, #20]	; (800b750 <std+0x38>)
 800b73c:	6224      	str	r4, [r4, #32]
 800b73e:	6263      	str	r3, [r4, #36]	; 0x24
 800b740:	4b04      	ldr	r3, [pc, #16]	; (800b754 <std+0x3c>)
 800b742:	62a3      	str	r3, [r4, #40]	; 0x28
 800b744:	4b04      	ldr	r3, [pc, #16]	; (800b758 <std+0x40>)
 800b746:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b748:	4b04      	ldr	r3, [pc, #16]	; (800b75c <std+0x44>)
 800b74a:	6323      	str	r3, [r4, #48]	; 0x30
 800b74c:	bd10      	pop	{r4, pc}
 800b74e:	bf00      	nop
 800b750:	0800c7fd 	.word	0x0800c7fd
 800b754:	0800c81f 	.word	0x0800c81f
 800b758:	0800c857 	.word	0x0800c857
 800b75c:	0800c87b 	.word	0x0800c87b

0800b760 <_cleanup_r>:
 800b760:	4901      	ldr	r1, [pc, #4]	; (800b768 <_cleanup_r+0x8>)
 800b762:	f000 b8af 	b.w	800b8c4 <_fwalk_reent>
 800b766:	bf00      	nop
 800b768:	0800b6a1 	.word	0x0800b6a1

0800b76c <__sfmoreglue>:
 800b76c:	b570      	push	{r4, r5, r6, lr}
 800b76e:	2568      	movs	r5, #104	; 0x68
 800b770:	1e4a      	subs	r2, r1, #1
 800b772:	4355      	muls	r5, r2
 800b774:	460e      	mov	r6, r1
 800b776:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b77a:	f000 fd21 	bl	800c1c0 <_malloc_r>
 800b77e:	4604      	mov	r4, r0
 800b780:	b140      	cbz	r0, 800b794 <__sfmoreglue+0x28>
 800b782:	2100      	movs	r1, #0
 800b784:	e9c0 1600 	strd	r1, r6, [r0]
 800b788:	300c      	adds	r0, #12
 800b78a:	60a0      	str	r0, [r4, #8]
 800b78c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b790:	f7fe fa68 	bl	8009c64 <memset>
 800b794:	4620      	mov	r0, r4
 800b796:	bd70      	pop	{r4, r5, r6, pc}

0800b798 <__sfp_lock_acquire>:
 800b798:	4801      	ldr	r0, [pc, #4]	; (800b7a0 <__sfp_lock_acquire+0x8>)
 800b79a:	f000 b8b8 	b.w	800b90e <__retarget_lock_acquire_recursive>
 800b79e:	bf00      	nop
 800b7a0:	200003ec 	.word	0x200003ec

0800b7a4 <__sfp_lock_release>:
 800b7a4:	4801      	ldr	r0, [pc, #4]	; (800b7ac <__sfp_lock_release+0x8>)
 800b7a6:	f000 b8b3 	b.w	800b910 <__retarget_lock_release_recursive>
 800b7aa:	bf00      	nop
 800b7ac:	200003ec 	.word	0x200003ec

0800b7b0 <__sinit_lock_acquire>:
 800b7b0:	4801      	ldr	r0, [pc, #4]	; (800b7b8 <__sinit_lock_acquire+0x8>)
 800b7b2:	f000 b8ac 	b.w	800b90e <__retarget_lock_acquire_recursive>
 800b7b6:	bf00      	nop
 800b7b8:	200003e7 	.word	0x200003e7

0800b7bc <__sinit_lock_release>:
 800b7bc:	4801      	ldr	r0, [pc, #4]	; (800b7c4 <__sinit_lock_release+0x8>)
 800b7be:	f000 b8a7 	b.w	800b910 <__retarget_lock_release_recursive>
 800b7c2:	bf00      	nop
 800b7c4:	200003e7 	.word	0x200003e7

0800b7c8 <__sinit>:
 800b7c8:	b510      	push	{r4, lr}
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	f7ff fff0 	bl	800b7b0 <__sinit_lock_acquire>
 800b7d0:	69a3      	ldr	r3, [r4, #24]
 800b7d2:	b11b      	cbz	r3, 800b7dc <__sinit+0x14>
 800b7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7d8:	f7ff bff0 	b.w	800b7bc <__sinit_lock_release>
 800b7dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b7e0:	6523      	str	r3, [r4, #80]	; 0x50
 800b7e2:	4b13      	ldr	r3, [pc, #76]	; (800b830 <__sinit+0x68>)
 800b7e4:	4a13      	ldr	r2, [pc, #76]	; (800b834 <__sinit+0x6c>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b7ea:	42a3      	cmp	r3, r4
 800b7ec:	bf08      	it	eq
 800b7ee:	2301      	moveq	r3, #1
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	bf08      	it	eq
 800b7f4:	61a3      	streq	r3, [r4, #24]
 800b7f6:	f000 f81f 	bl	800b838 <__sfp>
 800b7fa:	6060      	str	r0, [r4, #4]
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f000 f81b 	bl	800b838 <__sfp>
 800b802:	60a0      	str	r0, [r4, #8]
 800b804:	4620      	mov	r0, r4
 800b806:	f000 f817 	bl	800b838 <__sfp>
 800b80a:	2200      	movs	r2, #0
 800b80c:	2104      	movs	r1, #4
 800b80e:	60e0      	str	r0, [r4, #12]
 800b810:	6860      	ldr	r0, [r4, #4]
 800b812:	f7ff ff81 	bl	800b718 <std>
 800b816:	2201      	movs	r2, #1
 800b818:	2109      	movs	r1, #9
 800b81a:	68a0      	ldr	r0, [r4, #8]
 800b81c:	f7ff ff7c 	bl	800b718 <std>
 800b820:	2202      	movs	r2, #2
 800b822:	2112      	movs	r1, #18
 800b824:	68e0      	ldr	r0, [r4, #12]
 800b826:	f7ff ff77 	bl	800b718 <std>
 800b82a:	2301      	movs	r3, #1
 800b82c:	61a3      	str	r3, [r4, #24]
 800b82e:	e7d1      	b.n	800b7d4 <__sinit+0xc>
 800b830:	0800dce4 	.word	0x0800dce4
 800b834:	0800b761 	.word	0x0800b761

0800b838 <__sfp>:
 800b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83a:	4607      	mov	r7, r0
 800b83c:	f7ff ffac 	bl	800b798 <__sfp_lock_acquire>
 800b840:	4b1e      	ldr	r3, [pc, #120]	; (800b8bc <__sfp+0x84>)
 800b842:	681e      	ldr	r6, [r3, #0]
 800b844:	69b3      	ldr	r3, [r6, #24]
 800b846:	b913      	cbnz	r3, 800b84e <__sfp+0x16>
 800b848:	4630      	mov	r0, r6
 800b84a:	f7ff ffbd 	bl	800b7c8 <__sinit>
 800b84e:	3648      	adds	r6, #72	; 0x48
 800b850:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b854:	3b01      	subs	r3, #1
 800b856:	d503      	bpl.n	800b860 <__sfp+0x28>
 800b858:	6833      	ldr	r3, [r6, #0]
 800b85a:	b30b      	cbz	r3, 800b8a0 <__sfp+0x68>
 800b85c:	6836      	ldr	r6, [r6, #0]
 800b85e:	e7f7      	b.n	800b850 <__sfp+0x18>
 800b860:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b864:	b9d5      	cbnz	r5, 800b89c <__sfp+0x64>
 800b866:	4b16      	ldr	r3, [pc, #88]	; (800b8c0 <__sfp+0x88>)
 800b868:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b86c:	60e3      	str	r3, [r4, #12]
 800b86e:	6665      	str	r5, [r4, #100]	; 0x64
 800b870:	f000 f84c 	bl	800b90c <__retarget_lock_init_recursive>
 800b874:	f7ff ff96 	bl	800b7a4 <__sfp_lock_release>
 800b878:	2208      	movs	r2, #8
 800b87a:	4629      	mov	r1, r5
 800b87c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b880:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b884:	6025      	str	r5, [r4, #0]
 800b886:	61a5      	str	r5, [r4, #24]
 800b888:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b88c:	f7fe f9ea 	bl	8009c64 <memset>
 800b890:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b894:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b898:	4620      	mov	r0, r4
 800b89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b89c:	3468      	adds	r4, #104	; 0x68
 800b89e:	e7d9      	b.n	800b854 <__sfp+0x1c>
 800b8a0:	2104      	movs	r1, #4
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	f7ff ff62 	bl	800b76c <__sfmoreglue>
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	6030      	str	r0, [r6, #0]
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d1d5      	bne.n	800b85c <__sfp+0x24>
 800b8b0:	f7ff ff78 	bl	800b7a4 <__sfp_lock_release>
 800b8b4:	230c      	movs	r3, #12
 800b8b6:	603b      	str	r3, [r7, #0]
 800b8b8:	e7ee      	b.n	800b898 <__sfp+0x60>
 800b8ba:	bf00      	nop
 800b8bc:	0800dce4 	.word	0x0800dce4
 800b8c0:	ffff0001 	.word	0xffff0001

0800b8c4 <_fwalk_reent>:
 800b8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8c8:	4606      	mov	r6, r0
 800b8ca:	4688      	mov	r8, r1
 800b8cc:	2700      	movs	r7, #0
 800b8ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b8d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8d6:	f1b9 0901 	subs.w	r9, r9, #1
 800b8da:	d505      	bpl.n	800b8e8 <_fwalk_reent+0x24>
 800b8dc:	6824      	ldr	r4, [r4, #0]
 800b8de:	2c00      	cmp	r4, #0
 800b8e0:	d1f7      	bne.n	800b8d2 <_fwalk_reent+0xe>
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8e8:	89ab      	ldrh	r3, [r5, #12]
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d907      	bls.n	800b8fe <_fwalk_reent+0x3a>
 800b8ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	d003      	beq.n	800b8fe <_fwalk_reent+0x3a>
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	47c0      	blx	r8
 800b8fc:	4307      	orrs	r7, r0
 800b8fe:	3568      	adds	r5, #104	; 0x68
 800b900:	e7e9      	b.n	800b8d6 <_fwalk_reent+0x12>
	...

0800b904 <_localeconv_r>:
 800b904:	4800      	ldr	r0, [pc, #0]	; (800b908 <_localeconv_r+0x4>)
 800b906:	4770      	bx	lr
 800b908:	2000017c 	.word	0x2000017c

0800b90c <__retarget_lock_init_recursive>:
 800b90c:	4770      	bx	lr

0800b90e <__retarget_lock_acquire_recursive>:
 800b90e:	4770      	bx	lr

0800b910 <__retarget_lock_release_recursive>:
 800b910:	4770      	bx	lr

0800b912 <__swhatbuf_r>:
 800b912:	b570      	push	{r4, r5, r6, lr}
 800b914:	460e      	mov	r6, r1
 800b916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b91a:	4614      	mov	r4, r2
 800b91c:	2900      	cmp	r1, #0
 800b91e:	461d      	mov	r5, r3
 800b920:	b096      	sub	sp, #88	; 0x58
 800b922:	da07      	bge.n	800b934 <__swhatbuf_r+0x22>
 800b924:	2300      	movs	r3, #0
 800b926:	602b      	str	r3, [r5, #0]
 800b928:	89b3      	ldrh	r3, [r6, #12]
 800b92a:	061a      	lsls	r2, r3, #24
 800b92c:	d410      	bmi.n	800b950 <__swhatbuf_r+0x3e>
 800b92e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b932:	e00e      	b.n	800b952 <__swhatbuf_r+0x40>
 800b934:	466a      	mov	r2, sp
 800b936:	f000 fff7 	bl	800c928 <_fstat_r>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	dbf2      	blt.n	800b924 <__swhatbuf_r+0x12>
 800b93e:	9a01      	ldr	r2, [sp, #4]
 800b940:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b944:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b948:	425a      	negs	r2, r3
 800b94a:	415a      	adcs	r2, r3
 800b94c:	602a      	str	r2, [r5, #0]
 800b94e:	e7ee      	b.n	800b92e <__swhatbuf_r+0x1c>
 800b950:	2340      	movs	r3, #64	; 0x40
 800b952:	2000      	movs	r0, #0
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	b016      	add	sp, #88	; 0x58
 800b958:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b95c <__smakebuf_r>:
 800b95c:	898b      	ldrh	r3, [r1, #12]
 800b95e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b960:	079d      	lsls	r5, r3, #30
 800b962:	4606      	mov	r6, r0
 800b964:	460c      	mov	r4, r1
 800b966:	d507      	bpl.n	800b978 <__smakebuf_r+0x1c>
 800b968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	6123      	str	r3, [r4, #16]
 800b970:	2301      	movs	r3, #1
 800b972:	6163      	str	r3, [r4, #20]
 800b974:	b002      	add	sp, #8
 800b976:	bd70      	pop	{r4, r5, r6, pc}
 800b978:	466a      	mov	r2, sp
 800b97a:	ab01      	add	r3, sp, #4
 800b97c:	f7ff ffc9 	bl	800b912 <__swhatbuf_r>
 800b980:	9900      	ldr	r1, [sp, #0]
 800b982:	4605      	mov	r5, r0
 800b984:	4630      	mov	r0, r6
 800b986:	f000 fc1b 	bl	800c1c0 <_malloc_r>
 800b98a:	b948      	cbnz	r0, 800b9a0 <__smakebuf_r+0x44>
 800b98c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b990:	059a      	lsls	r2, r3, #22
 800b992:	d4ef      	bmi.n	800b974 <__smakebuf_r+0x18>
 800b994:	f023 0303 	bic.w	r3, r3, #3
 800b998:	f043 0302 	orr.w	r3, r3, #2
 800b99c:	81a3      	strh	r3, [r4, #12]
 800b99e:	e7e3      	b.n	800b968 <__smakebuf_r+0xc>
 800b9a0:	4b0d      	ldr	r3, [pc, #52]	; (800b9d8 <__smakebuf_r+0x7c>)
 800b9a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9a4:	89a3      	ldrh	r3, [r4, #12]
 800b9a6:	6020      	str	r0, [r4, #0]
 800b9a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ac:	81a3      	strh	r3, [r4, #12]
 800b9ae:	9b00      	ldr	r3, [sp, #0]
 800b9b0:	6120      	str	r0, [r4, #16]
 800b9b2:	6163      	str	r3, [r4, #20]
 800b9b4:	9b01      	ldr	r3, [sp, #4]
 800b9b6:	b15b      	cbz	r3, 800b9d0 <__smakebuf_r+0x74>
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9be:	f000 ffc5 	bl	800c94c <_isatty_r>
 800b9c2:	b128      	cbz	r0, 800b9d0 <__smakebuf_r+0x74>
 800b9c4:	89a3      	ldrh	r3, [r4, #12]
 800b9c6:	f023 0303 	bic.w	r3, r3, #3
 800b9ca:	f043 0301 	orr.w	r3, r3, #1
 800b9ce:	81a3      	strh	r3, [r4, #12]
 800b9d0:	89a0      	ldrh	r0, [r4, #12]
 800b9d2:	4305      	orrs	r5, r0
 800b9d4:	81a5      	strh	r5, [r4, #12]
 800b9d6:	e7cd      	b.n	800b974 <__smakebuf_r+0x18>
 800b9d8:	0800b761 	.word	0x0800b761

0800b9dc <malloc>:
 800b9dc:	4b02      	ldr	r3, [pc, #8]	; (800b9e8 <malloc+0xc>)
 800b9de:	4601      	mov	r1, r0
 800b9e0:	6818      	ldr	r0, [r3, #0]
 800b9e2:	f000 bbed 	b.w	800c1c0 <_malloc_r>
 800b9e6:	bf00      	nop
 800b9e8:	20000028 	.word	0x20000028

0800b9ec <memchr>:
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	b510      	push	{r4, lr}
 800b9f0:	b2c9      	uxtb	r1, r1
 800b9f2:	4402      	add	r2, r0
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	d101      	bne.n	800b9fe <memchr+0x12>
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	e003      	b.n	800ba06 <memchr+0x1a>
 800b9fe:	7804      	ldrb	r4, [r0, #0]
 800ba00:	3301      	adds	r3, #1
 800ba02:	428c      	cmp	r4, r1
 800ba04:	d1f6      	bne.n	800b9f4 <memchr+0x8>
 800ba06:	bd10      	pop	{r4, pc}

0800ba08 <_Balloc>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	460d      	mov	r5, r1
 800ba10:	b976      	cbnz	r6, 800ba30 <_Balloc+0x28>
 800ba12:	2010      	movs	r0, #16
 800ba14:	f7ff ffe2 	bl	800b9dc <malloc>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	6260      	str	r0, [r4, #36]	; 0x24
 800ba1c:	b920      	cbnz	r0, 800ba28 <_Balloc+0x20>
 800ba1e:	2166      	movs	r1, #102	; 0x66
 800ba20:	4b17      	ldr	r3, [pc, #92]	; (800ba80 <_Balloc+0x78>)
 800ba22:	4818      	ldr	r0, [pc, #96]	; (800ba84 <_Balloc+0x7c>)
 800ba24:	f000 ff40 	bl	800c8a8 <__assert_func>
 800ba28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba2c:	6006      	str	r6, [r0, #0]
 800ba2e:	60c6      	str	r6, [r0, #12]
 800ba30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba32:	68f3      	ldr	r3, [r6, #12]
 800ba34:	b183      	cbz	r3, 800ba58 <_Balloc+0x50>
 800ba36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba3e:	b9b8      	cbnz	r0, 800ba70 <_Balloc+0x68>
 800ba40:	2101      	movs	r1, #1
 800ba42:	fa01 f605 	lsl.w	r6, r1, r5
 800ba46:	1d72      	adds	r2, r6, #5
 800ba48:	4620      	mov	r0, r4
 800ba4a:	0092      	lsls	r2, r2, #2
 800ba4c:	f000 fb5e 	bl	800c10c <_calloc_r>
 800ba50:	b160      	cbz	r0, 800ba6c <_Balloc+0x64>
 800ba52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba56:	e00e      	b.n	800ba76 <_Balloc+0x6e>
 800ba58:	2221      	movs	r2, #33	; 0x21
 800ba5a:	2104      	movs	r1, #4
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f000 fb55 	bl	800c10c <_calloc_r>
 800ba62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba64:	60f0      	str	r0, [r6, #12]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d1e4      	bne.n	800ba36 <_Balloc+0x2e>
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	bd70      	pop	{r4, r5, r6, pc}
 800ba70:	6802      	ldr	r2, [r0, #0]
 800ba72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba76:	2300      	movs	r3, #0
 800ba78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba7c:	e7f7      	b.n	800ba6e <_Balloc+0x66>
 800ba7e:	bf00      	nop
 800ba80:	0800dd29 	.word	0x0800dd29
 800ba84:	0800de10 	.word	0x0800de10

0800ba88 <_Bfree>:
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba8c:	4605      	mov	r5, r0
 800ba8e:	460c      	mov	r4, r1
 800ba90:	b976      	cbnz	r6, 800bab0 <_Bfree+0x28>
 800ba92:	2010      	movs	r0, #16
 800ba94:	f7ff ffa2 	bl	800b9dc <malloc>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	6268      	str	r0, [r5, #36]	; 0x24
 800ba9c:	b920      	cbnz	r0, 800baa8 <_Bfree+0x20>
 800ba9e:	218a      	movs	r1, #138	; 0x8a
 800baa0:	4b08      	ldr	r3, [pc, #32]	; (800bac4 <_Bfree+0x3c>)
 800baa2:	4809      	ldr	r0, [pc, #36]	; (800bac8 <_Bfree+0x40>)
 800baa4:	f000 ff00 	bl	800c8a8 <__assert_func>
 800baa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800baac:	6006      	str	r6, [r0, #0]
 800baae:	60c6      	str	r6, [r0, #12]
 800bab0:	b13c      	cbz	r4, 800bac2 <_Bfree+0x3a>
 800bab2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bab4:	6862      	ldr	r2, [r4, #4]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800babc:	6021      	str	r1, [r4, #0]
 800babe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
 800bac4:	0800dd29 	.word	0x0800dd29
 800bac8:	0800de10 	.word	0x0800de10

0800bacc <__multadd>:
 800bacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad0:	4698      	mov	r8, r3
 800bad2:	460c      	mov	r4, r1
 800bad4:	2300      	movs	r3, #0
 800bad6:	690e      	ldr	r6, [r1, #16]
 800bad8:	4607      	mov	r7, r0
 800bada:	f101 0014 	add.w	r0, r1, #20
 800bade:	6805      	ldr	r5, [r0, #0]
 800bae0:	3301      	adds	r3, #1
 800bae2:	b2a9      	uxth	r1, r5
 800bae4:	fb02 8101 	mla	r1, r2, r1, r8
 800bae8:	0c2d      	lsrs	r5, r5, #16
 800baea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800baee:	fb02 c505 	mla	r5, r2, r5, ip
 800baf2:	b289      	uxth	r1, r1
 800baf4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800baf8:	429e      	cmp	r6, r3
 800bafa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bafe:	f840 1b04 	str.w	r1, [r0], #4
 800bb02:	dcec      	bgt.n	800bade <__multadd+0x12>
 800bb04:	f1b8 0f00 	cmp.w	r8, #0
 800bb08:	d022      	beq.n	800bb50 <__multadd+0x84>
 800bb0a:	68a3      	ldr	r3, [r4, #8]
 800bb0c:	42b3      	cmp	r3, r6
 800bb0e:	dc19      	bgt.n	800bb44 <__multadd+0x78>
 800bb10:	6861      	ldr	r1, [r4, #4]
 800bb12:	4638      	mov	r0, r7
 800bb14:	3101      	adds	r1, #1
 800bb16:	f7ff ff77 	bl	800ba08 <_Balloc>
 800bb1a:	4605      	mov	r5, r0
 800bb1c:	b928      	cbnz	r0, 800bb2a <__multadd+0x5e>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	21b5      	movs	r1, #181	; 0xb5
 800bb22:	4b0d      	ldr	r3, [pc, #52]	; (800bb58 <__multadd+0x8c>)
 800bb24:	480d      	ldr	r0, [pc, #52]	; (800bb5c <__multadd+0x90>)
 800bb26:	f000 febf 	bl	800c8a8 <__assert_func>
 800bb2a:	6922      	ldr	r2, [r4, #16]
 800bb2c:	f104 010c 	add.w	r1, r4, #12
 800bb30:	3202      	adds	r2, #2
 800bb32:	0092      	lsls	r2, r2, #2
 800bb34:	300c      	adds	r0, #12
 800bb36:	f7fe f86d 	bl	8009c14 <memcpy>
 800bb3a:	4621      	mov	r1, r4
 800bb3c:	4638      	mov	r0, r7
 800bb3e:	f7ff ffa3 	bl	800ba88 <_Bfree>
 800bb42:	462c      	mov	r4, r5
 800bb44:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bb48:	3601      	adds	r6, #1
 800bb4a:	f8c3 8014 	str.w	r8, [r3, #20]
 800bb4e:	6126      	str	r6, [r4, #16]
 800bb50:	4620      	mov	r0, r4
 800bb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb56:	bf00      	nop
 800bb58:	0800dd9f 	.word	0x0800dd9f
 800bb5c:	0800de10 	.word	0x0800de10

0800bb60 <__hi0bits>:
 800bb60:	0c02      	lsrs	r2, r0, #16
 800bb62:	0412      	lsls	r2, r2, #16
 800bb64:	4603      	mov	r3, r0
 800bb66:	b9ca      	cbnz	r2, 800bb9c <__hi0bits+0x3c>
 800bb68:	0403      	lsls	r3, r0, #16
 800bb6a:	2010      	movs	r0, #16
 800bb6c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bb70:	bf04      	itt	eq
 800bb72:	021b      	lsleq	r3, r3, #8
 800bb74:	3008      	addeq	r0, #8
 800bb76:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bb7a:	bf04      	itt	eq
 800bb7c:	011b      	lsleq	r3, r3, #4
 800bb7e:	3004      	addeq	r0, #4
 800bb80:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bb84:	bf04      	itt	eq
 800bb86:	009b      	lsleq	r3, r3, #2
 800bb88:	3002      	addeq	r0, #2
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	db05      	blt.n	800bb9a <__hi0bits+0x3a>
 800bb8e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bb92:	f100 0001 	add.w	r0, r0, #1
 800bb96:	bf08      	it	eq
 800bb98:	2020      	moveq	r0, #32
 800bb9a:	4770      	bx	lr
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	e7e5      	b.n	800bb6c <__hi0bits+0xc>

0800bba0 <__lo0bits>:
 800bba0:	6803      	ldr	r3, [r0, #0]
 800bba2:	4602      	mov	r2, r0
 800bba4:	f013 0007 	ands.w	r0, r3, #7
 800bba8:	d00b      	beq.n	800bbc2 <__lo0bits+0x22>
 800bbaa:	07d9      	lsls	r1, r3, #31
 800bbac:	d422      	bmi.n	800bbf4 <__lo0bits+0x54>
 800bbae:	0798      	lsls	r0, r3, #30
 800bbb0:	bf49      	itett	mi
 800bbb2:	085b      	lsrmi	r3, r3, #1
 800bbb4:	089b      	lsrpl	r3, r3, #2
 800bbb6:	2001      	movmi	r0, #1
 800bbb8:	6013      	strmi	r3, [r2, #0]
 800bbba:	bf5c      	itt	pl
 800bbbc:	2002      	movpl	r0, #2
 800bbbe:	6013      	strpl	r3, [r2, #0]
 800bbc0:	4770      	bx	lr
 800bbc2:	b299      	uxth	r1, r3
 800bbc4:	b909      	cbnz	r1, 800bbca <__lo0bits+0x2a>
 800bbc6:	2010      	movs	r0, #16
 800bbc8:	0c1b      	lsrs	r3, r3, #16
 800bbca:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bbce:	bf04      	itt	eq
 800bbd0:	0a1b      	lsreq	r3, r3, #8
 800bbd2:	3008      	addeq	r0, #8
 800bbd4:	0719      	lsls	r1, r3, #28
 800bbd6:	bf04      	itt	eq
 800bbd8:	091b      	lsreq	r3, r3, #4
 800bbda:	3004      	addeq	r0, #4
 800bbdc:	0799      	lsls	r1, r3, #30
 800bbde:	bf04      	itt	eq
 800bbe0:	089b      	lsreq	r3, r3, #2
 800bbe2:	3002      	addeq	r0, #2
 800bbe4:	07d9      	lsls	r1, r3, #31
 800bbe6:	d403      	bmi.n	800bbf0 <__lo0bits+0x50>
 800bbe8:	085b      	lsrs	r3, r3, #1
 800bbea:	f100 0001 	add.w	r0, r0, #1
 800bbee:	d003      	beq.n	800bbf8 <__lo0bits+0x58>
 800bbf0:	6013      	str	r3, [r2, #0]
 800bbf2:	4770      	bx	lr
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	4770      	bx	lr
 800bbf8:	2020      	movs	r0, #32
 800bbfa:	4770      	bx	lr

0800bbfc <__i2b>:
 800bbfc:	b510      	push	{r4, lr}
 800bbfe:	460c      	mov	r4, r1
 800bc00:	2101      	movs	r1, #1
 800bc02:	f7ff ff01 	bl	800ba08 <_Balloc>
 800bc06:	4602      	mov	r2, r0
 800bc08:	b928      	cbnz	r0, 800bc16 <__i2b+0x1a>
 800bc0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc0e:	4b04      	ldr	r3, [pc, #16]	; (800bc20 <__i2b+0x24>)
 800bc10:	4804      	ldr	r0, [pc, #16]	; (800bc24 <__i2b+0x28>)
 800bc12:	f000 fe49 	bl	800c8a8 <__assert_func>
 800bc16:	2301      	movs	r3, #1
 800bc18:	6144      	str	r4, [r0, #20]
 800bc1a:	6103      	str	r3, [r0, #16]
 800bc1c:	bd10      	pop	{r4, pc}
 800bc1e:	bf00      	nop
 800bc20:	0800dd9f 	.word	0x0800dd9f
 800bc24:	0800de10 	.word	0x0800de10

0800bc28 <__multiply>:
 800bc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2c:	4614      	mov	r4, r2
 800bc2e:	690a      	ldr	r2, [r1, #16]
 800bc30:	6923      	ldr	r3, [r4, #16]
 800bc32:	460d      	mov	r5, r1
 800bc34:	429a      	cmp	r2, r3
 800bc36:	bfbe      	ittt	lt
 800bc38:	460b      	movlt	r3, r1
 800bc3a:	4625      	movlt	r5, r4
 800bc3c:	461c      	movlt	r4, r3
 800bc3e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bc42:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bc46:	68ab      	ldr	r3, [r5, #8]
 800bc48:	6869      	ldr	r1, [r5, #4]
 800bc4a:	eb0a 0709 	add.w	r7, sl, r9
 800bc4e:	42bb      	cmp	r3, r7
 800bc50:	b085      	sub	sp, #20
 800bc52:	bfb8      	it	lt
 800bc54:	3101      	addlt	r1, #1
 800bc56:	f7ff fed7 	bl	800ba08 <_Balloc>
 800bc5a:	b930      	cbnz	r0, 800bc6a <__multiply+0x42>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	f240 115d 	movw	r1, #349	; 0x15d
 800bc62:	4b41      	ldr	r3, [pc, #260]	; (800bd68 <__multiply+0x140>)
 800bc64:	4841      	ldr	r0, [pc, #260]	; (800bd6c <__multiply+0x144>)
 800bc66:	f000 fe1f 	bl	800c8a8 <__assert_func>
 800bc6a:	f100 0614 	add.w	r6, r0, #20
 800bc6e:	4633      	mov	r3, r6
 800bc70:	2200      	movs	r2, #0
 800bc72:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bc76:	4543      	cmp	r3, r8
 800bc78:	d31e      	bcc.n	800bcb8 <__multiply+0x90>
 800bc7a:	f105 0c14 	add.w	ip, r5, #20
 800bc7e:	f104 0314 	add.w	r3, r4, #20
 800bc82:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bc86:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bc8a:	9202      	str	r2, [sp, #8]
 800bc8c:	ebac 0205 	sub.w	r2, ip, r5
 800bc90:	3a15      	subs	r2, #21
 800bc92:	f022 0203 	bic.w	r2, r2, #3
 800bc96:	3204      	adds	r2, #4
 800bc98:	f105 0115 	add.w	r1, r5, #21
 800bc9c:	458c      	cmp	ip, r1
 800bc9e:	bf38      	it	cc
 800bca0:	2204      	movcc	r2, #4
 800bca2:	9201      	str	r2, [sp, #4]
 800bca4:	9a02      	ldr	r2, [sp, #8]
 800bca6:	9303      	str	r3, [sp, #12]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d808      	bhi.n	800bcbe <__multiply+0x96>
 800bcac:	2f00      	cmp	r7, #0
 800bcae:	dc55      	bgt.n	800bd5c <__multiply+0x134>
 800bcb0:	6107      	str	r7, [r0, #16]
 800bcb2:	b005      	add	sp, #20
 800bcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb8:	f843 2b04 	str.w	r2, [r3], #4
 800bcbc:	e7db      	b.n	800bc76 <__multiply+0x4e>
 800bcbe:	f8b3 a000 	ldrh.w	sl, [r3]
 800bcc2:	f1ba 0f00 	cmp.w	sl, #0
 800bcc6:	d020      	beq.n	800bd0a <__multiply+0xe2>
 800bcc8:	46b1      	mov	r9, r6
 800bcca:	2200      	movs	r2, #0
 800bccc:	f105 0e14 	add.w	lr, r5, #20
 800bcd0:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bcd4:	f8d9 b000 	ldr.w	fp, [r9]
 800bcd8:	b2a1      	uxth	r1, r4
 800bcda:	fa1f fb8b 	uxth.w	fp, fp
 800bcde:	fb0a b101 	mla	r1, sl, r1, fp
 800bce2:	4411      	add	r1, r2
 800bce4:	f8d9 2000 	ldr.w	r2, [r9]
 800bce8:	0c24      	lsrs	r4, r4, #16
 800bcea:	0c12      	lsrs	r2, r2, #16
 800bcec:	fb0a 2404 	mla	r4, sl, r4, r2
 800bcf0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bcf4:	b289      	uxth	r1, r1
 800bcf6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bcfa:	45f4      	cmp	ip, lr
 800bcfc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bd00:	f849 1b04 	str.w	r1, [r9], #4
 800bd04:	d8e4      	bhi.n	800bcd0 <__multiply+0xa8>
 800bd06:	9901      	ldr	r1, [sp, #4]
 800bd08:	5072      	str	r2, [r6, r1]
 800bd0a:	9a03      	ldr	r2, [sp, #12]
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd12:	f1b9 0f00 	cmp.w	r9, #0
 800bd16:	d01f      	beq.n	800bd58 <__multiply+0x130>
 800bd18:	46b6      	mov	lr, r6
 800bd1a:	f04f 0a00 	mov.w	sl, #0
 800bd1e:	6834      	ldr	r4, [r6, #0]
 800bd20:	f105 0114 	add.w	r1, r5, #20
 800bd24:	880a      	ldrh	r2, [r1, #0]
 800bd26:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bd2a:	b2a4      	uxth	r4, r4
 800bd2c:	fb09 b202 	mla	r2, r9, r2, fp
 800bd30:	4492      	add	sl, r2
 800bd32:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bd36:	f84e 4b04 	str.w	r4, [lr], #4
 800bd3a:	f851 4b04 	ldr.w	r4, [r1], #4
 800bd3e:	f8be 2000 	ldrh.w	r2, [lr]
 800bd42:	0c24      	lsrs	r4, r4, #16
 800bd44:	fb09 2404 	mla	r4, r9, r4, r2
 800bd48:	458c      	cmp	ip, r1
 800bd4a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bd4e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bd52:	d8e7      	bhi.n	800bd24 <__multiply+0xfc>
 800bd54:	9a01      	ldr	r2, [sp, #4]
 800bd56:	50b4      	str	r4, [r6, r2]
 800bd58:	3604      	adds	r6, #4
 800bd5a:	e7a3      	b.n	800bca4 <__multiply+0x7c>
 800bd5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1a5      	bne.n	800bcb0 <__multiply+0x88>
 800bd64:	3f01      	subs	r7, #1
 800bd66:	e7a1      	b.n	800bcac <__multiply+0x84>
 800bd68:	0800dd9f 	.word	0x0800dd9f
 800bd6c:	0800de10 	.word	0x0800de10

0800bd70 <__pow5mult>:
 800bd70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd74:	4615      	mov	r5, r2
 800bd76:	f012 0203 	ands.w	r2, r2, #3
 800bd7a:	4606      	mov	r6, r0
 800bd7c:	460f      	mov	r7, r1
 800bd7e:	d007      	beq.n	800bd90 <__pow5mult+0x20>
 800bd80:	4c25      	ldr	r4, [pc, #148]	; (800be18 <__pow5mult+0xa8>)
 800bd82:	3a01      	subs	r2, #1
 800bd84:	2300      	movs	r3, #0
 800bd86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd8a:	f7ff fe9f 	bl	800bacc <__multadd>
 800bd8e:	4607      	mov	r7, r0
 800bd90:	10ad      	asrs	r5, r5, #2
 800bd92:	d03d      	beq.n	800be10 <__pow5mult+0xa0>
 800bd94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd96:	b97c      	cbnz	r4, 800bdb8 <__pow5mult+0x48>
 800bd98:	2010      	movs	r0, #16
 800bd9a:	f7ff fe1f 	bl	800b9dc <malloc>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	6270      	str	r0, [r6, #36]	; 0x24
 800bda2:	b928      	cbnz	r0, 800bdb0 <__pow5mult+0x40>
 800bda4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bda8:	4b1c      	ldr	r3, [pc, #112]	; (800be1c <__pow5mult+0xac>)
 800bdaa:	481d      	ldr	r0, [pc, #116]	; (800be20 <__pow5mult+0xb0>)
 800bdac:	f000 fd7c 	bl	800c8a8 <__assert_func>
 800bdb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdb4:	6004      	str	r4, [r0, #0]
 800bdb6:	60c4      	str	r4, [r0, #12]
 800bdb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bdbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdc0:	b94c      	cbnz	r4, 800bdd6 <__pow5mult+0x66>
 800bdc2:	f240 2171 	movw	r1, #625	; 0x271
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	f7ff ff18 	bl	800bbfc <__i2b>
 800bdcc:	2300      	movs	r3, #0
 800bdce:	4604      	mov	r4, r0
 800bdd0:	f8c8 0008 	str.w	r0, [r8, #8]
 800bdd4:	6003      	str	r3, [r0, #0]
 800bdd6:	f04f 0900 	mov.w	r9, #0
 800bdda:	07eb      	lsls	r3, r5, #31
 800bddc:	d50a      	bpl.n	800bdf4 <__pow5mult+0x84>
 800bdde:	4639      	mov	r1, r7
 800bde0:	4622      	mov	r2, r4
 800bde2:	4630      	mov	r0, r6
 800bde4:	f7ff ff20 	bl	800bc28 <__multiply>
 800bde8:	4680      	mov	r8, r0
 800bdea:	4639      	mov	r1, r7
 800bdec:	4630      	mov	r0, r6
 800bdee:	f7ff fe4b 	bl	800ba88 <_Bfree>
 800bdf2:	4647      	mov	r7, r8
 800bdf4:	106d      	asrs	r5, r5, #1
 800bdf6:	d00b      	beq.n	800be10 <__pow5mult+0xa0>
 800bdf8:	6820      	ldr	r0, [r4, #0]
 800bdfa:	b938      	cbnz	r0, 800be0c <__pow5mult+0x9c>
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	4621      	mov	r1, r4
 800be00:	4630      	mov	r0, r6
 800be02:	f7ff ff11 	bl	800bc28 <__multiply>
 800be06:	6020      	str	r0, [r4, #0]
 800be08:	f8c0 9000 	str.w	r9, [r0]
 800be0c:	4604      	mov	r4, r0
 800be0e:	e7e4      	b.n	800bdda <__pow5mult+0x6a>
 800be10:	4638      	mov	r0, r7
 800be12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be16:	bf00      	nop
 800be18:	0800df60 	.word	0x0800df60
 800be1c:	0800dd29 	.word	0x0800dd29
 800be20:	0800de10 	.word	0x0800de10

0800be24 <__lshift>:
 800be24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be28:	460c      	mov	r4, r1
 800be2a:	4607      	mov	r7, r0
 800be2c:	4691      	mov	r9, r2
 800be2e:	6923      	ldr	r3, [r4, #16]
 800be30:	6849      	ldr	r1, [r1, #4]
 800be32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be36:	68a3      	ldr	r3, [r4, #8]
 800be38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be3c:	f108 0601 	add.w	r6, r8, #1
 800be40:	42b3      	cmp	r3, r6
 800be42:	db0b      	blt.n	800be5c <__lshift+0x38>
 800be44:	4638      	mov	r0, r7
 800be46:	f7ff fddf 	bl	800ba08 <_Balloc>
 800be4a:	4605      	mov	r5, r0
 800be4c:	b948      	cbnz	r0, 800be62 <__lshift+0x3e>
 800be4e:	4602      	mov	r2, r0
 800be50:	f240 11d9 	movw	r1, #473	; 0x1d9
 800be54:	4b27      	ldr	r3, [pc, #156]	; (800bef4 <__lshift+0xd0>)
 800be56:	4828      	ldr	r0, [pc, #160]	; (800bef8 <__lshift+0xd4>)
 800be58:	f000 fd26 	bl	800c8a8 <__assert_func>
 800be5c:	3101      	adds	r1, #1
 800be5e:	005b      	lsls	r3, r3, #1
 800be60:	e7ee      	b.n	800be40 <__lshift+0x1c>
 800be62:	2300      	movs	r3, #0
 800be64:	f100 0114 	add.w	r1, r0, #20
 800be68:	f100 0210 	add.w	r2, r0, #16
 800be6c:	4618      	mov	r0, r3
 800be6e:	4553      	cmp	r3, sl
 800be70:	db33      	blt.n	800beda <__lshift+0xb6>
 800be72:	6920      	ldr	r0, [r4, #16]
 800be74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be78:	f104 0314 	add.w	r3, r4, #20
 800be7c:	f019 091f 	ands.w	r9, r9, #31
 800be80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be88:	d02b      	beq.n	800bee2 <__lshift+0xbe>
 800be8a:	468a      	mov	sl, r1
 800be8c:	2200      	movs	r2, #0
 800be8e:	f1c9 0e20 	rsb	lr, r9, #32
 800be92:	6818      	ldr	r0, [r3, #0]
 800be94:	fa00 f009 	lsl.w	r0, r0, r9
 800be98:	4302      	orrs	r2, r0
 800be9a:	f84a 2b04 	str.w	r2, [sl], #4
 800be9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bea2:	459c      	cmp	ip, r3
 800bea4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bea8:	d8f3      	bhi.n	800be92 <__lshift+0x6e>
 800beaa:	ebac 0304 	sub.w	r3, ip, r4
 800beae:	3b15      	subs	r3, #21
 800beb0:	f023 0303 	bic.w	r3, r3, #3
 800beb4:	3304      	adds	r3, #4
 800beb6:	f104 0015 	add.w	r0, r4, #21
 800beba:	4584      	cmp	ip, r0
 800bebc:	bf38      	it	cc
 800bebe:	2304      	movcc	r3, #4
 800bec0:	50ca      	str	r2, [r1, r3]
 800bec2:	b10a      	cbz	r2, 800bec8 <__lshift+0xa4>
 800bec4:	f108 0602 	add.w	r6, r8, #2
 800bec8:	3e01      	subs	r6, #1
 800beca:	4638      	mov	r0, r7
 800becc:	4621      	mov	r1, r4
 800bece:	612e      	str	r6, [r5, #16]
 800bed0:	f7ff fdda 	bl	800ba88 <_Bfree>
 800bed4:	4628      	mov	r0, r5
 800bed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beda:	f842 0f04 	str.w	r0, [r2, #4]!
 800bede:	3301      	adds	r3, #1
 800bee0:	e7c5      	b.n	800be6e <__lshift+0x4a>
 800bee2:	3904      	subs	r1, #4
 800bee4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bee8:	459c      	cmp	ip, r3
 800beea:	f841 2f04 	str.w	r2, [r1, #4]!
 800beee:	d8f9      	bhi.n	800bee4 <__lshift+0xc0>
 800bef0:	e7ea      	b.n	800bec8 <__lshift+0xa4>
 800bef2:	bf00      	nop
 800bef4:	0800dd9f 	.word	0x0800dd9f
 800bef8:	0800de10 	.word	0x0800de10

0800befc <__mcmp>:
 800befc:	4603      	mov	r3, r0
 800befe:	690a      	ldr	r2, [r1, #16]
 800bf00:	6900      	ldr	r0, [r0, #16]
 800bf02:	b530      	push	{r4, r5, lr}
 800bf04:	1a80      	subs	r0, r0, r2
 800bf06:	d10d      	bne.n	800bf24 <__mcmp+0x28>
 800bf08:	3314      	adds	r3, #20
 800bf0a:	3114      	adds	r1, #20
 800bf0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bf10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bf14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bf18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bf1c:	4295      	cmp	r5, r2
 800bf1e:	d002      	beq.n	800bf26 <__mcmp+0x2a>
 800bf20:	d304      	bcc.n	800bf2c <__mcmp+0x30>
 800bf22:	2001      	movs	r0, #1
 800bf24:	bd30      	pop	{r4, r5, pc}
 800bf26:	42a3      	cmp	r3, r4
 800bf28:	d3f4      	bcc.n	800bf14 <__mcmp+0x18>
 800bf2a:	e7fb      	b.n	800bf24 <__mcmp+0x28>
 800bf2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf30:	e7f8      	b.n	800bf24 <__mcmp+0x28>
	...

0800bf34 <__mdiff>:
 800bf34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf38:	460c      	mov	r4, r1
 800bf3a:	4606      	mov	r6, r0
 800bf3c:	4611      	mov	r1, r2
 800bf3e:	4620      	mov	r0, r4
 800bf40:	4692      	mov	sl, r2
 800bf42:	f7ff ffdb 	bl	800befc <__mcmp>
 800bf46:	1e05      	subs	r5, r0, #0
 800bf48:	d111      	bne.n	800bf6e <__mdiff+0x3a>
 800bf4a:	4629      	mov	r1, r5
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	f7ff fd5b 	bl	800ba08 <_Balloc>
 800bf52:	4602      	mov	r2, r0
 800bf54:	b928      	cbnz	r0, 800bf62 <__mdiff+0x2e>
 800bf56:	f240 2132 	movw	r1, #562	; 0x232
 800bf5a:	4b3c      	ldr	r3, [pc, #240]	; (800c04c <__mdiff+0x118>)
 800bf5c:	483c      	ldr	r0, [pc, #240]	; (800c050 <__mdiff+0x11c>)
 800bf5e:	f000 fca3 	bl	800c8a8 <__assert_func>
 800bf62:	2301      	movs	r3, #1
 800bf64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf68:	4610      	mov	r0, r2
 800bf6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf6e:	bfa4      	itt	ge
 800bf70:	4653      	movge	r3, sl
 800bf72:	46a2      	movge	sl, r4
 800bf74:	4630      	mov	r0, r6
 800bf76:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bf7a:	bfa6      	itte	ge
 800bf7c:	461c      	movge	r4, r3
 800bf7e:	2500      	movge	r5, #0
 800bf80:	2501      	movlt	r5, #1
 800bf82:	f7ff fd41 	bl	800ba08 <_Balloc>
 800bf86:	4602      	mov	r2, r0
 800bf88:	b918      	cbnz	r0, 800bf92 <__mdiff+0x5e>
 800bf8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf8e:	4b2f      	ldr	r3, [pc, #188]	; (800c04c <__mdiff+0x118>)
 800bf90:	e7e4      	b.n	800bf5c <__mdiff+0x28>
 800bf92:	f100 0814 	add.w	r8, r0, #20
 800bf96:	f8da 7010 	ldr.w	r7, [sl, #16]
 800bf9a:	60c5      	str	r5, [r0, #12]
 800bf9c:	f04f 0c00 	mov.w	ip, #0
 800bfa0:	f10a 0514 	add.w	r5, sl, #20
 800bfa4:	f10a 0010 	add.w	r0, sl, #16
 800bfa8:	46c2      	mov	sl, r8
 800bfaa:	6926      	ldr	r6, [r4, #16]
 800bfac:	f104 0914 	add.w	r9, r4, #20
 800bfb0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bfb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bfb8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bfbc:	f859 3b04 	ldr.w	r3, [r9], #4
 800bfc0:	fa1f f18b 	uxth.w	r1, fp
 800bfc4:	4461      	add	r1, ip
 800bfc6:	fa1f fc83 	uxth.w	ip, r3
 800bfca:	0c1b      	lsrs	r3, r3, #16
 800bfcc:	eba1 010c 	sub.w	r1, r1, ip
 800bfd0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bfd4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bfd8:	b289      	uxth	r1, r1
 800bfda:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bfde:	454e      	cmp	r6, r9
 800bfe0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bfe4:	f84a 3b04 	str.w	r3, [sl], #4
 800bfe8:	d8e6      	bhi.n	800bfb8 <__mdiff+0x84>
 800bfea:	1b33      	subs	r3, r6, r4
 800bfec:	3b15      	subs	r3, #21
 800bfee:	f023 0303 	bic.w	r3, r3, #3
 800bff2:	3415      	adds	r4, #21
 800bff4:	3304      	adds	r3, #4
 800bff6:	42a6      	cmp	r6, r4
 800bff8:	bf38      	it	cc
 800bffa:	2304      	movcc	r3, #4
 800bffc:	441d      	add	r5, r3
 800bffe:	4443      	add	r3, r8
 800c000:	461e      	mov	r6, r3
 800c002:	462c      	mov	r4, r5
 800c004:	4574      	cmp	r4, lr
 800c006:	d30e      	bcc.n	800c026 <__mdiff+0xf2>
 800c008:	f10e 0103 	add.w	r1, lr, #3
 800c00c:	1b49      	subs	r1, r1, r5
 800c00e:	f021 0103 	bic.w	r1, r1, #3
 800c012:	3d03      	subs	r5, #3
 800c014:	45ae      	cmp	lr, r5
 800c016:	bf38      	it	cc
 800c018:	2100      	movcc	r1, #0
 800c01a:	4419      	add	r1, r3
 800c01c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c020:	b18b      	cbz	r3, 800c046 <__mdiff+0x112>
 800c022:	6117      	str	r7, [r2, #16]
 800c024:	e7a0      	b.n	800bf68 <__mdiff+0x34>
 800c026:	f854 8b04 	ldr.w	r8, [r4], #4
 800c02a:	fa1f f188 	uxth.w	r1, r8
 800c02e:	4461      	add	r1, ip
 800c030:	1408      	asrs	r0, r1, #16
 800c032:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800c036:	b289      	uxth	r1, r1
 800c038:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c03c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c040:	f846 1b04 	str.w	r1, [r6], #4
 800c044:	e7de      	b.n	800c004 <__mdiff+0xd0>
 800c046:	3f01      	subs	r7, #1
 800c048:	e7e8      	b.n	800c01c <__mdiff+0xe8>
 800c04a:	bf00      	nop
 800c04c:	0800dd9f 	.word	0x0800dd9f
 800c050:	0800de10 	.word	0x0800de10

0800c054 <__d2b>:
 800c054:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c058:	2101      	movs	r1, #1
 800c05a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c05e:	4690      	mov	r8, r2
 800c060:	461d      	mov	r5, r3
 800c062:	f7ff fcd1 	bl	800ba08 <_Balloc>
 800c066:	4604      	mov	r4, r0
 800c068:	b930      	cbnz	r0, 800c078 <__d2b+0x24>
 800c06a:	4602      	mov	r2, r0
 800c06c:	f240 310a 	movw	r1, #778	; 0x30a
 800c070:	4b24      	ldr	r3, [pc, #144]	; (800c104 <__d2b+0xb0>)
 800c072:	4825      	ldr	r0, [pc, #148]	; (800c108 <__d2b+0xb4>)
 800c074:	f000 fc18 	bl	800c8a8 <__assert_func>
 800c078:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c07c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c080:	bb2d      	cbnz	r5, 800c0ce <__d2b+0x7a>
 800c082:	9301      	str	r3, [sp, #4]
 800c084:	f1b8 0300 	subs.w	r3, r8, #0
 800c088:	d026      	beq.n	800c0d8 <__d2b+0x84>
 800c08a:	4668      	mov	r0, sp
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	f7ff fd87 	bl	800bba0 <__lo0bits>
 800c092:	9900      	ldr	r1, [sp, #0]
 800c094:	b1f0      	cbz	r0, 800c0d4 <__d2b+0x80>
 800c096:	9a01      	ldr	r2, [sp, #4]
 800c098:	f1c0 0320 	rsb	r3, r0, #32
 800c09c:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a0:	430b      	orrs	r3, r1
 800c0a2:	40c2      	lsrs	r2, r0
 800c0a4:	6163      	str	r3, [r4, #20]
 800c0a6:	9201      	str	r2, [sp, #4]
 800c0a8:	9b01      	ldr	r3, [sp, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	bf14      	ite	ne
 800c0ae:	2102      	movne	r1, #2
 800c0b0:	2101      	moveq	r1, #1
 800c0b2:	61a3      	str	r3, [r4, #24]
 800c0b4:	6121      	str	r1, [r4, #16]
 800c0b6:	b1c5      	cbz	r5, 800c0ea <__d2b+0x96>
 800c0b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0bc:	4405      	add	r5, r0
 800c0be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0c2:	603d      	str	r5, [r7, #0]
 800c0c4:	6030      	str	r0, [r6, #0]
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	b002      	add	sp, #8
 800c0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0d2:	e7d6      	b.n	800c082 <__d2b+0x2e>
 800c0d4:	6161      	str	r1, [r4, #20]
 800c0d6:	e7e7      	b.n	800c0a8 <__d2b+0x54>
 800c0d8:	a801      	add	r0, sp, #4
 800c0da:	f7ff fd61 	bl	800bba0 <__lo0bits>
 800c0de:	2101      	movs	r1, #1
 800c0e0:	9b01      	ldr	r3, [sp, #4]
 800c0e2:	6121      	str	r1, [r4, #16]
 800c0e4:	6163      	str	r3, [r4, #20]
 800c0e6:	3020      	adds	r0, #32
 800c0e8:	e7e5      	b.n	800c0b6 <__d2b+0x62>
 800c0ea:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c0ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c0f2:	6038      	str	r0, [r7, #0]
 800c0f4:	6918      	ldr	r0, [r3, #16]
 800c0f6:	f7ff fd33 	bl	800bb60 <__hi0bits>
 800c0fa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c0fe:	6031      	str	r1, [r6, #0]
 800c100:	e7e1      	b.n	800c0c6 <__d2b+0x72>
 800c102:	bf00      	nop
 800c104:	0800dd9f 	.word	0x0800dd9f
 800c108:	0800de10 	.word	0x0800de10

0800c10c <_calloc_r>:
 800c10c:	b538      	push	{r3, r4, r5, lr}
 800c10e:	fb02 f501 	mul.w	r5, r2, r1
 800c112:	4629      	mov	r1, r5
 800c114:	f000 f854 	bl	800c1c0 <_malloc_r>
 800c118:	4604      	mov	r4, r0
 800c11a:	b118      	cbz	r0, 800c124 <_calloc_r+0x18>
 800c11c:	462a      	mov	r2, r5
 800c11e:	2100      	movs	r1, #0
 800c120:	f7fd fda0 	bl	8009c64 <memset>
 800c124:	4620      	mov	r0, r4
 800c126:	bd38      	pop	{r3, r4, r5, pc}

0800c128 <_free_r>:
 800c128:	b538      	push	{r3, r4, r5, lr}
 800c12a:	4605      	mov	r5, r0
 800c12c:	2900      	cmp	r1, #0
 800c12e:	d043      	beq.n	800c1b8 <_free_r+0x90>
 800c130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c134:	1f0c      	subs	r4, r1, #4
 800c136:	2b00      	cmp	r3, #0
 800c138:	bfb8      	it	lt
 800c13a:	18e4      	addlt	r4, r4, r3
 800c13c:	f000 fc3a 	bl	800c9b4 <__malloc_lock>
 800c140:	4a1e      	ldr	r2, [pc, #120]	; (800c1bc <_free_r+0x94>)
 800c142:	6813      	ldr	r3, [r2, #0]
 800c144:	4610      	mov	r0, r2
 800c146:	b933      	cbnz	r3, 800c156 <_free_r+0x2e>
 800c148:	6063      	str	r3, [r4, #4]
 800c14a:	6014      	str	r4, [r2, #0]
 800c14c:	4628      	mov	r0, r5
 800c14e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c152:	f000 bc35 	b.w	800c9c0 <__malloc_unlock>
 800c156:	42a3      	cmp	r3, r4
 800c158:	d90a      	bls.n	800c170 <_free_r+0x48>
 800c15a:	6821      	ldr	r1, [r4, #0]
 800c15c:	1862      	adds	r2, r4, r1
 800c15e:	4293      	cmp	r3, r2
 800c160:	bf01      	itttt	eq
 800c162:	681a      	ldreq	r2, [r3, #0]
 800c164:	685b      	ldreq	r3, [r3, #4]
 800c166:	1852      	addeq	r2, r2, r1
 800c168:	6022      	streq	r2, [r4, #0]
 800c16a:	6063      	str	r3, [r4, #4]
 800c16c:	6004      	str	r4, [r0, #0]
 800c16e:	e7ed      	b.n	800c14c <_free_r+0x24>
 800c170:	461a      	mov	r2, r3
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	b10b      	cbz	r3, 800c17a <_free_r+0x52>
 800c176:	42a3      	cmp	r3, r4
 800c178:	d9fa      	bls.n	800c170 <_free_r+0x48>
 800c17a:	6811      	ldr	r1, [r2, #0]
 800c17c:	1850      	adds	r0, r2, r1
 800c17e:	42a0      	cmp	r0, r4
 800c180:	d10b      	bne.n	800c19a <_free_r+0x72>
 800c182:	6820      	ldr	r0, [r4, #0]
 800c184:	4401      	add	r1, r0
 800c186:	1850      	adds	r0, r2, r1
 800c188:	4283      	cmp	r3, r0
 800c18a:	6011      	str	r1, [r2, #0]
 800c18c:	d1de      	bne.n	800c14c <_free_r+0x24>
 800c18e:	6818      	ldr	r0, [r3, #0]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	4401      	add	r1, r0
 800c194:	6011      	str	r1, [r2, #0]
 800c196:	6053      	str	r3, [r2, #4]
 800c198:	e7d8      	b.n	800c14c <_free_r+0x24>
 800c19a:	d902      	bls.n	800c1a2 <_free_r+0x7a>
 800c19c:	230c      	movs	r3, #12
 800c19e:	602b      	str	r3, [r5, #0]
 800c1a0:	e7d4      	b.n	800c14c <_free_r+0x24>
 800c1a2:	6820      	ldr	r0, [r4, #0]
 800c1a4:	1821      	adds	r1, r4, r0
 800c1a6:	428b      	cmp	r3, r1
 800c1a8:	bf01      	itttt	eq
 800c1aa:	6819      	ldreq	r1, [r3, #0]
 800c1ac:	685b      	ldreq	r3, [r3, #4]
 800c1ae:	1809      	addeq	r1, r1, r0
 800c1b0:	6021      	streq	r1, [r4, #0]
 800c1b2:	6063      	str	r3, [r4, #4]
 800c1b4:	6054      	str	r4, [r2, #4]
 800c1b6:	e7c9      	b.n	800c14c <_free_r+0x24>
 800c1b8:	bd38      	pop	{r3, r4, r5, pc}
 800c1ba:	bf00      	nop
 800c1bc:	200002a8 	.word	0x200002a8

0800c1c0 <_malloc_r>:
 800c1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c2:	1ccd      	adds	r5, r1, #3
 800c1c4:	f025 0503 	bic.w	r5, r5, #3
 800c1c8:	3508      	adds	r5, #8
 800c1ca:	2d0c      	cmp	r5, #12
 800c1cc:	bf38      	it	cc
 800c1ce:	250c      	movcc	r5, #12
 800c1d0:	2d00      	cmp	r5, #0
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	db01      	blt.n	800c1da <_malloc_r+0x1a>
 800c1d6:	42a9      	cmp	r1, r5
 800c1d8:	d903      	bls.n	800c1e2 <_malloc_r+0x22>
 800c1da:	230c      	movs	r3, #12
 800c1dc:	6033      	str	r3, [r6, #0]
 800c1de:	2000      	movs	r0, #0
 800c1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1e2:	f000 fbe7 	bl	800c9b4 <__malloc_lock>
 800c1e6:	4921      	ldr	r1, [pc, #132]	; (800c26c <_malloc_r+0xac>)
 800c1e8:	680a      	ldr	r2, [r1, #0]
 800c1ea:	4614      	mov	r4, r2
 800c1ec:	b99c      	cbnz	r4, 800c216 <_malloc_r+0x56>
 800c1ee:	4f20      	ldr	r7, [pc, #128]	; (800c270 <_malloc_r+0xb0>)
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	b923      	cbnz	r3, 800c1fe <_malloc_r+0x3e>
 800c1f4:	4621      	mov	r1, r4
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f000 faf0 	bl	800c7dc <_sbrk_r>
 800c1fc:	6038      	str	r0, [r7, #0]
 800c1fe:	4629      	mov	r1, r5
 800c200:	4630      	mov	r0, r6
 800c202:	f000 faeb 	bl	800c7dc <_sbrk_r>
 800c206:	1c43      	adds	r3, r0, #1
 800c208:	d123      	bne.n	800c252 <_malloc_r+0x92>
 800c20a:	230c      	movs	r3, #12
 800c20c:	4630      	mov	r0, r6
 800c20e:	6033      	str	r3, [r6, #0]
 800c210:	f000 fbd6 	bl	800c9c0 <__malloc_unlock>
 800c214:	e7e3      	b.n	800c1de <_malloc_r+0x1e>
 800c216:	6823      	ldr	r3, [r4, #0]
 800c218:	1b5b      	subs	r3, r3, r5
 800c21a:	d417      	bmi.n	800c24c <_malloc_r+0x8c>
 800c21c:	2b0b      	cmp	r3, #11
 800c21e:	d903      	bls.n	800c228 <_malloc_r+0x68>
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	441c      	add	r4, r3
 800c224:	6025      	str	r5, [r4, #0]
 800c226:	e004      	b.n	800c232 <_malloc_r+0x72>
 800c228:	6863      	ldr	r3, [r4, #4]
 800c22a:	42a2      	cmp	r2, r4
 800c22c:	bf0c      	ite	eq
 800c22e:	600b      	streq	r3, [r1, #0]
 800c230:	6053      	strne	r3, [r2, #4]
 800c232:	4630      	mov	r0, r6
 800c234:	f000 fbc4 	bl	800c9c0 <__malloc_unlock>
 800c238:	f104 000b 	add.w	r0, r4, #11
 800c23c:	1d23      	adds	r3, r4, #4
 800c23e:	f020 0007 	bic.w	r0, r0, #7
 800c242:	1ac2      	subs	r2, r0, r3
 800c244:	d0cc      	beq.n	800c1e0 <_malloc_r+0x20>
 800c246:	1a1b      	subs	r3, r3, r0
 800c248:	50a3      	str	r3, [r4, r2]
 800c24a:	e7c9      	b.n	800c1e0 <_malloc_r+0x20>
 800c24c:	4622      	mov	r2, r4
 800c24e:	6864      	ldr	r4, [r4, #4]
 800c250:	e7cc      	b.n	800c1ec <_malloc_r+0x2c>
 800c252:	1cc4      	adds	r4, r0, #3
 800c254:	f024 0403 	bic.w	r4, r4, #3
 800c258:	42a0      	cmp	r0, r4
 800c25a:	d0e3      	beq.n	800c224 <_malloc_r+0x64>
 800c25c:	1a21      	subs	r1, r4, r0
 800c25e:	4630      	mov	r0, r6
 800c260:	f000 fabc 	bl	800c7dc <_sbrk_r>
 800c264:	3001      	adds	r0, #1
 800c266:	d1dd      	bne.n	800c224 <_malloc_r+0x64>
 800c268:	e7cf      	b.n	800c20a <_malloc_r+0x4a>
 800c26a:	bf00      	nop
 800c26c:	200002a8 	.word	0x200002a8
 800c270:	200002ac 	.word	0x200002ac

0800c274 <__ssputs_r>:
 800c274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c278:	688e      	ldr	r6, [r1, #8]
 800c27a:	4682      	mov	sl, r0
 800c27c:	429e      	cmp	r6, r3
 800c27e:	460c      	mov	r4, r1
 800c280:	4690      	mov	r8, r2
 800c282:	461f      	mov	r7, r3
 800c284:	d838      	bhi.n	800c2f8 <__ssputs_r+0x84>
 800c286:	898a      	ldrh	r2, [r1, #12]
 800c288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c28c:	d032      	beq.n	800c2f4 <__ssputs_r+0x80>
 800c28e:	6825      	ldr	r5, [r4, #0]
 800c290:	6909      	ldr	r1, [r1, #16]
 800c292:	3301      	adds	r3, #1
 800c294:	eba5 0901 	sub.w	r9, r5, r1
 800c298:	6965      	ldr	r5, [r4, #20]
 800c29a:	444b      	add	r3, r9
 800c29c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2a4:	106d      	asrs	r5, r5, #1
 800c2a6:	429d      	cmp	r5, r3
 800c2a8:	bf38      	it	cc
 800c2aa:	461d      	movcc	r5, r3
 800c2ac:	0553      	lsls	r3, r2, #21
 800c2ae:	d531      	bpl.n	800c314 <__ssputs_r+0xa0>
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	f7ff ff85 	bl	800c1c0 <_malloc_r>
 800c2b6:	4606      	mov	r6, r0
 800c2b8:	b950      	cbnz	r0, 800c2d0 <__ssputs_r+0x5c>
 800c2ba:	230c      	movs	r3, #12
 800c2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c0:	f8ca 3000 	str.w	r3, [sl]
 800c2c4:	89a3      	ldrh	r3, [r4, #12]
 800c2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ca:	81a3      	strh	r3, [r4, #12]
 800c2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d0:	464a      	mov	r2, r9
 800c2d2:	6921      	ldr	r1, [r4, #16]
 800c2d4:	f7fd fc9e 	bl	8009c14 <memcpy>
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2e2:	81a3      	strh	r3, [r4, #12]
 800c2e4:	6126      	str	r6, [r4, #16]
 800c2e6:	444e      	add	r6, r9
 800c2e8:	6026      	str	r6, [r4, #0]
 800c2ea:	463e      	mov	r6, r7
 800c2ec:	6165      	str	r5, [r4, #20]
 800c2ee:	eba5 0509 	sub.w	r5, r5, r9
 800c2f2:	60a5      	str	r5, [r4, #8]
 800c2f4:	42be      	cmp	r6, r7
 800c2f6:	d900      	bls.n	800c2fa <__ssputs_r+0x86>
 800c2f8:	463e      	mov	r6, r7
 800c2fa:	4632      	mov	r2, r6
 800c2fc:	4641      	mov	r1, r8
 800c2fe:	6820      	ldr	r0, [r4, #0]
 800c300:	f7fd fc96 	bl	8009c30 <memmove>
 800c304:	68a3      	ldr	r3, [r4, #8]
 800c306:	6822      	ldr	r2, [r4, #0]
 800c308:	1b9b      	subs	r3, r3, r6
 800c30a:	4432      	add	r2, r6
 800c30c:	2000      	movs	r0, #0
 800c30e:	60a3      	str	r3, [r4, #8]
 800c310:	6022      	str	r2, [r4, #0]
 800c312:	e7db      	b.n	800c2cc <__ssputs_r+0x58>
 800c314:	462a      	mov	r2, r5
 800c316:	f000 fb59 	bl	800c9cc <_realloc_r>
 800c31a:	4606      	mov	r6, r0
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d1e1      	bne.n	800c2e4 <__ssputs_r+0x70>
 800c320:	4650      	mov	r0, sl
 800c322:	6921      	ldr	r1, [r4, #16]
 800c324:	f7ff ff00 	bl	800c128 <_free_r>
 800c328:	e7c7      	b.n	800c2ba <__ssputs_r+0x46>
	...

0800c32c <_svfiprintf_r>:
 800c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	4698      	mov	r8, r3
 800c332:	898b      	ldrh	r3, [r1, #12]
 800c334:	4607      	mov	r7, r0
 800c336:	061b      	lsls	r3, r3, #24
 800c338:	460d      	mov	r5, r1
 800c33a:	4614      	mov	r4, r2
 800c33c:	b09d      	sub	sp, #116	; 0x74
 800c33e:	d50e      	bpl.n	800c35e <_svfiprintf_r+0x32>
 800c340:	690b      	ldr	r3, [r1, #16]
 800c342:	b963      	cbnz	r3, 800c35e <_svfiprintf_r+0x32>
 800c344:	2140      	movs	r1, #64	; 0x40
 800c346:	f7ff ff3b 	bl	800c1c0 <_malloc_r>
 800c34a:	6028      	str	r0, [r5, #0]
 800c34c:	6128      	str	r0, [r5, #16]
 800c34e:	b920      	cbnz	r0, 800c35a <_svfiprintf_r+0x2e>
 800c350:	230c      	movs	r3, #12
 800c352:	603b      	str	r3, [r7, #0]
 800c354:	f04f 30ff 	mov.w	r0, #4294967295
 800c358:	e0d1      	b.n	800c4fe <_svfiprintf_r+0x1d2>
 800c35a:	2340      	movs	r3, #64	; 0x40
 800c35c:	616b      	str	r3, [r5, #20]
 800c35e:	2300      	movs	r3, #0
 800c360:	9309      	str	r3, [sp, #36]	; 0x24
 800c362:	2320      	movs	r3, #32
 800c364:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c368:	2330      	movs	r3, #48	; 0x30
 800c36a:	f04f 0901 	mov.w	r9, #1
 800c36e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c372:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c518 <_svfiprintf_r+0x1ec>
 800c376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c37a:	4623      	mov	r3, r4
 800c37c:	469a      	mov	sl, r3
 800c37e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c382:	b10a      	cbz	r2, 800c388 <_svfiprintf_r+0x5c>
 800c384:	2a25      	cmp	r2, #37	; 0x25
 800c386:	d1f9      	bne.n	800c37c <_svfiprintf_r+0x50>
 800c388:	ebba 0b04 	subs.w	fp, sl, r4
 800c38c:	d00b      	beq.n	800c3a6 <_svfiprintf_r+0x7a>
 800c38e:	465b      	mov	r3, fp
 800c390:	4622      	mov	r2, r4
 800c392:	4629      	mov	r1, r5
 800c394:	4638      	mov	r0, r7
 800c396:	f7ff ff6d 	bl	800c274 <__ssputs_r>
 800c39a:	3001      	adds	r0, #1
 800c39c:	f000 80aa 	beq.w	800c4f4 <_svfiprintf_r+0x1c8>
 800c3a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3a2:	445a      	add	r2, fp
 800c3a4:	9209      	str	r2, [sp, #36]	; 0x24
 800c3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f000 80a2 	beq.w	800c4f4 <_svfiprintf_r+0x1c8>
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3ba:	f10a 0a01 	add.w	sl, sl, #1
 800c3be:	9304      	str	r3, [sp, #16]
 800c3c0:	9307      	str	r3, [sp, #28]
 800c3c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3c6:	931a      	str	r3, [sp, #104]	; 0x68
 800c3c8:	4654      	mov	r4, sl
 800c3ca:	2205      	movs	r2, #5
 800c3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3d0:	4851      	ldr	r0, [pc, #324]	; (800c518 <_svfiprintf_r+0x1ec>)
 800c3d2:	f7ff fb0b 	bl	800b9ec <memchr>
 800c3d6:	9a04      	ldr	r2, [sp, #16]
 800c3d8:	b9d8      	cbnz	r0, 800c412 <_svfiprintf_r+0xe6>
 800c3da:	06d0      	lsls	r0, r2, #27
 800c3dc:	bf44      	itt	mi
 800c3de:	2320      	movmi	r3, #32
 800c3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3e4:	0711      	lsls	r1, r2, #28
 800c3e6:	bf44      	itt	mi
 800c3e8:	232b      	movmi	r3, #43	; 0x2b
 800c3ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3ee:	f89a 3000 	ldrb.w	r3, [sl]
 800c3f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3f4:	d015      	beq.n	800c422 <_svfiprintf_r+0xf6>
 800c3f6:	4654      	mov	r4, sl
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	f04f 0c0a 	mov.w	ip, #10
 800c3fe:	9a07      	ldr	r2, [sp, #28]
 800c400:	4621      	mov	r1, r4
 800c402:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c406:	3b30      	subs	r3, #48	; 0x30
 800c408:	2b09      	cmp	r3, #9
 800c40a:	d94e      	bls.n	800c4aa <_svfiprintf_r+0x17e>
 800c40c:	b1b0      	cbz	r0, 800c43c <_svfiprintf_r+0x110>
 800c40e:	9207      	str	r2, [sp, #28]
 800c410:	e014      	b.n	800c43c <_svfiprintf_r+0x110>
 800c412:	eba0 0308 	sub.w	r3, r0, r8
 800c416:	fa09 f303 	lsl.w	r3, r9, r3
 800c41a:	4313      	orrs	r3, r2
 800c41c:	46a2      	mov	sl, r4
 800c41e:	9304      	str	r3, [sp, #16]
 800c420:	e7d2      	b.n	800c3c8 <_svfiprintf_r+0x9c>
 800c422:	9b03      	ldr	r3, [sp, #12]
 800c424:	1d19      	adds	r1, r3, #4
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	9103      	str	r1, [sp, #12]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	bfbb      	ittet	lt
 800c42e:	425b      	neglt	r3, r3
 800c430:	f042 0202 	orrlt.w	r2, r2, #2
 800c434:	9307      	strge	r3, [sp, #28]
 800c436:	9307      	strlt	r3, [sp, #28]
 800c438:	bfb8      	it	lt
 800c43a:	9204      	strlt	r2, [sp, #16]
 800c43c:	7823      	ldrb	r3, [r4, #0]
 800c43e:	2b2e      	cmp	r3, #46	; 0x2e
 800c440:	d10c      	bne.n	800c45c <_svfiprintf_r+0x130>
 800c442:	7863      	ldrb	r3, [r4, #1]
 800c444:	2b2a      	cmp	r3, #42	; 0x2a
 800c446:	d135      	bne.n	800c4b4 <_svfiprintf_r+0x188>
 800c448:	9b03      	ldr	r3, [sp, #12]
 800c44a:	3402      	adds	r4, #2
 800c44c:	1d1a      	adds	r2, r3, #4
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	9203      	str	r2, [sp, #12]
 800c452:	2b00      	cmp	r3, #0
 800c454:	bfb8      	it	lt
 800c456:	f04f 33ff 	movlt.w	r3, #4294967295
 800c45a:	9305      	str	r3, [sp, #20]
 800c45c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c528 <_svfiprintf_r+0x1fc>
 800c460:	2203      	movs	r2, #3
 800c462:	4650      	mov	r0, sl
 800c464:	7821      	ldrb	r1, [r4, #0]
 800c466:	f7ff fac1 	bl	800b9ec <memchr>
 800c46a:	b140      	cbz	r0, 800c47e <_svfiprintf_r+0x152>
 800c46c:	2340      	movs	r3, #64	; 0x40
 800c46e:	eba0 000a 	sub.w	r0, r0, sl
 800c472:	fa03 f000 	lsl.w	r0, r3, r0
 800c476:	9b04      	ldr	r3, [sp, #16]
 800c478:	3401      	adds	r4, #1
 800c47a:	4303      	orrs	r3, r0
 800c47c:	9304      	str	r3, [sp, #16]
 800c47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c482:	2206      	movs	r2, #6
 800c484:	4825      	ldr	r0, [pc, #148]	; (800c51c <_svfiprintf_r+0x1f0>)
 800c486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c48a:	f7ff faaf 	bl	800b9ec <memchr>
 800c48e:	2800      	cmp	r0, #0
 800c490:	d038      	beq.n	800c504 <_svfiprintf_r+0x1d8>
 800c492:	4b23      	ldr	r3, [pc, #140]	; (800c520 <_svfiprintf_r+0x1f4>)
 800c494:	bb1b      	cbnz	r3, 800c4de <_svfiprintf_r+0x1b2>
 800c496:	9b03      	ldr	r3, [sp, #12]
 800c498:	3307      	adds	r3, #7
 800c49a:	f023 0307 	bic.w	r3, r3, #7
 800c49e:	3308      	adds	r3, #8
 800c4a0:	9303      	str	r3, [sp, #12]
 800c4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4a4:	4433      	add	r3, r6
 800c4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a8:	e767      	b.n	800c37a <_svfiprintf_r+0x4e>
 800c4aa:	460c      	mov	r4, r1
 800c4ac:	2001      	movs	r0, #1
 800c4ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4b2:	e7a5      	b.n	800c400 <_svfiprintf_r+0xd4>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f04f 0c0a 	mov.w	ip, #10
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	3401      	adds	r4, #1
 800c4be:	9305      	str	r3, [sp, #20]
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4c6:	3a30      	subs	r2, #48	; 0x30
 800c4c8:	2a09      	cmp	r2, #9
 800c4ca:	d903      	bls.n	800c4d4 <_svfiprintf_r+0x1a8>
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d0c5      	beq.n	800c45c <_svfiprintf_r+0x130>
 800c4d0:	9105      	str	r1, [sp, #20]
 800c4d2:	e7c3      	b.n	800c45c <_svfiprintf_r+0x130>
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4dc:	e7f0      	b.n	800c4c0 <_svfiprintf_r+0x194>
 800c4de:	ab03      	add	r3, sp, #12
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	462a      	mov	r2, r5
 800c4e4:	4638      	mov	r0, r7
 800c4e6:	4b0f      	ldr	r3, [pc, #60]	; (800c524 <_svfiprintf_r+0x1f8>)
 800c4e8:	a904      	add	r1, sp, #16
 800c4ea:	f7fd fc61 	bl	8009db0 <_printf_float>
 800c4ee:	1c42      	adds	r2, r0, #1
 800c4f0:	4606      	mov	r6, r0
 800c4f2:	d1d6      	bne.n	800c4a2 <_svfiprintf_r+0x176>
 800c4f4:	89ab      	ldrh	r3, [r5, #12]
 800c4f6:	065b      	lsls	r3, r3, #25
 800c4f8:	f53f af2c 	bmi.w	800c354 <_svfiprintf_r+0x28>
 800c4fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4fe:	b01d      	add	sp, #116	; 0x74
 800c500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c504:	ab03      	add	r3, sp, #12
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	462a      	mov	r2, r5
 800c50a:	4638      	mov	r0, r7
 800c50c:	4b05      	ldr	r3, [pc, #20]	; (800c524 <_svfiprintf_r+0x1f8>)
 800c50e:	a904      	add	r1, sp, #16
 800c510:	f7fd feea 	bl	800a2e8 <_printf_i>
 800c514:	e7eb      	b.n	800c4ee <_svfiprintf_r+0x1c2>
 800c516:	bf00      	nop
 800c518:	0800df6c 	.word	0x0800df6c
 800c51c:	0800df76 	.word	0x0800df76
 800c520:	08009db1 	.word	0x08009db1
 800c524:	0800c275 	.word	0x0800c275
 800c528:	0800df72 	.word	0x0800df72

0800c52c <__sfputc_r>:
 800c52c:	6893      	ldr	r3, [r2, #8]
 800c52e:	b410      	push	{r4}
 800c530:	3b01      	subs	r3, #1
 800c532:	2b00      	cmp	r3, #0
 800c534:	6093      	str	r3, [r2, #8]
 800c536:	da07      	bge.n	800c548 <__sfputc_r+0x1c>
 800c538:	6994      	ldr	r4, [r2, #24]
 800c53a:	42a3      	cmp	r3, r4
 800c53c:	db01      	blt.n	800c542 <__sfputc_r+0x16>
 800c53e:	290a      	cmp	r1, #10
 800c540:	d102      	bne.n	800c548 <__sfputc_r+0x1c>
 800c542:	bc10      	pop	{r4}
 800c544:	f7fe b8e8 	b.w	800a718 <__swbuf_r>
 800c548:	6813      	ldr	r3, [r2, #0]
 800c54a:	1c58      	adds	r0, r3, #1
 800c54c:	6010      	str	r0, [r2, #0]
 800c54e:	7019      	strb	r1, [r3, #0]
 800c550:	4608      	mov	r0, r1
 800c552:	bc10      	pop	{r4}
 800c554:	4770      	bx	lr

0800c556 <__sfputs_r>:
 800c556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c558:	4606      	mov	r6, r0
 800c55a:	460f      	mov	r7, r1
 800c55c:	4614      	mov	r4, r2
 800c55e:	18d5      	adds	r5, r2, r3
 800c560:	42ac      	cmp	r4, r5
 800c562:	d101      	bne.n	800c568 <__sfputs_r+0x12>
 800c564:	2000      	movs	r0, #0
 800c566:	e007      	b.n	800c578 <__sfputs_r+0x22>
 800c568:	463a      	mov	r2, r7
 800c56a:	4630      	mov	r0, r6
 800c56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c570:	f7ff ffdc 	bl	800c52c <__sfputc_r>
 800c574:	1c43      	adds	r3, r0, #1
 800c576:	d1f3      	bne.n	800c560 <__sfputs_r+0xa>
 800c578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c57c <_vfiprintf_r>:
 800c57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c580:	460d      	mov	r5, r1
 800c582:	4614      	mov	r4, r2
 800c584:	4698      	mov	r8, r3
 800c586:	4606      	mov	r6, r0
 800c588:	b09d      	sub	sp, #116	; 0x74
 800c58a:	b118      	cbz	r0, 800c594 <_vfiprintf_r+0x18>
 800c58c:	6983      	ldr	r3, [r0, #24]
 800c58e:	b90b      	cbnz	r3, 800c594 <_vfiprintf_r+0x18>
 800c590:	f7ff f91a 	bl	800b7c8 <__sinit>
 800c594:	4b89      	ldr	r3, [pc, #548]	; (800c7bc <_vfiprintf_r+0x240>)
 800c596:	429d      	cmp	r5, r3
 800c598:	d11b      	bne.n	800c5d2 <_vfiprintf_r+0x56>
 800c59a:	6875      	ldr	r5, [r6, #4]
 800c59c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c59e:	07d9      	lsls	r1, r3, #31
 800c5a0:	d405      	bmi.n	800c5ae <_vfiprintf_r+0x32>
 800c5a2:	89ab      	ldrh	r3, [r5, #12]
 800c5a4:	059a      	lsls	r2, r3, #22
 800c5a6:	d402      	bmi.n	800c5ae <_vfiprintf_r+0x32>
 800c5a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5aa:	f7ff f9b0 	bl	800b90e <__retarget_lock_acquire_recursive>
 800c5ae:	89ab      	ldrh	r3, [r5, #12]
 800c5b0:	071b      	lsls	r3, r3, #28
 800c5b2:	d501      	bpl.n	800c5b8 <_vfiprintf_r+0x3c>
 800c5b4:	692b      	ldr	r3, [r5, #16]
 800c5b6:	b9eb      	cbnz	r3, 800c5f4 <_vfiprintf_r+0x78>
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	f7fe f8fe 	bl	800a7bc <__swsetup_r>
 800c5c0:	b1c0      	cbz	r0, 800c5f4 <_vfiprintf_r+0x78>
 800c5c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5c4:	07dc      	lsls	r4, r3, #31
 800c5c6:	d50e      	bpl.n	800c5e6 <_vfiprintf_r+0x6a>
 800c5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5cc:	b01d      	add	sp, #116	; 0x74
 800c5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d2:	4b7b      	ldr	r3, [pc, #492]	; (800c7c0 <_vfiprintf_r+0x244>)
 800c5d4:	429d      	cmp	r5, r3
 800c5d6:	d101      	bne.n	800c5dc <_vfiprintf_r+0x60>
 800c5d8:	68b5      	ldr	r5, [r6, #8]
 800c5da:	e7df      	b.n	800c59c <_vfiprintf_r+0x20>
 800c5dc:	4b79      	ldr	r3, [pc, #484]	; (800c7c4 <_vfiprintf_r+0x248>)
 800c5de:	429d      	cmp	r5, r3
 800c5e0:	bf08      	it	eq
 800c5e2:	68f5      	ldreq	r5, [r6, #12]
 800c5e4:	e7da      	b.n	800c59c <_vfiprintf_r+0x20>
 800c5e6:	89ab      	ldrh	r3, [r5, #12]
 800c5e8:	0598      	lsls	r0, r3, #22
 800c5ea:	d4ed      	bmi.n	800c5c8 <_vfiprintf_r+0x4c>
 800c5ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5ee:	f7ff f98f 	bl	800b910 <__retarget_lock_release_recursive>
 800c5f2:	e7e9      	b.n	800c5c8 <_vfiprintf_r+0x4c>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c5f8:	2320      	movs	r3, #32
 800c5fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5fe:	2330      	movs	r3, #48	; 0x30
 800c600:	f04f 0901 	mov.w	r9, #1
 800c604:	f8cd 800c 	str.w	r8, [sp, #12]
 800c608:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c7c8 <_vfiprintf_r+0x24c>
 800c60c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c610:	4623      	mov	r3, r4
 800c612:	469a      	mov	sl, r3
 800c614:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c618:	b10a      	cbz	r2, 800c61e <_vfiprintf_r+0xa2>
 800c61a:	2a25      	cmp	r2, #37	; 0x25
 800c61c:	d1f9      	bne.n	800c612 <_vfiprintf_r+0x96>
 800c61e:	ebba 0b04 	subs.w	fp, sl, r4
 800c622:	d00b      	beq.n	800c63c <_vfiprintf_r+0xc0>
 800c624:	465b      	mov	r3, fp
 800c626:	4622      	mov	r2, r4
 800c628:	4629      	mov	r1, r5
 800c62a:	4630      	mov	r0, r6
 800c62c:	f7ff ff93 	bl	800c556 <__sfputs_r>
 800c630:	3001      	adds	r0, #1
 800c632:	f000 80aa 	beq.w	800c78a <_vfiprintf_r+0x20e>
 800c636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c638:	445a      	add	r2, fp
 800c63a:	9209      	str	r2, [sp, #36]	; 0x24
 800c63c:	f89a 3000 	ldrb.w	r3, [sl]
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 80a2 	beq.w	800c78a <_vfiprintf_r+0x20e>
 800c646:	2300      	movs	r3, #0
 800c648:	f04f 32ff 	mov.w	r2, #4294967295
 800c64c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c650:	f10a 0a01 	add.w	sl, sl, #1
 800c654:	9304      	str	r3, [sp, #16]
 800c656:	9307      	str	r3, [sp, #28]
 800c658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c65c:	931a      	str	r3, [sp, #104]	; 0x68
 800c65e:	4654      	mov	r4, sl
 800c660:	2205      	movs	r2, #5
 800c662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c666:	4858      	ldr	r0, [pc, #352]	; (800c7c8 <_vfiprintf_r+0x24c>)
 800c668:	f7ff f9c0 	bl	800b9ec <memchr>
 800c66c:	9a04      	ldr	r2, [sp, #16]
 800c66e:	b9d8      	cbnz	r0, 800c6a8 <_vfiprintf_r+0x12c>
 800c670:	06d1      	lsls	r1, r2, #27
 800c672:	bf44      	itt	mi
 800c674:	2320      	movmi	r3, #32
 800c676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c67a:	0713      	lsls	r3, r2, #28
 800c67c:	bf44      	itt	mi
 800c67e:	232b      	movmi	r3, #43	; 0x2b
 800c680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c684:	f89a 3000 	ldrb.w	r3, [sl]
 800c688:	2b2a      	cmp	r3, #42	; 0x2a
 800c68a:	d015      	beq.n	800c6b8 <_vfiprintf_r+0x13c>
 800c68c:	4654      	mov	r4, sl
 800c68e:	2000      	movs	r0, #0
 800c690:	f04f 0c0a 	mov.w	ip, #10
 800c694:	9a07      	ldr	r2, [sp, #28]
 800c696:	4621      	mov	r1, r4
 800c698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c69c:	3b30      	subs	r3, #48	; 0x30
 800c69e:	2b09      	cmp	r3, #9
 800c6a0:	d94e      	bls.n	800c740 <_vfiprintf_r+0x1c4>
 800c6a2:	b1b0      	cbz	r0, 800c6d2 <_vfiprintf_r+0x156>
 800c6a4:	9207      	str	r2, [sp, #28]
 800c6a6:	e014      	b.n	800c6d2 <_vfiprintf_r+0x156>
 800c6a8:	eba0 0308 	sub.w	r3, r0, r8
 800c6ac:	fa09 f303 	lsl.w	r3, r9, r3
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	46a2      	mov	sl, r4
 800c6b4:	9304      	str	r3, [sp, #16]
 800c6b6:	e7d2      	b.n	800c65e <_vfiprintf_r+0xe2>
 800c6b8:	9b03      	ldr	r3, [sp, #12]
 800c6ba:	1d19      	adds	r1, r3, #4
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	9103      	str	r1, [sp, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	bfbb      	ittet	lt
 800c6c4:	425b      	neglt	r3, r3
 800c6c6:	f042 0202 	orrlt.w	r2, r2, #2
 800c6ca:	9307      	strge	r3, [sp, #28]
 800c6cc:	9307      	strlt	r3, [sp, #28]
 800c6ce:	bfb8      	it	lt
 800c6d0:	9204      	strlt	r2, [sp, #16]
 800c6d2:	7823      	ldrb	r3, [r4, #0]
 800c6d4:	2b2e      	cmp	r3, #46	; 0x2e
 800c6d6:	d10c      	bne.n	800c6f2 <_vfiprintf_r+0x176>
 800c6d8:	7863      	ldrb	r3, [r4, #1]
 800c6da:	2b2a      	cmp	r3, #42	; 0x2a
 800c6dc:	d135      	bne.n	800c74a <_vfiprintf_r+0x1ce>
 800c6de:	9b03      	ldr	r3, [sp, #12]
 800c6e0:	3402      	adds	r4, #2
 800c6e2:	1d1a      	adds	r2, r3, #4
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	9203      	str	r2, [sp, #12]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	bfb8      	it	lt
 800c6ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6f0:	9305      	str	r3, [sp, #20]
 800c6f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c7d8 <_vfiprintf_r+0x25c>
 800c6f6:	2203      	movs	r2, #3
 800c6f8:	4650      	mov	r0, sl
 800c6fa:	7821      	ldrb	r1, [r4, #0]
 800c6fc:	f7ff f976 	bl	800b9ec <memchr>
 800c700:	b140      	cbz	r0, 800c714 <_vfiprintf_r+0x198>
 800c702:	2340      	movs	r3, #64	; 0x40
 800c704:	eba0 000a 	sub.w	r0, r0, sl
 800c708:	fa03 f000 	lsl.w	r0, r3, r0
 800c70c:	9b04      	ldr	r3, [sp, #16]
 800c70e:	3401      	adds	r4, #1
 800c710:	4303      	orrs	r3, r0
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c718:	2206      	movs	r2, #6
 800c71a:	482c      	ldr	r0, [pc, #176]	; (800c7cc <_vfiprintf_r+0x250>)
 800c71c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c720:	f7ff f964 	bl	800b9ec <memchr>
 800c724:	2800      	cmp	r0, #0
 800c726:	d03f      	beq.n	800c7a8 <_vfiprintf_r+0x22c>
 800c728:	4b29      	ldr	r3, [pc, #164]	; (800c7d0 <_vfiprintf_r+0x254>)
 800c72a:	bb1b      	cbnz	r3, 800c774 <_vfiprintf_r+0x1f8>
 800c72c:	9b03      	ldr	r3, [sp, #12]
 800c72e:	3307      	adds	r3, #7
 800c730:	f023 0307 	bic.w	r3, r3, #7
 800c734:	3308      	adds	r3, #8
 800c736:	9303      	str	r3, [sp, #12]
 800c738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c73a:	443b      	add	r3, r7
 800c73c:	9309      	str	r3, [sp, #36]	; 0x24
 800c73e:	e767      	b.n	800c610 <_vfiprintf_r+0x94>
 800c740:	460c      	mov	r4, r1
 800c742:	2001      	movs	r0, #1
 800c744:	fb0c 3202 	mla	r2, ip, r2, r3
 800c748:	e7a5      	b.n	800c696 <_vfiprintf_r+0x11a>
 800c74a:	2300      	movs	r3, #0
 800c74c:	f04f 0c0a 	mov.w	ip, #10
 800c750:	4619      	mov	r1, r3
 800c752:	3401      	adds	r4, #1
 800c754:	9305      	str	r3, [sp, #20]
 800c756:	4620      	mov	r0, r4
 800c758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c75c:	3a30      	subs	r2, #48	; 0x30
 800c75e:	2a09      	cmp	r2, #9
 800c760:	d903      	bls.n	800c76a <_vfiprintf_r+0x1ee>
 800c762:	2b00      	cmp	r3, #0
 800c764:	d0c5      	beq.n	800c6f2 <_vfiprintf_r+0x176>
 800c766:	9105      	str	r1, [sp, #20]
 800c768:	e7c3      	b.n	800c6f2 <_vfiprintf_r+0x176>
 800c76a:	4604      	mov	r4, r0
 800c76c:	2301      	movs	r3, #1
 800c76e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c772:	e7f0      	b.n	800c756 <_vfiprintf_r+0x1da>
 800c774:	ab03      	add	r3, sp, #12
 800c776:	9300      	str	r3, [sp, #0]
 800c778:	462a      	mov	r2, r5
 800c77a:	4630      	mov	r0, r6
 800c77c:	4b15      	ldr	r3, [pc, #84]	; (800c7d4 <_vfiprintf_r+0x258>)
 800c77e:	a904      	add	r1, sp, #16
 800c780:	f7fd fb16 	bl	8009db0 <_printf_float>
 800c784:	4607      	mov	r7, r0
 800c786:	1c78      	adds	r0, r7, #1
 800c788:	d1d6      	bne.n	800c738 <_vfiprintf_r+0x1bc>
 800c78a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c78c:	07d9      	lsls	r1, r3, #31
 800c78e:	d405      	bmi.n	800c79c <_vfiprintf_r+0x220>
 800c790:	89ab      	ldrh	r3, [r5, #12]
 800c792:	059a      	lsls	r2, r3, #22
 800c794:	d402      	bmi.n	800c79c <_vfiprintf_r+0x220>
 800c796:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c798:	f7ff f8ba 	bl	800b910 <__retarget_lock_release_recursive>
 800c79c:	89ab      	ldrh	r3, [r5, #12]
 800c79e:	065b      	lsls	r3, r3, #25
 800c7a0:	f53f af12 	bmi.w	800c5c8 <_vfiprintf_r+0x4c>
 800c7a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7a6:	e711      	b.n	800c5cc <_vfiprintf_r+0x50>
 800c7a8:	ab03      	add	r3, sp, #12
 800c7aa:	9300      	str	r3, [sp, #0]
 800c7ac:	462a      	mov	r2, r5
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	4b08      	ldr	r3, [pc, #32]	; (800c7d4 <_vfiprintf_r+0x258>)
 800c7b2:	a904      	add	r1, sp, #16
 800c7b4:	f7fd fd98 	bl	800a2e8 <_printf_i>
 800c7b8:	e7e4      	b.n	800c784 <_vfiprintf_r+0x208>
 800c7ba:	bf00      	nop
 800c7bc:	0800ddd0 	.word	0x0800ddd0
 800c7c0:	0800ddf0 	.word	0x0800ddf0
 800c7c4:	0800ddb0 	.word	0x0800ddb0
 800c7c8:	0800df6c 	.word	0x0800df6c
 800c7cc:	0800df76 	.word	0x0800df76
 800c7d0:	08009db1 	.word	0x08009db1
 800c7d4:	0800c557 	.word	0x0800c557
 800c7d8:	0800df72 	.word	0x0800df72

0800c7dc <_sbrk_r>:
 800c7dc:	b538      	push	{r3, r4, r5, lr}
 800c7de:	2300      	movs	r3, #0
 800c7e0:	4d05      	ldr	r5, [pc, #20]	; (800c7f8 <_sbrk_r+0x1c>)
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	4608      	mov	r0, r1
 800c7e6:	602b      	str	r3, [r5, #0]
 800c7e8:	f7f6 f8c2 	bl	8002970 <_sbrk>
 800c7ec:	1c43      	adds	r3, r0, #1
 800c7ee:	d102      	bne.n	800c7f6 <_sbrk_r+0x1a>
 800c7f0:	682b      	ldr	r3, [r5, #0]
 800c7f2:	b103      	cbz	r3, 800c7f6 <_sbrk_r+0x1a>
 800c7f4:	6023      	str	r3, [r4, #0]
 800c7f6:	bd38      	pop	{r3, r4, r5, pc}
 800c7f8:	200003f0 	.word	0x200003f0

0800c7fc <__sread>:
 800c7fc:	b510      	push	{r4, lr}
 800c7fe:	460c      	mov	r4, r1
 800c800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c804:	f000 f908 	bl	800ca18 <_read_r>
 800c808:	2800      	cmp	r0, #0
 800c80a:	bfab      	itete	ge
 800c80c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c80e:	89a3      	ldrhlt	r3, [r4, #12]
 800c810:	181b      	addge	r3, r3, r0
 800c812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c816:	bfac      	ite	ge
 800c818:	6563      	strge	r3, [r4, #84]	; 0x54
 800c81a:	81a3      	strhlt	r3, [r4, #12]
 800c81c:	bd10      	pop	{r4, pc}

0800c81e <__swrite>:
 800c81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c822:	461f      	mov	r7, r3
 800c824:	898b      	ldrh	r3, [r1, #12]
 800c826:	4605      	mov	r5, r0
 800c828:	05db      	lsls	r3, r3, #23
 800c82a:	460c      	mov	r4, r1
 800c82c:	4616      	mov	r6, r2
 800c82e:	d505      	bpl.n	800c83c <__swrite+0x1e>
 800c830:	2302      	movs	r3, #2
 800c832:	2200      	movs	r2, #0
 800c834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c838:	f000 f898 	bl	800c96c <_lseek_r>
 800c83c:	89a3      	ldrh	r3, [r4, #12]
 800c83e:	4632      	mov	r2, r6
 800c840:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	4628      	mov	r0, r5
 800c848:	463b      	mov	r3, r7
 800c84a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c84e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c852:	f000 b817 	b.w	800c884 <_write_r>

0800c856 <__sseek>:
 800c856:	b510      	push	{r4, lr}
 800c858:	460c      	mov	r4, r1
 800c85a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c85e:	f000 f885 	bl	800c96c <_lseek_r>
 800c862:	1c43      	adds	r3, r0, #1
 800c864:	89a3      	ldrh	r3, [r4, #12]
 800c866:	bf15      	itete	ne
 800c868:	6560      	strne	r0, [r4, #84]	; 0x54
 800c86a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c86e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c872:	81a3      	strheq	r3, [r4, #12]
 800c874:	bf18      	it	ne
 800c876:	81a3      	strhne	r3, [r4, #12]
 800c878:	bd10      	pop	{r4, pc}

0800c87a <__sclose>:
 800c87a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c87e:	f000 b831 	b.w	800c8e4 <_close_r>
	...

0800c884 <_write_r>:
 800c884:	b538      	push	{r3, r4, r5, lr}
 800c886:	4604      	mov	r4, r0
 800c888:	4608      	mov	r0, r1
 800c88a:	4611      	mov	r1, r2
 800c88c:	2200      	movs	r2, #0
 800c88e:	4d05      	ldr	r5, [pc, #20]	; (800c8a4 <_write_r+0x20>)
 800c890:	602a      	str	r2, [r5, #0]
 800c892:	461a      	mov	r2, r3
 800c894:	f7f6 f820 	bl	80028d8 <_write>
 800c898:	1c43      	adds	r3, r0, #1
 800c89a:	d102      	bne.n	800c8a2 <_write_r+0x1e>
 800c89c:	682b      	ldr	r3, [r5, #0]
 800c89e:	b103      	cbz	r3, 800c8a2 <_write_r+0x1e>
 800c8a0:	6023      	str	r3, [r4, #0]
 800c8a2:	bd38      	pop	{r3, r4, r5, pc}
 800c8a4:	200003f0 	.word	0x200003f0

0800c8a8 <__assert_func>:
 800c8a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8aa:	4614      	mov	r4, r2
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	4b09      	ldr	r3, [pc, #36]	; (800c8d4 <__assert_func+0x2c>)
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68d8      	ldr	r0, [r3, #12]
 800c8b6:	b14c      	cbz	r4, 800c8cc <__assert_func+0x24>
 800c8b8:	4b07      	ldr	r3, [pc, #28]	; (800c8d8 <__assert_func+0x30>)
 800c8ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8be:	9100      	str	r1, [sp, #0]
 800c8c0:	462b      	mov	r3, r5
 800c8c2:	4906      	ldr	r1, [pc, #24]	; (800c8dc <__assert_func+0x34>)
 800c8c4:	f000 f81e 	bl	800c904 <fiprintf>
 800c8c8:	f7fd f973 	bl	8009bb2 <abort>
 800c8cc:	4b04      	ldr	r3, [pc, #16]	; (800c8e0 <__assert_func+0x38>)
 800c8ce:	461c      	mov	r4, r3
 800c8d0:	e7f3      	b.n	800c8ba <__assert_func+0x12>
 800c8d2:	bf00      	nop
 800c8d4:	20000028 	.word	0x20000028
 800c8d8:	0800df7d 	.word	0x0800df7d
 800c8dc:	0800df8a 	.word	0x0800df8a
 800c8e0:	0800dfb8 	.word	0x0800dfb8

0800c8e4 <_close_r>:
 800c8e4:	b538      	push	{r3, r4, r5, lr}
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	4d05      	ldr	r5, [pc, #20]	; (800c900 <_close_r+0x1c>)
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	4608      	mov	r0, r1
 800c8ee:	602b      	str	r3, [r5, #0]
 800c8f0:	f7f6 f80e 	bl	8002910 <_close>
 800c8f4:	1c43      	adds	r3, r0, #1
 800c8f6:	d102      	bne.n	800c8fe <_close_r+0x1a>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	b103      	cbz	r3, 800c8fe <_close_r+0x1a>
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	bd38      	pop	{r3, r4, r5, pc}
 800c900:	200003f0 	.word	0x200003f0

0800c904 <fiprintf>:
 800c904:	b40e      	push	{r1, r2, r3}
 800c906:	b503      	push	{r0, r1, lr}
 800c908:	4601      	mov	r1, r0
 800c90a:	ab03      	add	r3, sp, #12
 800c90c:	4805      	ldr	r0, [pc, #20]	; (800c924 <fiprintf+0x20>)
 800c90e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c912:	6800      	ldr	r0, [r0, #0]
 800c914:	9301      	str	r3, [sp, #4]
 800c916:	f7ff fe31 	bl	800c57c <_vfiprintf_r>
 800c91a:	b002      	add	sp, #8
 800c91c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c920:	b003      	add	sp, #12
 800c922:	4770      	bx	lr
 800c924:	20000028 	.word	0x20000028

0800c928 <_fstat_r>:
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	2300      	movs	r3, #0
 800c92c:	4d06      	ldr	r5, [pc, #24]	; (800c948 <_fstat_r+0x20>)
 800c92e:	4604      	mov	r4, r0
 800c930:	4608      	mov	r0, r1
 800c932:	4611      	mov	r1, r2
 800c934:	602b      	str	r3, [r5, #0]
 800c936:	f7f5 fff6 	bl	8002926 <_fstat>
 800c93a:	1c43      	adds	r3, r0, #1
 800c93c:	d102      	bne.n	800c944 <_fstat_r+0x1c>
 800c93e:	682b      	ldr	r3, [r5, #0]
 800c940:	b103      	cbz	r3, 800c944 <_fstat_r+0x1c>
 800c942:	6023      	str	r3, [r4, #0]
 800c944:	bd38      	pop	{r3, r4, r5, pc}
 800c946:	bf00      	nop
 800c948:	200003f0 	.word	0x200003f0

0800c94c <_isatty_r>:
 800c94c:	b538      	push	{r3, r4, r5, lr}
 800c94e:	2300      	movs	r3, #0
 800c950:	4d05      	ldr	r5, [pc, #20]	; (800c968 <_isatty_r+0x1c>)
 800c952:	4604      	mov	r4, r0
 800c954:	4608      	mov	r0, r1
 800c956:	602b      	str	r3, [r5, #0]
 800c958:	f7f5 fff4 	bl	8002944 <_isatty>
 800c95c:	1c43      	adds	r3, r0, #1
 800c95e:	d102      	bne.n	800c966 <_isatty_r+0x1a>
 800c960:	682b      	ldr	r3, [r5, #0]
 800c962:	b103      	cbz	r3, 800c966 <_isatty_r+0x1a>
 800c964:	6023      	str	r3, [r4, #0]
 800c966:	bd38      	pop	{r3, r4, r5, pc}
 800c968:	200003f0 	.word	0x200003f0

0800c96c <_lseek_r>:
 800c96c:	b538      	push	{r3, r4, r5, lr}
 800c96e:	4604      	mov	r4, r0
 800c970:	4608      	mov	r0, r1
 800c972:	4611      	mov	r1, r2
 800c974:	2200      	movs	r2, #0
 800c976:	4d05      	ldr	r5, [pc, #20]	; (800c98c <_lseek_r+0x20>)
 800c978:	602a      	str	r2, [r5, #0]
 800c97a:	461a      	mov	r2, r3
 800c97c:	f7f5 ffec 	bl	8002958 <_lseek>
 800c980:	1c43      	adds	r3, r0, #1
 800c982:	d102      	bne.n	800c98a <_lseek_r+0x1e>
 800c984:	682b      	ldr	r3, [r5, #0]
 800c986:	b103      	cbz	r3, 800c98a <_lseek_r+0x1e>
 800c988:	6023      	str	r3, [r4, #0]
 800c98a:	bd38      	pop	{r3, r4, r5, pc}
 800c98c:	200003f0 	.word	0x200003f0

0800c990 <__ascii_mbtowc>:
 800c990:	b082      	sub	sp, #8
 800c992:	b901      	cbnz	r1, 800c996 <__ascii_mbtowc+0x6>
 800c994:	a901      	add	r1, sp, #4
 800c996:	b142      	cbz	r2, 800c9aa <__ascii_mbtowc+0x1a>
 800c998:	b14b      	cbz	r3, 800c9ae <__ascii_mbtowc+0x1e>
 800c99a:	7813      	ldrb	r3, [r2, #0]
 800c99c:	600b      	str	r3, [r1, #0]
 800c99e:	7812      	ldrb	r2, [r2, #0]
 800c9a0:	1e10      	subs	r0, r2, #0
 800c9a2:	bf18      	it	ne
 800c9a4:	2001      	movne	r0, #1
 800c9a6:	b002      	add	sp, #8
 800c9a8:	4770      	bx	lr
 800c9aa:	4610      	mov	r0, r2
 800c9ac:	e7fb      	b.n	800c9a6 <__ascii_mbtowc+0x16>
 800c9ae:	f06f 0001 	mvn.w	r0, #1
 800c9b2:	e7f8      	b.n	800c9a6 <__ascii_mbtowc+0x16>

0800c9b4 <__malloc_lock>:
 800c9b4:	4801      	ldr	r0, [pc, #4]	; (800c9bc <__malloc_lock+0x8>)
 800c9b6:	f7fe bfaa 	b.w	800b90e <__retarget_lock_acquire_recursive>
 800c9ba:	bf00      	nop
 800c9bc:	200003e8 	.word	0x200003e8

0800c9c0 <__malloc_unlock>:
 800c9c0:	4801      	ldr	r0, [pc, #4]	; (800c9c8 <__malloc_unlock+0x8>)
 800c9c2:	f7fe bfa5 	b.w	800b910 <__retarget_lock_release_recursive>
 800c9c6:	bf00      	nop
 800c9c8:	200003e8 	.word	0x200003e8

0800c9cc <_realloc_r>:
 800c9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ce:	4607      	mov	r7, r0
 800c9d0:	4614      	mov	r4, r2
 800c9d2:	460e      	mov	r6, r1
 800c9d4:	b921      	cbnz	r1, 800c9e0 <_realloc_r+0x14>
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c9dc:	f7ff bbf0 	b.w	800c1c0 <_malloc_r>
 800c9e0:	b922      	cbnz	r2, 800c9ec <_realloc_r+0x20>
 800c9e2:	f7ff fba1 	bl	800c128 <_free_r>
 800c9e6:	4625      	mov	r5, r4
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9ec:	f000 f833 	bl	800ca56 <_malloc_usable_size_r>
 800c9f0:	42a0      	cmp	r0, r4
 800c9f2:	d20f      	bcs.n	800ca14 <_realloc_r+0x48>
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	4638      	mov	r0, r7
 800c9f8:	f7ff fbe2 	bl	800c1c0 <_malloc_r>
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d0f2      	beq.n	800c9e8 <_realloc_r+0x1c>
 800ca02:	4631      	mov	r1, r6
 800ca04:	4622      	mov	r2, r4
 800ca06:	f7fd f905 	bl	8009c14 <memcpy>
 800ca0a:	4631      	mov	r1, r6
 800ca0c:	4638      	mov	r0, r7
 800ca0e:	f7ff fb8b 	bl	800c128 <_free_r>
 800ca12:	e7e9      	b.n	800c9e8 <_realloc_r+0x1c>
 800ca14:	4635      	mov	r5, r6
 800ca16:	e7e7      	b.n	800c9e8 <_realloc_r+0x1c>

0800ca18 <_read_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	4608      	mov	r0, r1
 800ca1e:	4611      	mov	r1, r2
 800ca20:	2200      	movs	r2, #0
 800ca22:	4d05      	ldr	r5, [pc, #20]	; (800ca38 <_read_r+0x20>)
 800ca24:	602a      	str	r2, [r5, #0]
 800ca26:	461a      	mov	r2, r3
 800ca28:	f7f5 ff39 	bl	800289e <_read>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	d102      	bne.n	800ca36 <_read_r+0x1e>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	b103      	cbz	r3, 800ca36 <_read_r+0x1e>
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	200003f0 	.word	0x200003f0

0800ca3c <__ascii_wctomb>:
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	4608      	mov	r0, r1
 800ca40:	b141      	cbz	r1, 800ca54 <__ascii_wctomb+0x18>
 800ca42:	2aff      	cmp	r2, #255	; 0xff
 800ca44:	d904      	bls.n	800ca50 <__ascii_wctomb+0x14>
 800ca46:	228a      	movs	r2, #138	; 0x8a
 800ca48:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4c:	601a      	str	r2, [r3, #0]
 800ca4e:	4770      	bx	lr
 800ca50:	2001      	movs	r0, #1
 800ca52:	700a      	strb	r2, [r1, #0]
 800ca54:	4770      	bx	lr

0800ca56 <_malloc_usable_size_r>:
 800ca56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca5a:	1f18      	subs	r0, r3, #4
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	bfbc      	itt	lt
 800ca60:	580b      	ldrlt	r3, [r1, r0]
 800ca62:	18c0      	addlt	r0, r0, r3
 800ca64:	4770      	bx	lr
	...

0800ca68 <_init>:
 800ca68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6a:	bf00      	nop
 800ca6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca6e:	bc08      	pop	{r3}
 800ca70:	469e      	mov	lr, r3
 800ca72:	4770      	bx	lr

0800ca74 <_fini>:
 800ca74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca76:	bf00      	nop
 800ca78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca7a:	bc08      	pop	{r3}
 800ca7c:	469e      	mov	lr, r3
 800ca7e:	4770      	bx	lr
